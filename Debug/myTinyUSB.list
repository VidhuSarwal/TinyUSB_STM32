
myTinyUSB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000854c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08008710  08008710  00009710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008968  08008968  0000a030  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008968  08008968  00009968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008970  08008970  0000a030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008970  08008970  00009970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008974  08008974  00009974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  08008978  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a64  20000030  080089a8  0000a030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a94  080089a8  0000aa94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a7bf  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d0f  00000000  00000000  0002481f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  00028530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d21  00000000  00000000  00029598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c38  00000000  00000000  0002a2b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c72  00000000  00000000  00050ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4dfa  00000000  00000000  00065b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014a95d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004450  00000000  00000000  0014a9a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0014edf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000030 	.word	0x20000030
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080086f8 	.word	0x080086f8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000034 	.word	0x20000034
 8000200:	080086f8 	.word	0x080086f8

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000228:	f000 b988 	b.w	800053c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	468e      	mov	lr, r1
 800024c:	4604      	mov	r4, r0
 800024e:	4688      	mov	r8, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d962      	bls.n	8000320 <__udivmoddi4+0xdc>
 800025a:	fab2 f682 	clz	r6, r2
 800025e:	b14e      	cbz	r6, 8000274 <__udivmoddi4+0x30>
 8000260:	f1c6 0320 	rsb	r3, r6, #32
 8000264:	fa01 f806 	lsl.w	r8, r1, r6
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	40b7      	lsls	r7, r6
 800026e:	ea43 0808 	orr.w	r8, r3, r8
 8000272:	40b4      	lsls	r4, r6
 8000274:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000278:	fa1f fc87 	uxth.w	ip, r7
 800027c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000280:	0c23      	lsrs	r3, r4, #16
 8000282:	fb0e 8811 	mls	r8, lr, r1, r8
 8000286:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028a:	fb01 f20c 	mul.w	r2, r1, ip
 800028e:	429a      	cmp	r2, r3
 8000290:	d909      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000298:	f080 80ea 	bcs.w	8000470 <__udivmoddi4+0x22c>
 800029c:	429a      	cmp	r2, r3
 800029e:	f240 80e7 	bls.w	8000470 <__udivmoddi4+0x22c>
 80002a2:	3902      	subs	r1, #2
 80002a4:	443b      	add	r3, r7
 80002a6:	1a9a      	subs	r2, r3, r2
 80002a8:	b2a3      	uxth	r3, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ba:	459c      	cmp	ip, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x8e>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002c4:	f080 80d6 	bcs.w	8000474 <__udivmoddi4+0x230>
 80002c8:	459c      	cmp	ip, r3
 80002ca:	f240 80d3 	bls.w	8000474 <__udivmoddi4+0x230>
 80002ce:	443b      	add	r3, r7
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d6:	eba3 030c 	sub.w	r3, r3, ip
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40f3      	lsrs	r3, r6
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xb6>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb0>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa2>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x14c>
 8000302:	4573      	cmp	r3, lr
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xc8>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 8105 	bhi.w	8000516 <__udivmoddi4+0x2d2>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000312:	2001      	movs	r0, #1
 8000314:	4690      	mov	r8, r2
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e5      	beq.n	80002e6 <__udivmoddi4+0xa2>
 800031a:	e9c5 4800 	strd	r4, r8, [r5]
 800031e:	e7e2      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	2a00      	cmp	r2, #0
 8000322:	f000 8090 	beq.w	8000446 <__udivmoddi4+0x202>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	2e00      	cmp	r6, #0
 800032c:	f040 80a4 	bne.w	8000478 <__udivmoddi4+0x234>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	0c03      	lsrs	r3, r0, #16
 8000334:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000338:	b280      	uxth	r0, r0
 800033a:	b2bc      	uxth	r4, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000342:	fb0e 221c 	mls	r2, lr, ip, r2
 8000346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034a:	fb04 f20c 	mul.w	r2, r4, ip
 800034e:	429a      	cmp	r2, r3
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x11e>
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x11c>
 800035a:	429a      	cmp	r2, r3
 800035c:	f200 80e0 	bhi.w	8000520 <__udivmoddi4+0x2dc>
 8000360:	46c4      	mov	ip, r8
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	fbb3 f2fe 	udiv	r2, r3, lr
 8000368:	fb0e 3312 	mls	r3, lr, r2, r3
 800036c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000370:	fb02 f404 	mul.w	r4, r2, r4
 8000374:	429c      	cmp	r4, r3
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x144>
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x142>
 8000380:	429c      	cmp	r4, r3
 8000382:	f200 80ca 	bhi.w	800051a <__udivmoddi4+0x2d6>
 8000386:	4602      	mov	r2, r0
 8000388:	1b1b      	subs	r3, r3, r4
 800038a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x98>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa0e f401 	lsl.w	r4, lr, r1
 80003a0:	fa20 f306 	lsr.w	r3, r0, r6
 80003a4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	fa1f fc87 	uxth.w	ip, r7
 80003b6:	fbbe f0f9 	udiv	r0, lr, r9
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x1a0>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003d6:	f080 809c 	bcs.w	8000512 <__udivmoddi4+0x2ce>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f240 8099 	bls.w	8000512 <__udivmoddi4+0x2ce>
 80003e0:	3802      	subs	r0, #2
 80003e2:	443c      	add	r4, r7
 80003e4:	eba4 040e 	sub.w	r4, r4, lr
 80003e8:	fa1f fe83 	uxth.w	lr, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fc:	45a4      	cmp	ip, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1ce>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000406:	f080 8082 	bcs.w	800050e <__udivmoddi4+0x2ca>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d97f      	bls.n	800050e <__udivmoddi4+0x2ca>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000416:	eba4 040c 	sub.w	r4, r4, ip
 800041a:	fba0 ec02 	umull	lr, ip, r0, r2
 800041e:	4564      	cmp	r4, ip
 8000420:	4673      	mov	r3, lr
 8000422:	46e1      	mov	r9, ip
 8000424:	d362      	bcc.n	80004ec <__udivmoddi4+0x2a8>
 8000426:	d05f      	beq.n	80004e8 <__udivmoddi4+0x2a4>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x1fe>
 800042a:	ebb8 0203 	subs.w	r2, r8, r3
 800042e:	eb64 0409 	sbc.w	r4, r4, r9
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	fa22 f301 	lsr.w	r3, r2, r1
 800043a:	431e      	orrs	r6, r3
 800043c:	40cc      	lsrs	r4, r1
 800043e:	e9c5 6400 	strd	r6, r4, [r5]
 8000442:	2100      	movs	r1, #0
 8000444:	e74f      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000446:	fbb1 fcf2 	udiv	ip, r1, r2
 800044a:	0c01      	lsrs	r1, r0, #16
 800044c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000450:	b280      	uxth	r0, r0
 8000452:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000456:	463b      	mov	r3, r7
 8000458:	4638      	mov	r0, r7
 800045a:	463c      	mov	r4, r7
 800045c:	46b8      	mov	r8, r7
 800045e:	46be      	mov	lr, r7
 8000460:	2620      	movs	r6, #32
 8000462:	fbb1 f1f7 	udiv	r1, r1, r7
 8000466:	eba2 0208 	sub.w	r2, r2, r8
 800046a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046e:	e766      	b.n	800033e <__udivmoddi4+0xfa>
 8000470:	4601      	mov	r1, r0
 8000472:	e718      	b.n	80002a6 <__udivmoddi4+0x62>
 8000474:	4610      	mov	r0, r2
 8000476:	e72c      	b.n	80002d2 <__udivmoddi4+0x8e>
 8000478:	f1c6 0220 	rsb	r2, r6, #32
 800047c:	fa2e f302 	lsr.w	r3, lr, r2
 8000480:	40b7      	lsls	r7, r6
 8000482:	40b1      	lsls	r1, r6
 8000484:	fa20 f202 	lsr.w	r2, r0, r2
 8000488:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800048c:	430a      	orrs	r2, r1
 800048e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000492:	b2bc      	uxth	r4, r7
 8000494:	fb0e 3318 	mls	r3, lr, r8, r3
 8000498:	0c11      	lsrs	r1, r2, #16
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb08 f904 	mul.w	r9, r8, r4
 80004a2:	40b0      	lsls	r0, r6
 80004a4:	4589      	cmp	r9, r1
 80004a6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004aa:	b280      	uxth	r0, r0
 80004ac:	d93e      	bls.n	800052c <__udivmoddi4+0x2e8>
 80004ae:	1879      	adds	r1, r7, r1
 80004b0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004b4:	d201      	bcs.n	80004ba <__udivmoddi4+0x276>
 80004b6:	4589      	cmp	r9, r1
 80004b8:	d81f      	bhi.n	80004fa <__udivmoddi4+0x2b6>
 80004ba:	eba1 0109 	sub.w	r1, r1, r9
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fb09 f804 	mul.w	r8, r9, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	b292      	uxth	r2, r2
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	4542      	cmp	r2, r8
 80004d2:	d229      	bcs.n	8000528 <__udivmoddi4+0x2e4>
 80004d4:	18ba      	adds	r2, r7, r2
 80004d6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004da:	d2c4      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004dc:	4542      	cmp	r2, r8
 80004de:	d2c2      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004e0:	f1a9 0102 	sub.w	r1, r9, #2
 80004e4:	443a      	add	r2, r7
 80004e6:	e7be      	b.n	8000466 <__udivmoddi4+0x222>
 80004e8:	45f0      	cmp	r8, lr
 80004ea:	d29d      	bcs.n	8000428 <__udivmoddi4+0x1e4>
 80004ec:	ebbe 0302 	subs.w	r3, lr, r2
 80004f0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f4:	3801      	subs	r0, #1
 80004f6:	46e1      	mov	r9, ip
 80004f8:	e796      	b.n	8000428 <__udivmoddi4+0x1e4>
 80004fa:	eba7 0909 	sub.w	r9, r7, r9
 80004fe:	4449      	add	r1, r9
 8000500:	f1a8 0c02 	sub.w	ip, r8, #2
 8000504:	fbb1 f9fe 	udiv	r9, r1, lr
 8000508:	fb09 f804 	mul.w	r8, r9, r4
 800050c:	e7db      	b.n	80004c6 <__udivmoddi4+0x282>
 800050e:	4673      	mov	r3, lr
 8000510:	e77f      	b.n	8000412 <__udivmoddi4+0x1ce>
 8000512:	4650      	mov	r0, sl
 8000514:	e766      	b.n	80003e4 <__udivmoddi4+0x1a0>
 8000516:	4608      	mov	r0, r1
 8000518:	e6fd      	b.n	8000316 <__udivmoddi4+0xd2>
 800051a:	443b      	add	r3, r7
 800051c:	3a02      	subs	r2, #2
 800051e:	e733      	b.n	8000388 <__udivmoddi4+0x144>
 8000520:	f1ac 0c02 	sub.w	ip, ip, #2
 8000524:	443b      	add	r3, r7
 8000526:	e71c      	b.n	8000362 <__udivmoddi4+0x11e>
 8000528:	4649      	mov	r1, r9
 800052a:	e79c      	b.n	8000466 <__udivmoddi4+0x222>
 800052c:	eba1 0109 	sub.w	r1, r1, r9
 8000530:	46c4      	mov	ip, r8
 8000532:	fbb1 f9fe 	udiv	r9, r1, lr
 8000536:	fb09 f804 	mul.w	r8, r9, r4
 800053a:	e7c4      	b.n	80004c6 <__udivmoddi4+0x282>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <echo_serial_port>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void echo_serial_port(uint8_t itf, uint8_t buf[], uint32_t count) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
 800054c:	73fb      	strb	r3, [r7, #15]
  uint8_t const case_diff = 'a' - 'A';
 800054e:	2320      	movs	r3, #32
 8000550:	74fb      	strb	r3, [r7, #19]

  for (uint32_t i = 0; i < count; i++) {
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
 8000556:	e043      	b.n	80005e0 <echo_serial_port+0xa0>
    if (itf == 0) {
 8000558:	7bfb      	ldrb	r3, [r7, #15]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d117      	bne.n	800058e <echo_serial_port+0x4e>
      // echo back 1st port as lower case
      if (isupper(buf[i])) buf[i] += case_diff;
 800055e:	68ba      	ldr	r2, [r7, #8]
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	4413      	add	r3, r2
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	3301      	adds	r3, #1
 8000568:	4a23      	ldr	r2, [pc, #140]	@ (80005f8 <echo_serial_port+0xb8>)
 800056a:	4413      	add	r3, r2
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	f003 0303 	and.w	r3, r3, #3
 8000572:	2b01      	cmp	r3, #1
 8000574:	d122      	bne.n	80005bc <echo_serial_port+0x7c>
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	4413      	add	r3, r2
 800057c:	7819      	ldrb	r1, [r3, #0]
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	4413      	add	r3, r2
 8000584:	7cfa      	ldrb	r2, [r7, #19]
 8000586:	440a      	add	r2, r1
 8000588:	b2d2      	uxtb	r2, r2
 800058a:	701a      	strb	r2, [r3, #0]
 800058c:	e016      	b.n	80005bc <echo_serial_port+0x7c>
    } else {
      // echo back 2nd port as upper case
      if (islower(buf[i])) buf[i] -= case_diff;
 800058e:	68ba      	ldr	r2, [r7, #8]
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	4413      	add	r3, r2
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	3301      	adds	r3, #1
 8000598:	4a17      	ldr	r2, [pc, #92]	@ (80005f8 <echo_serial_port+0xb8>)
 800059a:	4413      	add	r3, r2
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	f003 0303 	and.w	r3, r3, #3
 80005a2:	2b02      	cmp	r3, #2
 80005a4:	d10a      	bne.n	80005bc <echo_serial_port+0x7c>
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	4413      	add	r3, r2
 80005ac:	7819      	ldrb	r1, [r3, #0]
 80005ae:	68ba      	ldr	r2, [r7, #8]
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	4413      	add	r3, r2
 80005b4:	7cfa      	ldrb	r2, [r7, #19]
 80005b6:	1a8a      	subs	r2, r1, r2
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	701a      	strb	r2, [r3, #0]
    }

    tud_cdc_n_write_char(itf, buf[i]);
 80005bc:	68ba      	ldr	r2, [r7, #8]
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	4413      	add	r3, r2
 80005c2:	781a      	ldrb	r2, [r3, #0]
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	74bb      	strb	r3, [r7, #18]
 80005c8:	4613      	mov	r3, r2
 80005ca:	747b      	strb	r3, [r7, #17]
// Write bytes to TX FIFO, data may remain in the FIFO for a while
uint32_t tud_cdc_n_write(uint8_t itf, void const* buffer, uint32_t bufsize);

// Write a byte
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_n_write_char(uint8_t itf, char ch) {
  return tud_cdc_n_write(itf, &ch, 1);
 80005cc:	f107 0111 	add.w	r1, r7, #17
 80005d0:	7cbb      	ldrb	r3, [r7, #18]
 80005d2:	2201      	movs	r2, #1
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 ffeb 	bl	80035b0 <tud_cdc_n_write>
  for (uint32_t i = 0; i < count; i++) {
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3301      	adds	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d3b7      	bcc.n	8000558 <echo_serial_port+0x18>
  }
  tud_cdc_n_write_flush(itf);
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 f814 	bl	8003618 <tud_cdc_n_write_flush>
}
 80005f0:	bf00      	nop
 80005f2:	3718      	adds	r7, #24
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	08008864 	.word	0x08008864

080005fc <tud_mount_cb>:

// Invoked when device is mounted
void tud_mount_cb(void) {
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  //Do nothing for now
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <tud_umount_cb>:

// Invoked when device is unmounted
void tud_umount_cb(void) {
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0
  //Do nothing for now
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <cdc_task>:

static void cdc_task(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b092      	sub	sp, #72	@ 0x48
 800061c:	af00      	add	r7, sp, #0
  uint8_t itf;

  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 800061e:	2300      	movs	r3, #0
 8000620:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000624:	e020      	b.n	8000668 <cdc_task+0x50>
    // connected() check for DTR bit
    // Most but not all terminal client set this when making connection
    // if ( tud_cdc_n_connected(itf) )
    {
      if (tud_cdc_n_available(itf)) {
 8000626:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800062a:	4618      	mov	r0, r3
 800062c:	f002 ff7e 	bl	800352c <tud_cdc_n_available>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d013      	beq.n	800065e <cdc_task+0x46>
        uint8_t buf[64];

        uint32_t count = tud_cdc_n_read(itf, buf, sizeof(buf));
 8000636:	4639      	mov	r1, r7
 8000638:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800063c:	2240      	movs	r2, #64	@ 0x40
 800063e:	4618      	mov	r0, r3
 8000640:	f002 ff8a 	bl	8003558 <tud_cdc_n_read>
 8000644:	6438      	str	r0, [r7, #64]	@ 0x40

        // echo back to both serial ports
        echo_serial_port(0, buf, count);
 8000646:	463b      	mov	r3, r7
 8000648:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800064a:	4619      	mov	r1, r3
 800064c:	2000      	movs	r0, #0
 800064e:	f7ff ff77 	bl	8000540 <echo_serial_port>
        echo_serial_port(1, buf, count);
 8000652:	463b      	mov	r3, r7
 8000654:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000656:	4619      	mov	r1, r3
 8000658:	2001      	movs	r0, #1
 800065a:	f7ff ff71 	bl	8000540 <echo_serial_port>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 800065e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000662:	3301      	adds	r3, #1
 8000664:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000668:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800066c:	2b01      	cmp	r3, #1
 800066e:	d9da      	bls.n	8000626 <cdc_task+0xe>
      }
    }
  }
}
 8000670:	bf00      	nop
 8000672:	bf00      	nop
 8000674:	3748      	adds	r7, #72	@ 0x48
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	b082      	sub	sp, #8
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000680:	f000 fb84 	bl	8000d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000684:	f000 f81c 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000688:	f000 f8de 	bl	8000848 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800068c:	f000 f884 	bl	8000798 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000690:	f000 f8ac 	bl	80007ec <MX_USB_OTG_FS_PCD_Init>
 8000694:	2300      	movs	r3, #0
 8000696:	71fb      	strb	r3, [r7, #7]
// Init device stack on roothub port
#if TUSB_VERSION_NUMBER > 2000  // 0.20.0
TU_ATTR_DEPRECATED("Please use tusb_init(rhport, rh_init) instead")
#endif
TU_ATTR_ALWAYS_INLINE static inline bool tud_init (uint8_t rhport) {
  const tusb_rhport_init_t rh_init = {
 8000698:	2301      	movs	r3, #1
 800069a:	713b      	strb	r3, [r7, #4]
 800069c:	2300      	movs	r3, #0
 800069e:	717b      	strb	r3, [r7, #5]
    .role = TUSB_ROLE_DEVICE,
    .speed = TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL
  };
  return tud_rhport_init(rhport, &rh_init);
 80006a0:	1d3a      	adds	r2, r7, #4
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	4611      	mov	r1, r2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f004 fa32 	bl	8004b10 <tud_rhport_init>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 80006ac:	2100      	movs	r1, #0
 80006ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006b2:	f004 fb61 	bl	8004d78 <tud_task_ext>
}
 80006b6:	bf00      	nop
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    tud_task();
    cdc_task();
 80006b8:	f7ff ffae 	bl	8000618 <cdc_task>
    tud_task();
 80006bc:	bf00      	nop
 80006be:	e7f5      	b.n	80006ac <main+0x32>

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	@ 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	2234      	movs	r2, #52	@ 0x34
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f007 ffd7 	bl	8008682 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b29      	ldr	r3, [pc, #164]	@ (8000790 <SystemClock_Config+0xd0>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	4a28      	ldr	r2, [pc, #160]	@ (8000790 <SystemClock_Config+0xd0>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f4:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <SystemClock_Config+0xd0>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000700:	2300      	movs	r3, #0
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	4b23      	ldr	r3, [pc, #140]	@ (8000794 <SystemClock_Config+0xd4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800070c:	4a21      	ldr	r2, [pc, #132]	@ (8000794 <SystemClock_Config+0xd4>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1f      	ldr	r3, [pc, #124]	@ (8000794 <SystemClock_Config+0xd4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000720:	2301      	movs	r3, #1
 8000722:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000724:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000728:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072a:	2302      	movs	r3, #2
 800072c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000732:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000734:	2304      	movs	r3, #4
 8000736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000738:	2348      	movs	r3, #72	@ 0x48
 800073a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073c:	2302      	movs	r3, #2
 800073e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000740:	2303      	movs	r3, #3
 8000742:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000744:	2302      	movs	r3, #2
 8000746:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	4618      	mov	r0, r3
 800074e:	f001 fe21 	bl	8002394 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000758:	f000 f8e4 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2302      	movs	r3, #2
 8000762:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000768:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	2102      	movs	r1, #2
 8000778:	4618      	mov	r0, r3
 800077a:	f000 ff97 	bl	80016ac <HAL_RCC_ClockConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000784:	f000 f8ce 	bl	8000924 <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	3750      	adds	r7, #80	@ 0x50
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800079c:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	@ (80007e8 <MX_USART2_UART_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a2:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007d0:	f002 f87e 	bl	80028d0 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007da:	f000 f8a3 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000004c 	.word	0x2000004c
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007f0:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007f8:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fa:	2206      	movs	r2, #6
 80007fc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000800:	2202      	movs	r2, #2
 8000802:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080c:	2202      	movs	r2, #2
 800080e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000822:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000830:	f000 fe01 	bl	8001436 <HAL_PCD_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800083a:	f000 f873 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000094 	.word	0x20000094

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	@ 0x28
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b2d      	ldr	r3, [pc, #180]	@ (8000918 <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a2c      	ldr	r2, [pc, #176]	@ (8000918 <MX_GPIO_Init+0xd0>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b2a      	ldr	r3, [pc, #168]	@ (8000918 <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b26      	ldr	r3, [pc, #152]	@ (8000918 <MX_GPIO_Init+0xd0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a25      	ldr	r2, [pc, #148]	@ (8000918 <MX_GPIO_Init+0xd0>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b23      	ldr	r3, [pc, #140]	@ (8000918 <MX_GPIO_Init+0xd0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <MX_GPIO_Init+0xd0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a1e      	ldr	r2, [pc, #120]	@ (8000918 <MX_GPIO_Init+0xd0>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <MX_GPIO_Init+0xd0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b18      	ldr	r3, [pc, #96]	@ (8000918 <MX_GPIO_Init+0xd0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a17      	ldr	r2, [pc, #92]	@ (8000918 <MX_GPIO_Init+0xd0>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <MX_GPIO_Init+0xd0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2120      	movs	r1, #32
 80008d2:	4812      	ldr	r0, [pc, #72]	@ (800091c <MX_GPIO_Init+0xd4>)
 80008d4:	f000 fd96 	bl	8001404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008de:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	480c      	ldr	r0, [pc, #48]	@ (8000920 <MX_GPIO_Init+0xd8>)
 80008f0:	f000 fbf4 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008f4:	2320      	movs	r3, #32
 80008f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	4804      	ldr	r0, [pc, #16]	@ (800091c <MX_GPIO_Init+0xd4>)
 800090c:	f000 fbe6 	bl	80010dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000910:	bf00      	nop
 8000912:	3728      	adds	r7, #40	@ 0x28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40023800 	.word	0x40023800
 800091c:	40020000 	.word	0x40020000
 8000920:	40020800 	.word	0x40020800

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <Error_Handler+0x8>

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b10      	ldr	r3, [pc, #64]	@ (800097c <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093e:	4a0f      	ldr	r2, [pc, #60]	@ (800097c <HAL_MspInit+0x4c>)
 8000940:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000944:	6453      	str	r3, [r2, #68]	@ 0x44
 8000946:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <HAL_MspInit+0x4c>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b09      	ldr	r3, [pc, #36]	@ (800097c <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095a:	4a08      	ldr	r2, [pc, #32]	@ (800097c <HAL_MspInit+0x4c>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	@ 0x40
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <HAL_MspInit+0x4c>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800096e:	2007      	movs	r0, #7
 8000970:	f000 fb72 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800

08000980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a19      	ldr	r2, [pc, #100]	@ (8000a04 <HAL_UART_MspInit+0x84>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d12b      	bne.n	80009fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b18      	ldr	r3, [pc, #96]	@ (8000a08 <HAL_UART_MspInit+0x88>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009aa:	4a17      	ldr	r2, [pc, #92]	@ (8000a08 <HAL_UART_MspInit+0x88>)
 80009ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b2:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <HAL_UART_MspInit+0x88>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <HAL_UART_MspInit+0x88>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a10      	ldr	r2, [pc, #64]	@ (8000a08 <HAL_UART_MspInit+0x88>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <HAL_UART_MspInit+0x88>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009da:	230c      	movs	r3, #12
 80009dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ea:	2307      	movs	r3, #7
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <HAL_UART_MspInit+0x8c>)
 80009f6:	f000 fb71 	bl	80010dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009fa:	bf00      	nop
 80009fc:	3728      	adds	r7, #40	@ 0x28
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40004400 	.word	0x40004400
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020000 	.word	0x40020000

08000a10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b0a0      	sub	sp, #128	@ 0x80
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	225c      	movs	r2, #92	@ 0x5c
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f007 fe26 	bl	8008682 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a3e:	d149      	bne.n	8000ad4 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a44:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000a46:	2300      	movs	r3, #0
 8000a48:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 ff46 	bl	80018e0 <HAL_RCCEx_PeriphCLKConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000a5a:	f7ff ff63 	bl	8000924 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <HAL_PCD_MspInit+0xcc>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	4a1d      	ldr	r2, [pc, #116]	@ (8000adc <HAL_PCD_MspInit+0xcc>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <HAL_PCD_MspInit+0xcc>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a7a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a8c:	230a      	movs	r3, #10
 8000a8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a94:	4619      	mov	r1, r3
 8000a96:	4812      	ldr	r0, [pc, #72]	@ (8000ae0 <HAL_PCD_MspInit+0xd0>)
 8000a98:	f000 fb20 	bl	80010dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <HAL_PCD_MspInit+0xcc>)
 8000a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aa0:	4a0e      	ldr	r2, [pc, #56]	@ (8000adc <HAL_PCD_MspInit+0xcc>)
 8000aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aa6:	6353      	str	r3, [r2, #52]	@ 0x34
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <HAL_PCD_MspInit+0xcc>)
 8000aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <HAL_PCD_MspInit+0xcc>)
 8000ab2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ab8:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <HAL_PCD_MspInit+0xcc>)
 8000aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000abc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2043      	movs	r0, #67	@ 0x43
 8000aca:	f000 fad0 	bl	800106e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000ace:	2043      	movs	r0, #67	@ 0x43
 8000ad0:	f000 fae9 	bl	80010a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ad4:	bf00      	nop
 8000ad6:	3780      	adds	r7, #128	@ 0x80
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020000 	.word	0x40020000

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <NMI_Handler+0x4>

08000aec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <MemManage_Handler+0x4>

08000afc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3a:	f000 f979 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
  tud_int_handler(0);
 8000b46:	2000      	movs	r0, #0
 8000b48:	f007 f868 	bl	8007c1c <dcd_int_handler>
  return;
 8000b4c:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <SystemInit+0x20>)
 8000b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b5a:	4a05      	ldr	r2, [pc, #20]	@ (8000b70 <SystemInit+0x20>)
 8000b5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <board_usb_get_serial>:
  board_led_write(false);
}

// Get USB Serial number string from unique ID if available. Return number of character.
// Input is string descriptor from index 1 (index 0 is type + len)
static inline size_t board_usb_get_serial(uint16_t desc_str1[], size_t max_chars) {
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b091      	sub	sp, #68	@ 0x44
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  uint8_t uid[16] TU_ATTR_ALIGNED(4);
  size_t uid_len;

  // TODO work with make, but not working with esp32s3 cmake
  if ( board_get_unique_id ) {
 8000b7e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c38 <board_usb_get_serial+0xc4>)
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d007      	beq.n	8000b94 <board_usb_get_serial+0x20>
    uid_len = board_get_unique_id(uid, sizeof(uid));
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	2110      	movs	r1, #16
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f3af 8000 	nop.w
 8000b90:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000b92:	e00b      	b.n	8000bac <board_usb_get_serial+0x38>
  }else {
    // fixed serial string is 01234567889ABCDEF
    uint32_t* uid32 = (uint32_t*) (uintptr_t) uid;
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	633b      	str	r3, [r7, #48]	@ 0x30
    uid32[0] = 0x67452301;
 8000b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b9c:	4a27      	ldr	r2, [pc, #156]	@ (8000c3c <board_usb_get_serial+0xc8>)
 8000b9e:	601a      	str	r2, [r3, #0]
    uid32[1] = 0xEFCDAB89;
 8000ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ba2:	3304      	adds	r3, #4
 8000ba4:	4a26      	ldr	r2, [pc, #152]	@ (8000c40 <board_usb_get_serial+0xcc>)
 8000ba6:	601a      	str	r2, [r3, #0]
    uid_len = 8;
 8000ba8:	2308      	movs	r3, #8
 8000baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  if ( uid_len > max_chars / 2 ) uid_len = max_chars / 2;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	085b      	lsrs	r3, r3, #1
 8000bb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d902      	bls.n	8000bbc <board_usb_get_serial+0x48>
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	085b      	lsrs	r3, r3, #1
 8000bba:	63fb      	str	r3, [r7, #60]	@ 0x3c

  for ( size_t i = 0; i < uid_len; i++ ) {
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000bc0:	e030      	b.n	8000c24 <board_usb_get_serial+0xb0>
    for ( size_t j = 0; j < 2; j++ ) {
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8000bc6:	e027      	b.n	8000c18 <board_usb_get_serial+0xa4>
      const char nibble_to_hex[16] = {
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c44 <board_usb_get_serial+0xd0>)
 8000bca:	f107 040c 	add.w	r4, r7, #12
 8000bce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          '0', '1', '2', '3', '4', '5', '6', '7',
          '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
      };
      uint8_t const nibble = (uid[i] >> (j * 4)) & 0xf;
 8000bd4:	f107 021c 	add.w	r2, r7, #28
 8000bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000bda:	4413      	add	r3, r2
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	fa42 f303 	asr.w	r3, r2, r3
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      desc_str1[i * 2 + (1 - j)] = nibble_to_hex[nibble]; // UTF-16-LE
 8000bf2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bf6:	3340      	adds	r3, #64	@ 0x40
 8000bf8:	443b      	add	r3, r7
 8000bfa:	f813 1c34 	ldrb.w	r1, [r3, #-52]
 8000bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c00:	005a      	lsls	r2, r3, #1
 8000c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	3301      	adds	r3, #1
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	460a      	mov	r2, r1
 8000c10:	801a      	strh	r2, [r3, #0]
    for ( size_t j = 0; j < 2; j++ ) {
 8000c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c14:	3301      	adds	r3, #1
 8000c16:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d9d4      	bls.n	8000bc8 <board_usb_get_serial+0x54>
  for ( size_t i = 0; i < uid_len; i++ ) {
 8000c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c20:	3301      	adds	r3, #1
 8000c22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d3ca      	bcc.n	8000bc2 <board_usb_get_serial+0x4e>
    }
  }

  return 2 * uid_len;
 8000c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c2e:	005b      	lsls	r3, r3, #1
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3744      	adds	r7, #68	@ 0x44
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd90      	pop	{r4, r7, pc}
 8000c38:	00000000 	.word	0x00000000
 8000c3c:	67452301 	.word	0x67452301
 8000c40:	efcdab89 	.word	0xefcdab89
 8000c44:	08008710 	.word	0x08008710

08000c48 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 8000c4c:	4b02      	ldr	r3, [pc, #8]	@ (8000c58 <tud_descriptor_device_cb+0x10>)
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	0800875c 	.word	0x0800875c

08000c5c <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]

#if TUD_OPT_HIGH_SPEED
  // Although we are highspeed, host may be fullspeed.
  return (tud_speed_get() == TUSB_SPEED_HIGH) ?  desc_hs_configuration : desc_fs_configuration;
#else
  return desc_fs_configuration;
 8000c66:	4b03      	ldr	r3, [pc, #12]	@ (8000c74 <tud_descriptor_configuration_cb+0x18>)
#endif
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	08008770 	.word	0x08008770

08000c78 <tud_descriptor_string_cb>:

static uint16_t _desc_str[32 + 1];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	460a      	mov	r2, r1
 8000c82:	71fb      	strb	r3, [r7, #7]
 8000c84:	4613      	mov	r3, r2
 8000c86:	80bb      	strh	r3, [r7, #4]
  (void) langid;
  size_t chr_count;

  switch ( index ) {
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d002      	beq.n	8000c94 <tud_descriptor_string_cb+0x1c>
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	d009      	beq.n	8000ca6 <tud_descriptor_string_cb+0x2e>
 8000c92:	e00f      	b.n	8000cb4 <tud_descriptor_string_cb+0x3c>
    case STRID_LANGID:
      memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8000c94:	4b25      	ldr	r3, [pc, #148]	@ (8000d2c <tud_descriptor_string_cb+0xb4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	4b24      	ldr	r3, [pc, #144]	@ (8000d30 <tud_descriptor_string_cb+0xb8>)
 8000c9e:	805a      	strh	r2, [r3, #2]
      chr_count = 1;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	617b      	str	r3, [r7, #20]
      break;
 8000ca4:	e031      	b.n	8000d0a <tud_descriptor_string_cb+0x92>

    case STRID_SERIAL:
      chr_count = board_usb_get_serial(_desc_str + 1, 32);
 8000ca6:	4b23      	ldr	r3, [pc, #140]	@ (8000d34 <tud_descriptor_string_cb+0xbc>)
 8000ca8:	2120      	movs	r1, #32
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ff62 	bl	8000b74 <board_usb_get_serial>
 8000cb0:	6178      	str	r0, [r7, #20]
      break;
 8000cb2:	e02a      	b.n	8000d0a <tud_descriptor_string_cb+0x92>

    default:
      // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
      // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

      if ( !(index < sizeof(string_desc_arr) / sizeof(string_desc_arr[0])) ) return NULL;
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	d901      	bls.n	8000cbe <tud_descriptor_string_cb+0x46>
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e031      	b.n	8000d22 <tud_descriptor_string_cb+0xaa>

      const char *str = string_desc_arr[index];
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	4a1a      	ldr	r2, [pc, #104]	@ (8000d2c <tud_descriptor_string_cb+0xb4>)
 8000cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc6:	60fb      	str	r3, [r7, #12]

      // Cap at max char
      chr_count = strlen(str);
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f7ff fa9b 	bl	8000204 <strlen>
 8000cce:	6178      	str	r0, [r7, #20]
      size_t const max_count = sizeof(_desc_str) / sizeof(_desc_str[0]) - 1; // -1 for string type
 8000cd0:	2320      	movs	r3, #32
 8000cd2:	60bb      	str	r3, [r7, #8]
      if ( chr_count > max_count ) chr_count = max_count;
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d901      	bls.n	8000ce0 <tud_descriptor_string_cb+0x68>
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	617b      	str	r3, [r7, #20]

      // Convert ASCII string into UTF-16
      for ( size_t i = 0; i < chr_count; i++ ) {
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	e00c      	b.n	8000d00 <tud_descriptor_string_cb+0x88>
        _desc_str[1 + i] = str[i];
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	4413      	add	r3, r2
 8000cec:	781a      	ldrb	r2, [r3, #0]
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4a0e      	ldr	r2, [pc, #56]	@ (8000d30 <tud_descriptor_string_cb+0xb8>)
 8000cf6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for ( size_t i = 0; i < chr_count; i++ ) {
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d3ee      	bcc.n	8000ce6 <tud_descriptor_string_cb+0x6e>
      }
      break;
 8000d08:	bf00      	nop
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8) | (2 * chr_count + 2));
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	3301      	adds	r3, #1
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	4b04      	ldr	r3, [pc, #16]	@ (8000d30 <tud_descriptor_string_cb+0xb8>)
 8000d1e:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8000d20:	4b03      	ldr	r3, [pc, #12]	@ (8000d30 <tud_descriptor_string_cb+0xb8>)
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000004 	.word	0x20000004
 8000d30:	20000578 	.word	0x20000578
 8000d34:	2000057a 	.word	0x2000057a

08000d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d3c:	f7ff ff08 	bl	8000b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d40:	480c      	ldr	r0, [pc, #48]	@ (8000d74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d42:	490d      	ldr	r1, [pc, #52]	@ (8000d78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d44:	4a0d      	ldr	r2, [pc, #52]	@ (8000d7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d58:	4c0a      	ldr	r4, [pc, #40]	@ (8000d84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d66:	f007 fc95 	bl	8008694 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f7ff fc86 	bl	800067a <main>
  bx  lr    
 8000d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000d7c:	08008978 	.word	0x08008978
  ldr r2, =_sbss
 8000d80:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000d84:	20000a94 	.word	0x20000a94

08000d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC_IRQHandler>
	...

08000d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d90:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0d      	ldr	r2, [pc, #52]	@ (8000dcc <HAL_Init+0x40>)
 8000d96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <HAL_Init+0x40>)
 8000da2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a07      	ldr	r2, [pc, #28]	@ (8000dcc <HAL_Init+0x40>)
 8000dae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f94f 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 f808 	bl	8000dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f7ff fdb6 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023c00 	.word	0x40023c00

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd8:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <HAL_InitTick+0x54>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <HAL_InitTick+0x58>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f967 	bl	80010c2 <HAL_SYSTICK_Config>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00e      	b.n	8000e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d80a      	bhi.n	8000e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e0c:	f000 f92f 	bl	800106e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e10:	4a06      	ldr	r2, [pc, #24]	@ (8000e2c <HAL_InitTick+0x5c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e000      	b.n	8000e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000000 	.word	0x20000000
 8000e28:	2000001c 	.word	0x2000001c
 8000e2c:	20000018 	.word	0x20000018

08000e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <HAL_IncTick+0x20>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <HAL_IncTick+0x24>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a04      	ldr	r2, [pc, #16]	@ (8000e54 <HAL_IncTick+0x24>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	2000001c 	.word	0x2000001c
 8000e54:	200005bc 	.word	0x200005bc

08000e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	@ (8000e6c <HAL_GetTick+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	200005bc 	.word	0x200005bc

08000e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e78:	f7ff ffee 	bl	8000e58 <HAL_GetTick>
 8000e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e88:	d005      	beq.n	8000e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <HAL_Delay+0x44>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4413      	add	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e96:	bf00      	nop
 8000e98:	f7ff ffde 	bl	8000e58 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d8f7      	bhi.n	8000e98 <HAL_Delay+0x28>
  {
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2000001c 	.word	0x2000001c

08000eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eea:	4a04      	ldr	r2, [pc, #16]	@ (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	60d3      	str	r3, [r2, #12]
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f04:	4b04      	ldr	r3, [pc, #16]	@ (8000f18 <__NVIC_GetPriorityGrouping+0x18>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	f003 0307 	and.w	r3, r3, #7
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	db0b      	blt.n	8000f46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f003 021f 	and.w	r2, r3, #31
 8000f34:	4907      	ldr	r1, [pc, #28]	@ (8000f54 <__NVIC_EnableIRQ+0x38>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e100 	.word	0xe000e100

08000f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	db0a      	blt.n	8000f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	490c      	ldr	r1, [pc, #48]	@ (8000fa4 <__NVIC_SetPriority+0x4c>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f80:	e00a      	b.n	8000f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4908      	ldr	r1, [pc, #32]	@ (8000fa8 <__NVIC_SetPriority+0x50>)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	3b04      	subs	r3, #4
 8000f90:	0112      	lsls	r2, r2, #4
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	440b      	add	r3, r1
 8000f96:	761a      	strb	r2, [r3, #24]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000e100 	.word	0xe000e100
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	@ 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f1c3 0307 	rsb	r3, r3, #7
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	bf28      	it	cs
 8000fca:	2304      	movcs	r3, #4
 8000fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d902      	bls.n	8000fdc <NVIC_EncodePriority+0x30>
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3b03      	subs	r3, #3
 8000fda:	e000      	b.n	8000fde <NVIC_EncodePriority+0x32>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43da      	mvns	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	401a      	ands	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	43d9      	mvns	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	4313      	orrs	r3, r2
         );
}
 8001006:	4618      	mov	r0, r3
 8001008:	3724      	adds	r7, #36	@ 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001024:	d301      	bcc.n	800102a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001026:	2301      	movs	r3, #1
 8001028:	e00f      	b.n	800104a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102a:	4a0a      	ldr	r2, [pc, #40]	@ (8001054 <SysTick_Config+0x40>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001032:	210f      	movs	r1, #15
 8001034:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001038:	f7ff ff8e 	bl	8000f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800103c:	4b05      	ldr	r3, [pc, #20]	@ (8001054 <SysTick_Config+0x40>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001042:	4b04      	ldr	r3, [pc, #16]	@ (8001054 <SysTick_Config+0x40>)
 8001044:	2207      	movs	r2, #7
 8001046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	e000e010 	.word	0xe000e010

08001058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ff29 	bl	8000eb8 <__NVIC_SetPriorityGrouping>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001080:	f7ff ff3e 	bl	8000f00 <__NVIC_GetPriorityGrouping>
 8001084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	6978      	ldr	r0, [r7, #20]
 800108c:	f7ff ff8e 	bl	8000fac <NVIC_EncodePriority>
 8001090:	4602      	mov	r2, r0
 8001092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001096:	4611      	mov	r1, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff5d 	bl	8000f58 <__NVIC_SetPriority>
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff31 	bl	8000f1c <__NVIC_EnableIRQ>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ffa2 	bl	8001014 <SysTick_Config>
 80010d0:	4603      	mov	r3, r0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	@ 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
 80010f6:	e165      	b.n	80013c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010f8:	2201      	movs	r2, #1
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	429a      	cmp	r2, r3
 8001112:	f040 8154 	bne.w	80013be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	2b01      	cmp	r3, #1
 8001120:	d005      	beq.n	800112e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112a:	2b02      	cmp	r3, #2
 800112c:	d130      	bne.n	8001190 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	2203      	movs	r2, #3
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001164:	2201      	movs	r2, #1
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	091b      	lsrs	r3, r3, #4
 800117a:	f003 0201 	and.w	r2, r3, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b03      	cmp	r3, #3
 800119a:	d017      	beq.n	80011cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d123      	bne.n	8001220 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	08da      	lsrs	r2, r3, #3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3208      	adds	r2, #8
 80011e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	220f      	movs	r2, #15
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	691a      	ldr	r2, [r3, #16]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	08da      	lsrs	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3208      	adds	r2, #8
 800121a:	69b9      	ldr	r1, [r7, #24]
 800121c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	2203      	movs	r2, #3
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0203 	and.w	r2, r3, #3
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 80ae 	beq.w	80013be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b5d      	ldr	r3, [pc, #372]	@ (80013dc <HAL_GPIO_Init+0x300>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126a:	4a5c      	ldr	r2, [pc, #368]	@ (80013dc <HAL_GPIO_Init+0x300>)
 800126c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001270:	6453      	str	r3, [r2, #68]	@ 0x44
 8001272:	4b5a      	ldr	r3, [pc, #360]	@ (80013dc <HAL_GPIO_Init+0x300>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001276:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800127e:	4a58      	ldr	r2, [pc, #352]	@ (80013e0 <HAL_GPIO_Init+0x304>)
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	3302      	adds	r3, #2
 8001286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	220f      	movs	r2, #15
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4f      	ldr	r2, [pc, #316]	@ (80013e4 <HAL_GPIO_Init+0x308>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d025      	beq.n	80012f6 <HAL_GPIO_Init+0x21a>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4e      	ldr	r2, [pc, #312]	@ (80013e8 <HAL_GPIO_Init+0x30c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d01f      	beq.n	80012f2 <HAL_GPIO_Init+0x216>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4d      	ldr	r2, [pc, #308]	@ (80013ec <HAL_GPIO_Init+0x310>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d019      	beq.n	80012ee <HAL_GPIO_Init+0x212>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4c      	ldr	r2, [pc, #304]	@ (80013f0 <HAL_GPIO_Init+0x314>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d013      	beq.n	80012ea <HAL_GPIO_Init+0x20e>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4b      	ldr	r2, [pc, #300]	@ (80013f4 <HAL_GPIO_Init+0x318>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d00d      	beq.n	80012e6 <HAL_GPIO_Init+0x20a>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4a      	ldr	r2, [pc, #296]	@ (80013f8 <HAL_GPIO_Init+0x31c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d007      	beq.n	80012e2 <HAL_GPIO_Init+0x206>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a49      	ldr	r2, [pc, #292]	@ (80013fc <HAL_GPIO_Init+0x320>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d101      	bne.n	80012de <HAL_GPIO_Init+0x202>
 80012da:	2306      	movs	r3, #6
 80012dc:	e00c      	b.n	80012f8 <HAL_GPIO_Init+0x21c>
 80012de:	2307      	movs	r3, #7
 80012e0:	e00a      	b.n	80012f8 <HAL_GPIO_Init+0x21c>
 80012e2:	2305      	movs	r3, #5
 80012e4:	e008      	b.n	80012f8 <HAL_GPIO_Init+0x21c>
 80012e6:	2304      	movs	r3, #4
 80012e8:	e006      	b.n	80012f8 <HAL_GPIO_Init+0x21c>
 80012ea:	2303      	movs	r3, #3
 80012ec:	e004      	b.n	80012f8 <HAL_GPIO_Init+0x21c>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e002      	b.n	80012f8 <HAL_GPIO_Init+0x21c>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <HAL_GPIO_Init+0x21c>
 80012f6:	2300      	movs	r3, #0
 80012f8:	69fa      	ldr	r2, [r7, #28]
 80012fa:	f002 0203 	and.w	r2, r2, #3
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	4093      	lsls	r3, r2
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001308:	4935      	ldr	r1, [pc, #212]	@ (80013e0 <HAL_GPIO_Init+0x304>)
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001316:	4b3a      	ldr	r3, [pc, #232]	@ (8001400 <HAL_GPIO_Init+0x324>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133a:	4a31      	ldr	r2, [pc, #196]	@ (8001400 <HAL_GPIO_Init+0x324>)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001340:	4b2f      	ldr	r3, [pc, #188]	@ (8001400 <HAL_GPIO_Init+0x324>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001364:	4a26      	ldr	r2, [pc, #152]	@ (8001400 <HAL_GPIO_Init+0x324>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800136a:	4b25      	ldr	r3, [pc, #148]	@ (8001400 <HAL_GPIO_Init+0x324>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800138e:	4a1c      	ldr	r2, [pc, #112]	@ (8001400 <HAL_GPIO_Init+0x324>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001394:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <HAL_GPIO_Init+0x324>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013b8:	4a11      	ldr	r2, [pc, #68]	@ (8001400 <HAL_GPIO_Init+0x324>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3301      	adds	r3, #1
 80013c2:	61fb      	str	r3, [r7, #28]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	2b0f      	cmp	r3, #15
 80013c8:	f67f ae96 	bls.w	80010f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3724      	adds	r7, #36	@ 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40013800 	.word	0x40013800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40021400 	.word	0x40021400
 80013fc:	40021800 	.word	0x40021800
 8001400:	40013c00 	.word	0x40013c00

08001404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
 8001410:	4613      	mov	r3, r2
 8001412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001414:	787b      	ldrb	r3, [r7, #1]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800141a:	887a      	ldrh	r2, [r7, #2]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001420:	e003      	b.n	800142a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001422:	887b      	ldrh	r3, [r7, #2]
 8001424:	041a      	lsls	r2, r3, #16
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	619a      	str	r2, [r3, #24]
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af02      	add	r7, sp, #8
 800143c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e108      	b.n	800165a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d106      	bne.n	8001468 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff fad4 	bl	8000a10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2203      	movs	r2, #3
 800146c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001476:	d102      	bne.n	800147e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f001 fd4c 	bl	8002f20 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6818      	ldr	r0, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	7c1a      	ldrb	r2, [r3, #16]
 8001490:	f88d 2000 	strb.w	r2, [sp]
 8001494:	3304      	adds	r3, #4
 8001496:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001498:	f001 fcde 	bl	8002e58 <USB_CoreInit>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2202      	movs	r2, #2
 80014a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e0d5      	b.n	800165a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f001 fd44 	bl	8002f42 <USB_SetCurrentMode>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2202      	movs	r2, #2
 80014c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e0c6      	b.n	800165a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014cc:	2300      	movs	r3, #0
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	e04a      	b.n	8001568 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	4413      	add	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	440b      	add	r3, r1
 80014e0:	3315      	adds	r3, #21
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014e6:	7bfa      	ldrb	r2, [r7, #15]
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	440b      	add	r3, r1
 80014f4:	3314      	adds	r3, #20
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014fa:	7bfa      	ldrb	r2, [r7, #15]
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
 80014fe:	b298      	uxth	r0, r3
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4413      	add	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	440b      	add	r3, r1
 800150c:	332e      	adds	r3, #46	@ 0x2e
 800150e:	4602      	mov	r2, r0
 8001510:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001512:	7bfa      	ldrb	r2, [r7, #15]
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	3318      	adds	r3, #24
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001526:	7bfa      	ldrb	r2, [r7, #15]
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	4413      	add	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	440b      	add	r3, r1
 8001534:	331c      	adds	r3, #28
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	4413      	add	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	3320      	adds	r3, #32
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	4413      	add	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	3324      	adds	r3, #36	@ 0x24
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	3301      	adds	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	791b      	ldrb	r3, [r3, #4]
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	429a      	cmp	r2, r3
 8001570:	d3af      	bcc.n	80014d2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001572:	2300      	movs	r3, #0
 8001574:	73fb      	strb	r3, [r7, #15]
 8001576:	e044      	b.n	8001602 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4413      	add	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800158e:	7bfa      	ldrb	r2, [r7, #15]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4413      	add	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015ba:	7bfa      	ldrb	r2, [r7, #15]
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4413      	add	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	440b      	add	r3, r1
 80015c8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015d0:	7bfa      	ldrb	r2, [r7, #15]
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015e6:	7bfa      	ldrb	r2, [r7, #15]
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	440b      	add	r3, r1
 80015f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	3301      	adds	r3, #1
 8001600:	73fb      	strb	r3, [r7, #15]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	791b      	ldrb	r3, [r3, #4]
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	429a      	cmp	r2, r3
 800160a:	d3b5      	bcc.n	8001578 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6818      	ldr	r0, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	7c1a      	ldrb	r2, [r3, #16]
 8001614:	f88d 2000 	strb.w	r2, [sp]
 8001618:	3304      	adds	r3, #4
 800161a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800161c:	f001 fcde 	bl	8002fdc <USB_DevInit>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d005      	beq.n	8001632 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2202      	movs	r2, #2
 800162a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e013      	b.n	800165a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7b1b      	ldrb	r3, [r3, #12]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d102      	bne.n	800164e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f80a 	bl	8001662 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f001 fe99 	bl	800338a <USB_DevDisconnect>

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001662:	b480      	push	{r7}
 8001664:	b085      	sub	sp, #20
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001694:	f043 0303 	orr.w	r3, r3, #3
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e0cc      	b.n	800185a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016c0:	4b68      	ldr	r3, [pc, #416]	@ (8001864 <HAL_RCC_ClockConfig+0x1b8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d90c      	bls.n	80016e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ce:	4b65      	ldr	r3, [pc, #404]	@ (8001864 <HAL_RCC_ClockConfig+0x1b8>)
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d6:	4b63      	ldr	r3, [pc, #396]	@ (8001864 <HAL_RCC_ClockConfig+0x1b8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d001      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0b8      	b.n	800185a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d020      	beq.n	8001736 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001700:	4b59      	ldr	r3, [pc, #356]	@ (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	4a58      	ldr	r2, [pc, #352]	@ (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800170a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001718:	4b53      	ldr	r3, [pc, #332]	@ (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	4a52      	ldr	r2, [pc, #328]	@ (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001722:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001724:	4b50      	ldr	r3, [pc, #320]	@ (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	494d      	ldr	r1, [pc, #308]	@ (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d044      	beq.n	80017cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d107      	bne.n	800175a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174a:	4b47      	ldr	r3, [pc, #284]	@ (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d119      	bne.n	800178a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e07f      	b.n	800185a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d003      	beq.n	800176a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001766:	2b03      	cmp	r3, #3
 8001768:	d107      	bne.n	800177a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176a:	4b3f      	ldr	r3, [pc, #252]	@ (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d109      	bne.n	800178a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e06f      	b.n	800185a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177a:	4b3b      	ldr	r3, [pc, #236]	@ (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e067      	b.n	800185a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800178a:	4b37      	ldr	r3, [pc, #220]	@ (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f023 0203 	bic.w	r2, r3, #3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	4934      	ldr	r1, [pc, #208]	@ (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	4313      	orrs	r3, r2
 800179a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800179c:	f7ff fb5c 	bl	8000e58 <HAL_GetTick>
 80017a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a2:	e00a      	b.n	80017ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a4:	f7ff fb58 	bl	8000e58 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e04f      	b.n	800185a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 020c 	and.w	r2, r3, #12
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d1eb      	bne.n	80017a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017cc:	4b25      	ldr	r3, [pc, #148]	@ (8001864 <HAL_RCC_ClockConfig+0x1b8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 030f 	and.w	r3, r3, #15
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d20c      	bcs.n	80017f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017da:	4b22      	ldr	r3, [pc, #136]	@ (8001864 <HAL_RCC_ClockConfig+0x1b8>)
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e2:	4b20      	ldr	r3, [pc, #128]	@ (8001864 <HAL_RCC_ClockConfig+0x1b8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e032      	b.n	800185a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d008      	beq.n	8001812 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001800:	4b19      	ldr	r3, [pc, #100]	@ (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	4916      	ldr	r1, [pc, #88]	@ (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	4313      	orrs	r3, r2
 8001810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d009      	beq.n	8001832 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800181e:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	490e      	ldr	r1, [pc, #56]	@ (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	4313      	orrs	r3, r2
 8001830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001832:	f000 fb7f 	bl	8001f34 <HAL_RCC_GetSysClockFreq>
 8001836:	4602      	mov	r2, r0
 8001838:	4b0b      	ldr	r3, [pc, #44]	@ (8001868 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	490a      	ldr	r1, [pc, #40]	@ (800186c <HAL_RCC_ClockConfig+0x1c0>)
 8001844:	5ccb      	ldrb	r3, [r1, r3]
 8001846:	fa22 f303 	lsr.w	r3, r2, r3
 800184a:	4a09      	ldr	r2, [pc, #36]	@ (8001870 <HAL_RCC_ClockConfig+0x1c4>)
 800184c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800184e:	4b09      	ldr	r3, [pc, #36]	@ (8001874 <HAL_RCC_ClockConfig+0x1c8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fabc 	bl	8000dd0 <HAL_InitTick>

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023c00 	.word	0x40023c00
 8001868:	40023800 	.word	0x40023800
 800186c:	08008744 	.word	0x08008744
 8001870:	20000000 	.word	0x20000000
 8001874:	20000018 	.word	0x20000018

08001878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800187c:	4b03      	ldr	r3, [pc, #12]	@ (800188c <HAL_RCC_GetHCLKFreq+0x14>)
 800187e:	681b      	ldr	r3, [r3, #0]
}
 8001880:	4618      	mov	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000000 	.word	0x20000000

08001890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001894:	f7ff fff0 	bl	8001878 <HAL_RCC_GetHCLKFreq>
 8001898:	4602      	mov	r2, r0
 800189a:	4b05      	ldr	r3, [pc, #20]	@ (80018b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	0a9b      	lsrs	r3, r3, #10
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	4903      	ldr	r1, [pc, #12]	@ (80018b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018a6:	5ccb      	ldrb	r3, [r1, r3]
 80018a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40023800 	.word	0x40023800
 80018b4:	08008754 	.word	0x08008754

080018b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018bc:	f7ff ffdc 	bl	8001878 <HAL_RCC_GetHCLKFreq>
 80018c0:	4602      	mov	r2, r0
 80018c2:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	0b5b      	lsrs	r3, r3, #13
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	4903      	ldr	r1, [pc, #12]	@ (80018dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018ce:	5ccb      	ldrb	r3, [r1, r3]
 80018d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40023800 	.word	0x40023800
 80018dc:	08008754 	.word	0x08008754

080018e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08c      	sub	sp, #48	@ 0x30
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d010      	beq.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001918:	4b6f      	ldr	r3, [pc, #444]	@ (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800191a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800191e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001926:	496c      	ldr	r1, [pc, #432]	@ (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001928:	4313      	orrs	r3, r2
 800192a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001936:	2301      	movs	r3, #1
 8001938:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d010      	beq.n	8001968 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001946:	4b64      	ldr	r3, [pc, #400]	@ (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001948:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800194c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001954:	4960      	ldr	r1, [pc, #384]	@ (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001956:	4313      	orrs	r3, r2
 8001958:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001964:	2301      	movs	r3, #1
 8001966:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d017      	beq.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001974:	4b58      	ldr	r3, [pc, #352]	@ (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001976:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800197a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	4955      	ldr	r1, [pc, #340]	@ (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001984:	4313      	orrs	r3, r2
 8001986:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001992:	d101      	bne.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001994:	2301      	movs	r3, #1
 8001996:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80019a0:	2301      	movs	r3, #1
 80019a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d017      	beq.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80019b0:	4b49      	ldr	r3, [pc, #292]	@ (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019be:	4946      	ldr	r1, [pc, #280]	@ (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019ce:	d101      	bne.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80019d0:	2301      	movs	r3, #1
 80019d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80019dc:	2301      	movs	r3, #1
 80019de:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0320 	and.w	r3, r3, #32
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 808a 	beq.w	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	4b39      	ldr	r3, [pc, #228]	@ (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	4a38      	ldr	r2, [pc, #224]	@ (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019fe:	4b36      	ldr	r3, [pc, #216]	@ (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001a0a:	4b34      	ldr	r3, [pc, #208]	@ (8001adc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a33      	ldr	r2, [pc, #204]	@ (8001adc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a14:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a16:	f7ff fa1f 	bl	8000e58 <HAL_GetTick>
 8001a1a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a1e:	f7ff fa1b 	bl	8000e58 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e278      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001a30:	4b2a      	ldr	r3, [pc, #168]	@ (8001adc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a3c:	4b26      	ldr	r3, [pc, #152]	@ (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a44:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d02f      	beq.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a54:	6a3a      	ldr	r2, [r7, #32]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d028      	beq.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a62:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a64:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001a70:	4a19      	ldr	r2, [pc, #100]	@ (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001a76:	4b18      	ldr	r3, [pc, #96]	@ (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d114      	bne.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001a82:	f7ff f9e9 	bl	8000e58 <HAL_GetTick>
 8001a86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a88:	e00a      	b.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8a:	f7ff f9e5 	bl	8000e58 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e240      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0ee      	beq.n	8001a8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ab4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001ab8:	d114      	bne.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001aba:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001aca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ace:	4902      	ldr	r1, [pc, #8]	@ (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	608b      	str	r3, [r1, #8]
 8001ad4:	e00c      	b.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40007000 	.word	0x40007000
 8001ae0:	42470e40 	.word	0x42470e40
 8001ae4:	4b4a      	ldr	r3, [pc, #296]	@ (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	4a49      	ldr	r2, [pc, #292]	@ (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001aea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001aee:	6093      	str	r3, [r2, #8]
 8001af0:	4b47      	ldr	r3, [pc, #284]	@ (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001af2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001afc:	4944      	ldr	r1, [pc, #272]	@ (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d004      	beq.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8001b14:	4b3f      	ldr	r3, [pc, #252]	@ (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001b16:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00a      	beq.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001b24:	4b3a      	ldr	r3, [pc, #232]	@ (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b2a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b32:	4937      	ldr	r1, [pc, #220]	@ (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00a      	beq.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b46:	4b32      	ldr	r3, [pc, #200]	@ (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b4c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b54:	492e      	ldr	r1, [pc, #184]	@ (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d011      	beq.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001b68:	4b29      	ldr	r3, [pc, #164]	@ (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b6e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b76:	4926      	ldr	r1, [pc, #152]	@ (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001b86:	d101      	bne.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00a      	beq.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001b98:	4b1d      	ldr	r3, [pc, #116]	@ (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b9e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba6:	491a      	ldr	r1, [pc, #104]	@ (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d011      	beq.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001bba:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bc0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bc8:	4911      	ldr	r1, [pc, #68]	@ (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bd8:	d101      	bne.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001bec:	f040 80ff 	bne.w	8001dee <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001bf0:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bf6:	f7ff f92f 	bl	8000e58 <HAL_GetTick>
 8001bfa:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001bfc:	e00e      	b.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001bfe:	f7ff f92b 	bl	8000e58 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d907      	bls.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e188      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001c10:	40023800 	.word	0x40023800
 8001c14:	424711e0 	.word	0x424711e0
 8001c18:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c1c:	4b7e      	ldr	r3, [pc, #504]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1ea      	bne.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d009      	beq.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d028      	beq.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d124      	bne.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001c50:	4b71      	ldr	r3, [pc, #452]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c56:	0c1b      	lsrs	r3, r3, #16
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001c62:	4b6d      	ldr	r3, [pc, #436]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c68:	0e1b      	lsrs	r3, r3, #24
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	019b      	lsls	r3, r3, #6
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	085b      	lsrs	r3, r3, #1
 8001c80:	3b01      	subs	r3, #1
 8001c82:	041b      	lsls	r3, r3, #16
 8001c84:	431a      	orrs	r2, r3
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	061b      	lsls	r3, r3, #24
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	071b      	lsls	r3, r3, #28
 8001c92:	4961      	ldr	r1, [pc, #388]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d004      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001cae:	d00a      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d035      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cc4:	d130      	bne.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001cc6:	4b54      	ldr	r3, [pc, #336]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ccc:	0c1b      	lsrs	r3, r3, #16
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001cd8:	4b4f      	ldr	r3, [pc, #316]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001cde:	0f1b      	lsrs	r3, r3, #28
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	019b      	lsls	r3, r3, #6
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	085b      	lsrs	r3, r3, #1
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	041b      	lsls	r3, r3, #16
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	061b      	lsls	r3, r3, #24
 8001d02:	431a      	orrs	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	071b      	lsls	r3, r3, #28
 8001d08:	4943      	ldr	r1, [pc, #268]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001d10:	4b41      	ldr	r3, [pc, #260]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d16:	f023 021f 	bic.w	r2, r3, #31
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	493d      	ldr	r1, [pc, #244]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d029      	beq.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d3c:	d124      	bne.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d3e:	4b36      	ldr	r3, [pc, #216]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d44:	0c1b      	lsrs	r3, r3, #16
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d50:	4b31      	ldr	r3, [pc, #196]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d56:	0f1b      	lsrs	r3, r3, #28
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	019b      	lsls	r3, r3, #6
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	085b      	lsrs	r3, r3, #1
 8001d70:	3b01      	subs	r3, #1
 8001d72:	041b      	lsls	r3, r3, #16
 8001d74:	431a      	orrs	r2, r3
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	061b      	lsls	r3, r3, #24
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	071b      	lsls	r3, r3, #28
 8001d80:	4925      	ldr	r1, [pc, #148]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d016      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	019b      	lsls	r3, r3, #6
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	085b      	lsrs	r3, r3, #1
 8001da6:	3b01      	subs	r3, #1
 8001da8:	041b      	lsls	r3, r3, #16
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	061b      	lsls	r3, r3, #24
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	071b      	lsls	r3, r3, #28
 8001dba:	4917      	ldr	r1, [pc, #92]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001dc2:	4b16      	ldr	r3, [pc, #88]	@ (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dc8:	f7ff f846 	bl	8000e58 <HAL_GetTick>
 8001dcc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001dd0:	f7ff f842 	bl	8000e58 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e09f      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001de2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8001dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	f040 8095 	bne.w	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001df6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dfc:	f7ff f82c 	bl	8000e58 <HAL_GetTick>
 8001e00:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e02:	e00f      	b.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001e04:	f7ff f828 	bl	8000e58 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d908      	bls.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e085      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	42470068 	.word	0x42470068
 8001e20:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e24:	4b41      	ldr	r3, [pc, #260]	@ (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e30:	d0e8      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d009      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d02b      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d127      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001e5a:	4b34      	ldr	r3, [pc, #208]	@ (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e60:	0c1b      	lsrs	r3, r3, #16
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	3301      	adds	r3, #1
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699a      	ldr	r2, [r3, #24]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	019b      	lsls	r3, r3, #6
 8001e76:	431a      	orrs	r2, r3
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	085b      	lsrs	r3, r3, #1
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	041b      	lsls	r3, r3, #16
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e86:	061b      	lsls	r3, r3, #24
 8001e88:	4928      	ldr	r1, [pc, #160]	@ (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001e90:	4b26      	ldr	r3, [pc, #152]	@ (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e96:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	021b      	lsls	r3, r3, #8
 8001ea2:	4922      	ldr	r1, [pc, #136]	@ (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d01d      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001ebe:	d118      	bne.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ec6:	0e1b      	lsrs	r3, r3, #24
 8001ec8:	f003 030f 	and.w	r3, r3, #15
 8001ecc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699a      	ldr	r2, [r3, #24]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	019b      	lsls	r3, r3, #6
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	085b      	lsrs	r3, r3, #1
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	041b      	lsls	r3, r3, #16
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	061b      	lsls	r3, r3, #24
 8001eea:	4910      	ldr	r1, [pc, #64]	@ (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ef8:	f7fe ffae 	bl	8000e58 <HAL_GetTick>
 8001efc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001f00:	f7fe ffaa 	bl	8000e58 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e007      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f12:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f1e:	d1ef      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3730      	adds	r7, #48	@ 0x30
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	42470070 	.word	0x42470070

08001f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f38:	b0ae      	sub	sp, #184	@ 0xb8
 8001f3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f5a:	4bcb      	ldr	r3, [pc, #812]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	2b0c      	cmp	r3, #12
 8001f64:	f200 8206 	bhi.w	8002374 <HAL_RCC_GetSysClockFreq+0x440>
 8001f68:	a201      	add	r2, pc, #4	@ (adr r2, 8001f70 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6e:	bf00      	nop
 8001f70:	08001fa5 	.word	0x08001fa5
 8001f74:	08002375 	.word	0x08002375
 8001f78:	08002375 	.word	0x08002375
 8001f7c:	08002375 	.word	0x08002375
 8001f80:	08001fad 	.word	0x08001fad
 8001f84:	08002375 	.word	0x08002375
 8001f88:	08002375 	.word	0x08002375
 8001f8c:	08002375 	.word	0x08002375
 8001f90:	08001fb5 	.word	0x08001fb5
 8001f94:	08002375 	.word	0x08002375
 8001f98:	08002375 	.word	0x08002375
 8001f9c:	08002375 	.word	0x08002375
 8001fa0:	080021a5 	.word	0x080021a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fa4:	4bb9      	ldr	r3, [pc, #740]	@ (800228c <HAL_RCC_GetSysClockFreq+0x358>)
 8001fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001faa:	e1e7      	b.n	800237c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fac:	4bb8      	ldr	r3, [pc, #736]	@ (8002290 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001fae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fb2:	e1e3      	b.n	800237c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fb4:	4bb4      	ldr	r3, [pc, #720]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fc0:	4bb1      	ldr	r3, [pc, #708]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d071      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fcc:	4bae      	ldr	r3, [pc, #696]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	099b      	lsrs	r3, r3, #6
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001fd8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001fdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fe4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001fee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001ff2:	4622      	mov	r2, r4
 8001ff4:	462b      	mov	r3, r5
 8001ff6:	f04f 0000 	mov.w	r0, #0
 8001ffa:	f04f 0100 	mov.w	r1, #0
 8001ffe:	0159      	lsls	r1, r3, #5
 8002000:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002004:	0150      	lsls	r0, r2, #5
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4621      	mov	r1, r4
 800200c:	1a51      	subs	r1, r2, r1
 800200e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002010:	4629      	mov	r1, r5
 8002012:	eb63 0301 	sbc.w	r3, r3, r1
 8002016:	647b      	str	r3, [r7, #68]	@ 0x44
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002024:	4649      	mov	r1, r9
 8002026:	018b      	lsls	r3, r1, #6
 8002028:	4641      	mov	r1, r8
 800202a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800202e:	4641      	mov	r1, r8
 8002030:	018a      	lsls	r2, r1, #6
 8002032:	4641      	mov	r1, r8
 8002034:	1a51      	subs	r1, r2, r1
 8002036:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002038:	4649      	mov	r1, r9
 800203a:	eb63 0301 	sbc.w	r3, r3, r1
 800203e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	f04f 0300 	mov.w	r3, #0
 8002048:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800204c:	4649      	mov	r1, r9
 800204e:	00cb      	lsls	r3, r1, #3
 8002050:	4641      	mov	r1, r8
 8002052:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002056:	4641      	mov	r1, r8
 8002058:	00ca      	lsls	r2, r1, #3
 800205a:	4610      	mov	r0, r2
 800205c:	4619      	mov	r1, r3
 800205e:	4603      	mov	r3, r0
 8002060:	4622      	mov	r2, r4
 8002062:	189b      	adds	r3, r3, r2
 8002064:	633b      	str	r3, [r7, #48]	@ 0x30
 8002066:	462b      	mov	r3, r5
 8002068:	460a      	mov	r2, r1
 800206a:	eb42 0303 	adc.w	r3, r2, r3
 800206e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800207c:	4629      	mov	r1, r5
 800207e:	024b      	lsls	r3, r1, #9
 8002080:	4621      	mov	r1, r4
 8002082:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002086:	4621      	mov	r1, r4
 8002088:	024a      	lsls	r2, r1, #9
 800208a:	4610      	mov	r0, r2
 800208c:	4619      	mov	r1, r3
 800208e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002092:	2200      	movs	r2, #0
 8002094:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002098:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800209c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80020a0:	f7fe f8b8 	bl	8000214 <__aeabi_uldivmod>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4613      	mov	r3, r2
 80020aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020ae:	e067      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020b0:	4b75      	ldr	r3, [pc, #468]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x354>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	099b      	lsrs	r3, r3, #6
 80020b6:	2200      	movs	r2, #0
 80020b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80020bc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80020c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80020ca:	2300      	movs	r3, #0
 80020cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80020ce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80020d2:	4622      	mov	r2, r4
 80020d4:	462b      	mov	r3, r5
 80020d6:	f04f 0000 	mov.w	r0, #0
 80020da:	f04f 0100 	mov.w	r1, #0
 80020de:	0159      	lsls	r1, r3, #5
 80020e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020e4:	0150      	lsls	r0, r2, #5
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4621      	mov	r1, r4
 80020ec:	1a51      	subs	r1, r2, r1
 80020ee:	62b9      	str	r1, [r7, #40]	@ 0x28
 80020f0:	4629      	mov	r1, r5
 80020f2:	eb63 0301 	sbc.w	r3, r3, r1
 80020f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	f04f 0300 	mov.w	r3, #0
 8002100:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002104:	4649      	mov	r1, r9
 8002106:	018b      	lsls	r3, r1, #6
 8002108:	4641      	mov	r1, r8
 800210a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800210e:	4641      	mov	r1, r8
 8002110:	018a      	lsls	r2, r1, #6
 8002112:	4641      	mov	r1, r8
 8002114:	ebb2 0a01 	subs.w	sl, r2, r1
 8002118:	4649      	mov	r1, r9
 800211a:	eb63 0b01 	sbc.w	fp, r3, r1
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	f04f 0300 	mov.w	r3, #0
 8002126:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800212a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800212e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002132:	4692      	mov	sl, r2
 8002134:	469b      	mov	fp, r3
 8002136:	4623      	mov	r3, r4
 8002138:	eb1a 0303 	adds.w	r3, sl, r3
 800213c:	623b      	str	r3, [r7, #32]
 800213e:	462b      	mov	r3, r5
 8002140:	eb4b 0303 	adc.w	r3, fp, r3
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002152:	4629      	mov	r1, r5
 8002154:	028b      	lsls	r3, r1, #10
 8002156:	4621      	mov	r1, r4
 8002158:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800215c:	4621      	mov	r1, r4
 800215e:	028a      	lsls	r2, r1, #10
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002168:	2200      	movs	r2, #0
 800216a:	673b      	str	r3, [r7, #112]	@ 0x70
 800216c:	677a      	str	r2, [r7, #116]	@ 0x74
 800216e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002172:	f7fe f84f 	bl	8000214 <__aeabi_uldivmod>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4613      	mov	r3, r2
 800217c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002180:	4b41      	ldr	r3, [pc, #260]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x354>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	0c1b      	lsrs	r3, r3, #16
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	3301      	adds	r3, #1
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002192:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002196:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800219a:	fbb2 f3f3 	udiv	r3, r2, r3
 800219e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021a2:	e0eb      	b.n	800237c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021a4:	4b38      	ldr	r3, [pc, #224]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x354>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021b0:	4b35      	ldr	r3, [pc, #212]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x354>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d06b      	beq.n	8002294 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021bc:	4b32      	ldr	r3, [pc, #200]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x354>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	099b      	lsrs	r3, r3, #6
 80021c2:	2200      	movs	r2, #0
 80021c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80021c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80021d0:	2300      	movs	r3, #0
 80021d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80021d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80021d8:	4622      	mov	r2, r4
 80021da:	462b      	mov	r3, r5
 80021dc:	f04f 0000 	mov.w	r0, #0
 80021e0:	f04f 0100 	mov.w	r1, #0
 80021e4:	0159      	lsls	r1, r3, #5
 80021e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021ea:	0150      	lsls	r0, r2, #5
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4621      	mov	r1, r4
 80021f2:	1a51      	subs	r1, r2, r1
 80021f4:	61b9      	str	r1, [r7, #24]
 80021f6:	4629      	mov	r1, r5
 80021f8:	eb63 0301 	sbc.w	r3, r3, r1
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800220a:	4659      	mov	r1, fp
 800220c:	018b      	lsls	r3, r1, #6
 800220e:	4651      	mov	r1, sl
 8002210:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002214:	4651      	mov	r1, sl
 8002216:	018a      	lsls	r2, r1, #6
 8002218:	4651      	mov	r1, sl
 800221a:	ebb2 0801 	subs.w	r8, r2, r1
 800221e:	4659      	mov	r1, fp
 8002220:	eb63 0901 	sbc.w	r9, r3, r1
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002230:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002234:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002238:	4690      	mov	r8, r2
 800223a:	4699      	mov	r9, r3
 800223c:	4623      	mov	r3, r4
 800223e:	eb18 0303 	adds.w	r3, r8, r3
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	462b      	mov	r3, r5
 8002246:	eb49 0303 	adc.w	r3, r9, r3
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002258:	4629      	mov	r1, r5
 800225a:	024b      	lsls	r3, r1, #9
 800225c:	4621      	mov	r1, r4
 800225e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002262:	4621      	mov	r1, r4
 8002264:	024a      	lsls	r2, r1, #9
 8002266:	4610      	mov	r0, r2
 8002268:	4619      	mov	r1, r3
 800226a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800226e:	2200      	movs	r2, #0
 8002270:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002272:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002274:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002278:	f7fd ffcc 	bl	8000214 <__aeabi_uldivmod>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4613      	mov	r3, r2
 8002282:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002286:	e065      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x420>
 8002288:	40023800 	.word	0x40023800
 800228c:	00f42400 	.word	0x00f42400
 8002290:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002294:	4b3d      	ldr	r3, [pc, #244]	@ (800238c <HAL_RCC_GetSysClockFreq+0x458>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	099b      	lsrs	r3, r3, #6
 800229a:	2200      	movs	r2, #0
 800229c:	4618      	mov	r0, r3
 800229e:	4611      	mov	r1, r2
 80022a0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80022a6:	2300      	movs	r3, #0
 80022a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80022aa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80022ae:	4642      	mov	r2, r8
 80022b0:	464b      	mov	r3, r9
 80022b2:	f04f 0000 	mov.w	r0, #0
 80022b6:	f04f 0100 	mov.w	r1, #0
 80022ba:	0159      	lsls	r1, r3, #5
 80022bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022c0:	0150      	lsls	r0, r2, #5
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4641      	mov	r1, r8
 80022c8:	1a51      	subs	r1, r2, r1
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	4649      	mov	r1, r9
 80022ce:	eb63 0301 	sbc.w	r3, r3, r1
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80022e0:	4659      	mov	r1, fp
 80022e2:	018b      	lsls	r3, r1, #6
 80022e4:	4651      	mov	r1, sl
 80022e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022ea:	4651      	mov	r1, sl
 80022ec:	018a      	lsls	r2, r1, #6
 80022ee:	4651      	mov	r1, sl
 80022f0:	1a54      	subs	r4, r2, r1
 80022f2:	4659      	mov	r1, fp
 80022f4:	eb63 0501 	sbc.w	r5, r3, r1
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	00eb      	lsls	r3, r5, #3
 8002302:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002306:	00e2      	lsls	r2, r4, #3
 8002308:	4614      	mov	r4, r2
 800230a:	461d      	mov	r5, r3
 800230c:	4643      	mov	r3, r8
 800230e:	18e3      	adds	r3, r4, r3
 8002310:	603b      	str	r3, [r7, #0]
 8002312:	464b      	mov	r3, r9
 8002314:	eb45 0303 	adc.w	r3, r5, r3
 8002318:	607b      	str	r3, [r7, #4]
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002326:	4629      	mov	r1, r5
 8002328:	028b      	lsls	r3, r1, #10
 800232a:	4621      	mov	r1, r4
 800232c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002330:	4621      	mov	r1, r4
 8002332:	028a      	lsls	r2, r1, #10
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800233c:	2200      	movs	r2, #0
 800233e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002340:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002342:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002346:	f7fd ff65 	bl	8000214 <__aeabi_uldivmod>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4613      	mov	r3, r2
 8002350:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002354:	4b0d      	ldr	r3, [pc, #52]	@ (800238c <HAL_RCC_GetSysClockFreq+0x458>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	0f1b      	lsrs	r3, r3, #28
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002362:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002366:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002372:	e003      	b.n	800237c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002374:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002376:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800237a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800237c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002380:	4618      	mov	r0, r3
 8002382:	37b8      	adds	r7, #184	@ 0xb8
 8002384:	46bd      	mov	sp, r7
 8002386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800
 8002390:	00f42400 	.word	0x00f42400

08002394 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e28d      	b.n	80028c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 8083 	beq.w	80024ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023b4:	4b94      	ldr	r3, [pc, #592]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 030c 	and.w	r3, r3, #12
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d019      	beq.n	80023f4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80023c0:	4b91      	ldr	r3, [pc, #580]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 030c 	and.w	r3, r3, #12
        || \
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d106      	bne.n	80023da <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80023cc:	4b8e      	ldr	r3, [pc, #568]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023d8:	d00c      	beq.n	80023f4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023da:	4b8b      	ldr	r3, [pc, #556]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80023e2:	2b0c      	cmp	r3, #12
 80023e4:	d112      	bne.n	800240c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023e6:	4b88      	ldr	r3, [pc, #544]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023f2:	d10b      	bne.n	800240c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f4:	4b84      	ldr	r3, [pc, #528]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d05b      	beq.n	80024b8 <HAL_RCC_OscConfig+0x124>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d157      	bne.n	80024b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e25a      	b.n	80028c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002414:	d106      	bne.n	8002424 <HAL_RCC_OscConfig+0x90>
 8002416:	4b7c      	ldr	r3, [pc, #496]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a7b      	ldr	r2, [pc, #492]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 800241c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e01d      	b.n	8002460 <HAL_RCC_OscConfig+0xcc>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0xb4>
 800242e:	4b76      	ldr	r3, [pc, #472]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a75      	ldr	r2, [pc, #468]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 8002434:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	4b73      	ldr	r3, [pc, #460]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a72      	ldr	r2, [pc, #456]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e00b      	b.n	8002460 <HAL_RCC_OscConfig+0xcc>
 8002448:	4b6f      	ldr	r3, [pc, #444]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a6e      	ldr	r2, [pc, #440]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 800244e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	4b6c      	ldr	r3, [pc, #432]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a6b      	ldr	r2, [pc, #428]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 800245a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800245e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d013      	beq.n	8002490 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7fe fcf6 	bl	8000e58 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002470:	f7fe fcf2 	bl	8000e58 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b64      	cmp	r3, #100	@ 0x64
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e21f      	b.n	80028c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	4b61      	ldr	r3, [pc, #388]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0xdc>
 800248e:	e014      	b.n	80024ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7fe fce2 	bl	8000e58 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002498:	f7fe fcde 	bl	8000e58 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	@ 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e20b      	b.n	80028c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024aa:	4b57      	ldr	r3, [pc, #348]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0x104>
 80024b6:	e000      	b.n	80024ba <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d06f      	beq.n	80025a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024c6:	4b50      	ldr	r3, [pc, #320]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d017      	beq.n	8002502 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80024d2:	4b4d      	ldr	r3, [pc, #308]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
        || \
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d105      	bne.n	80024ea <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80024de:	4b4a      	ldr	r3, [pc, #296]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00b      	beq.n	8002502 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ea:	4b47      	ldr	r3, [pc, #284]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80024f2:	2b0c      	cmp	r3, #12
 80024f4:	d11c      	bne.n	8002530 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024f6:	4b44      	ldr	r3, [pc, #272]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d116      	bne.n	8002530 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002502:	4b41      	ldr	r3, [pc, #260]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_RCC_OscConfig+0x186>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d001      	beq.n	800251a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e1d3      	b.n	80028c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251a:	4b3b      	ldr	r3, [pc, #236]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4937      	ldr	r1, [pc, #220]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252e:	e03a      	b.n	80025a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d020      	beq.n	800257a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002538:	4b34      	ldr	r3, [pc, #208]	@ (800260c <HAL_RCC_OscConfig+0x278>)
 800253a:	2201      	movs	r2, #1
 800253c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253e:	f7fe fc8b 	bl	8000e58 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002546:	f7fe fc87 	bl	8000e58 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e1b4      	b.n	80028c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002558:	4b2b      	ldr	r3, [pc, #172]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002564:	4b28      	ldr	r3, [pc, #160]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4925      	ldr	r1, [pc, #148]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 8002574:	4313      	orrs	r3, r2
 8002576:	600b      	str	r3, [r1, #0]
 8002578:	e015      	b.n	80025a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800257a:	4b24      	ldr	r3, [pc, #144]	@ (800260c <HAL_RCC_OscConfig+0x278>)
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002580:	f7fe fc6a 	bl	8000e58 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002588:	f7fe fc66 	bl	8000e58 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e193      	b.n	80028c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259a:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d036      	beq.n	8002620 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d016      	beq.n	80025e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ba:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <HAL_RCC_OscConfig+0x27c>)
 80025bc:	2201      	movs	r2, #1
 80025be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c0:	f7fe fc4a 	bl	8000e58 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c8:	f7fe fc46 	bl	8000e58 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e173      	b.n	80028c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025da:	4b0b      	ldr	r3, [pc, #44]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 80025dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0x234>
 80025e6:	e01b      	b.n	8002620 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025e8:	4b09      	ldr	r3, [pc, #36]	@ (8002610 <HAL_RCC_OscConfig+0x27c>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ee:	f7fe fc33 	bl	8000e58 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f4:	e00e      	b.n	8002614 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f6:	f7fe fc2f 	bl	8000e58 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d907      	bls.n	8002614 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e15c      	b.n	80028c2 <HAL_RCC_OscConfig+0x52e>
 8002608:	40023800 	.word	0x40023800
 800260c:	42470000 	.word	0x42470000
 8002610:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002614:	4b8a      	ldr	r3, [pc, #552]	@ (8002840 <HAL_RCC_OscConfig+0x4ac>)
 8002616:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1ea      	bne.n	80025f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 8097 	beq.w	800275c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800262e:	2300      	movs	r3, #0
 8002630:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002632:	4b83      	ldr	r3, [pc, #524]	@ (8002840 <HAL_RCC_OscConfig+0x4ac>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10f      	bne.n	800265e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	4b7f      	ldr	r3, [pc, #508]	@ (8002840 <HAL_RCC_OscConfig+0x4ac>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	4a7e      	ldr	r2, [pc, #504]	@ (8002840 <HAL_RCC_OscConfig+0x4ac>)
 8002648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800264c:	6413      	str	r3, [r2, #64]	@ 0x40
 800264e:	4b7c      	ldr	r3, [pc, #496]	@ (8002840 <HAL_RCC_OscConfig+0x4ac>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800265a:	2301      	movs	r3, #1
 800265c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265e:	4b79      	ldr	r3, [pc, #484]	@ (8002844 <HAL_RCC_OscConfig+0x4b0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d118      	bne.n	800269c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800266a:	4b76      	ldr	r3, [pc, #472]	@ (8002844 <HAL_RCC_OscConfig+0x4b0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a75      	ldr	r2, [pc, #468]	@ (8002844 <HAL_RCC_OscConfig+0x4b0>)
 8002670:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002676:	f7fe fbef 	bl	8000e58 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267e:	f7fe fbeb 	bl	8000e58 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e118      	b.n	80028c2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002690:	4b6c      	ldr	r3, [pc, #432]	@ (8002844 <HAL_RCC_OscConfig+0x4b0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d106      	bne.n	80026b2 <HAL_RCC_OscConfig+0x31e>
 80026a4:	4b66      	ldr	r3, [pc, #408]	@ (8002840 <HAL_RCC_OscConfig+0x4ac>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a8:	4a65      	ldr	r2, [pc, #404]	@ (8002840 <HAL_RCC_OscConfig+0x4ac>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80026b0:	e01c      	b.n	80026ec <HAL_RCC_OscConfig+0x358>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2b05      	cmp	r3, #5
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x340>
 80026ba:	4b61      	ldr	r3, [pc, #388]	@ (8002840 <HAL_RCC_OscConfig+0x4ac>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026be:	4a60      	ldr	r2, [pc, #384]	@ (8002840 <HAL_RCC_OscConfig+0x4ac>)
 80026c0:	f043 0304 	orr.w	r3, r3, #4
 80026c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80026c6:	4b5e      	ldr	r3, [pc, #376]	@ (8002840 <HAL_RCC_OscConfig+0x4ac>)
 80026c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ca:	4a5d      	ldr	r2, [pc, #372]	@ (8002840 <HAL_RCC_OscConfig+0x4ac>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80026d2:	e00b      	b.n	80026ec <HAL_RCC_OscConfig+0x358>
 80026d4:	4b5a      	ldr	r3, [pc, #360]	@ (8002840 <HAL_RCC_OscConfig+0x4ac>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d8:	4a59      	ldr	r2, [pc, #356]	@ (8002840 <HAL_RCC_OscConfig+0x4ac>)
 80026da:	f023 0301 	bic.w	r3, r3, #1
 80026de:	6713      	str	r3, [r2, #112]	@ 0x70
 80026e0:	4b57      	ldr	r3, [pc, #348]	@ (8002840 <HAL_RCC_OscConfig+0x4ac>)
 80026e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e4:	4a56      	ldr	r2, [pc, #344]	@ (8002840 <HAL_RCC_OscConfig+0x4ac>)
 80026e6:	f023 0304 	bic.w	r3, r3, #4
 80026ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f4:	f7fe fbb0 	bl	8000e58 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fc:	f7fe fbac 	bl	8000e58 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e0d7      	b.n	80028c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002712:	4b4b      	ldr	r3, [pc, #300]	@ (8002840 <HAL_RCC_OscConfig+0x4ac>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0ee      	beq.n	80026fc <HAL_RCC_OscConfig+0x368>
 800271e:	e014      	b.n	800274a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002720:	f7fe fb9a 	bl	8000e58 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002726:	e00a      	b.n	800273e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002728:	f7fe fb96 	bl	8000e58 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e0c1      	b.n	80028c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273e:	4b40      	ldr	r3, [pc, #256]	@ (8002840 <HAL_RCC_OscConfig+0x4ac>)
 8002740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1ee      	bne.n	8002728 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800274a:	7dfb      	ldrb	r3, [r7, #23]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d105      	bne.n	800275c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002750:	4b3b      	ldr	r3, [pc, #236]	@ (8002840 <HAL_RCC_OscConfig+0x4ac>)
 8002752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002754:	4a3a      	ldr	r2, [pc, #232]	@ (8002840 <HAL_RCC_OscConfig+0x4ac>)
 8002756:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800275a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 80ad 	beq.w	80028c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002766:	4b36      	ldr	r3, [pc, #216]	@ (8002840 <HAL_RCC_OscConfig+0x4ac>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	2b08      	cmp	r3, #8
 8002770:	d060      	beq.n	8002834 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d145      	bne.n	8002806 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277a:	4b33      	ldr	r3, [pc, #204]	@ (8002848 <HAL_RCC_OscConfig+0x4b4>)
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002780:	f7fe fb6a 	bl	8000e58 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002788:	f7fe fb66 	bl	8000e58 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e093      	b.n	80028c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279a:	4b29      	ldr	r3, [pc, #164]	@ (8002840 <HAL_RCC_OscConfig+0x4ac>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69da      	ldr	r2, [r3, #28]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b4:	019b      	lsls	r3, r3, #6
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027bc:	085b      	lsrs	r3, r3, #1
 80027be:	3b01      	subs	r3, #1
 80027c0:	041b      	lsls	r3, r3, #16
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c8:	061b      	lsls	r3, r3, #24
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d0:	071b      	lsls	r3, r3, #28
 80027d2:	491b      	ldr	r1, [pc, #108]	@ (8002840 <HAL_RCC_OscConfig+0x4ac>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002848 <HAL_RCC_OscConfig+0x4b4>)
 80027da:	2201      	movs	r2, #1
 80027dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027de:	f7fe fb3b 	bl	8000e58 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e6:	f7fe fb37 	bl	8000e58 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e064      	b.n	80028c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f8:	4b11      	ldr	r3, [pc, #68]	@ (8002840 <HAL_RCC_OscConfig+0x4ac>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x452>
 8002804:	e05c      	b.n	80028c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002806:	4b10      	ldr	r3, [pc, #64]	@ (8002848 <HAL_RCC_OscConfig+0x4b4>)
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280c:	f7fe fb24 	bl	8000e58 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002814:	f7fe fb20 	bl	8000e58 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e04d      	b.n	80028c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002826:	4b06      	ldr	r3, [pc, #24]	@ (8002840 <HAL_RCC_OscConfig+0x4ac>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x480>
 8002832:	e045      	b.n	80028c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d107      	bne.n	800284c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e040      	b.n	80028c2 <HAL_RCC_OscConfig+0x52e>
 8002840:	40023800 	.word	0x40023800
 8002844:	40007000 	.word	0x40007000
 8002848:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800284c:	4b1f      	ldr	r3, [pc, #124]	@ (80028cc <HAL_RCC_OscConfig+0x538>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d030      	beq.n	80028bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d129      	bne.n	80028bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d122      	bne.n	80028bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800287c:	4013      	ands	r3, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002882:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002884:	4293      	cmp	r3, r2
 8002886:	d119      	bne.n	80028bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002892:	085b      	lsrs	r3, r3, #1
 8002894:	3b01      	subs	r3, #1
 8002896:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002898:	429a      	cmp	r2, r3
 800289a:	d10f      	bne.n	80028bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d107      	bne.n	80028bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800

080028d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e042      	b.n	8002968 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fe f842 	bl	8000980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2224      	movs	r2, #36	@ 0x24
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002912:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f82b 	bl	8002970 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002928:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695a      	ldr	r2, [r3, #20]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002938:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002948:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002974:	b0c0      	sub	sp, #256	@ 0x100
 8002976:	af00      	add	r7, sp, #0
 8002978:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800297c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800298c:	68d9      	ldr	r1, [r3, #12]
 800298e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	ea40 0301 	orr.w	r3, r0, r1
 8002998:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800299a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80029c8:	f021 010c 	bic.w	r1, r1, #12
 80029cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80029d6:	430b      	orrs	r3, r1
 80029d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80029e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ea:	6999      	ldr	r1, [r3, #24]
 80029ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	ea40 0301 	orr.w	r3, r0, r1
 80029f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	4b8f      	ldr	r3, [pc, #572]	@ (8002c3c <UART_SetConfig+0x2cc>)
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d005      	beq.n	8002a10 <UART_SetConfig+0xa0>
 8002a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	4b8d      	ldr	r3, [pc, #564]	@ (8002c40 <UART_SetConfig+0x2d0>)
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d104      	bne.n	8002a1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a10:	f7fe ff52 	bl	80018b8 <HAL_RCC_GetPCLK2Freq>
 8002a14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002a18:	e003      	b.n	8002a22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a1a:	f7fe ff39 	bl	8001890 <HAL_RCC_GetPCLK1Freq>
 8002a1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a2c:	f040 810c 	bne.w	8002c48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a34:	2200      	movs	r2, #0
 8002a36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002a3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002a42:	4622      	mov	r2, r4
 8002a44:	462b      	mov	r3, r5
 8002a46:	1891      	adds	r1, r2, r2
 8002a48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002a4a:	415b      	adcs	r3, r3
 8002a4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a52:	4621      	mov	r1, r4
 8002a54:	eb12 0801 	adds.w	r8, r2, r1
 8002a58:	4629      	mov	r1, r5
 8002a5a:	eb43 0901 	adc.w	r9, r3, r1
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a72:	4690      	mov	r8, r2
 8002a74:	4699      	mov	r9, r3
 8002a76:	4623      	mov	r3, r4
 8002a78:	eb18 0303 	adds.w	r3, r8, r3
 8002a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a80:	462b      	mov	r3, r5
 8002a82:	eb49 0303 	adc.w	r3, r9, r3
 8002a86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	18db      	adds	r3, r3, r3
 8002aa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	eb42 0303 	adc.w	r3, r2, r3
 8002aaa:	657b      	str	r3, [r7, #84]	@ 0x54
 8002aac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ab0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002ab4:	f7fd fbae 	bl	8000214 <__aeabi_uldivmod>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4b61      	ldr	r3, [pc, #388]	@ (8002c44 <UART_SetConfig+0x2d4>)
 8002abe:	fba3 2302 	umull	r2, r3, r3, r2
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	011c      	lsls	r4, r3, #4
 8002ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aca:	2200      	movs	r2, #0
 8002acc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ad0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002ad4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002ad8:	4642      	mov	r2, r8
 8002ada:	464b      	mov	r3, r9
 8002adc:	1891      	adds	r1, r2, r2
 8002ade:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ae0:	415b      	adcs	r3, r3
 8002ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ae4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ae8:	4641      	mov	r1, r8
 8002aea:	eb12 0a01 	adds.w	sl, r2, r1
 8002aee:	4649      	mov	r1, r9
 8002af0:	eb43 0b01 	adc.w	fp, r3, r1
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b08:	4692      	mov	sl, r2
 8002b0a:	469b      	mov	fp, r3
 8002b0c:	4643      	mov	r3, r8
 8002b0e:	eb1a 0303 	adds.w	r3, sl, r3
 8002b12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b16:	464b      	mov	r3, r9
 8002b18:	eb4b 0303 	adc.w	r3, fp, r3
 8002b1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b34:	460b      	mov	r3, r1
 8002b36:	18db      	adds	r3, r3, r3
 8002b38:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	eb42 0303 	adc.w	r3, r2, r3
 8002b40:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002b4a:	f7fd fb63 	bl	8000214 <__aeabi_uldivmod>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4611      	mov	r1, r2
 8002b54:	4b3b      	ldr	r3, [pc, #236]	@ (8002c44 <UART_SetConfig+0x2d4>)
 8002b56:	fba3 2301 	umull	r2, r3, r3, r1
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	2264      	movs	r2, #100	@ 0x64
 8002b5e:	fb02 f303 	mul.w	r3, r2, r3
 8002b62:	1acb      	subs	r3, r1, r3
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b6a:	4b36      	ldr	r3, [pc, #216]	@ (8002c44 <UART_SetConfig+0x2d4>)
 8002b6c:	fba3 2302 	umull	r2, r3, r3, r2
 8002b70:	095b      	lsrs	r3, r3, #5
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b78:	441c      	add	r4, r3
 8002b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002b88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b8c:	4642      	mov	r2, r8
 8002b8e:	464b      	mov	r3, r9
 8002b90:	1891      	adds	r1, r2, r2
 8002b92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b94:	415b      	adcs	r3, r3
 8002b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b9c:	4641      	mov	r1, r8
 8002b9e:	1851      	adds	r1, r2, r1
 8002ba0:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ba2:	4649      	mov	r1, r9
 8002ba4:	414b      	adcs	r3, r1
 8002ba6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002bb4:	4659      	mov	r1, fp
 8002bb6:	00cb      	lsls	r3, r1, #3
 8002bb8:	4651      	mov	r1, sl
 8002bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bbe:	4651      	mov	r1, sl
 8002bc0:	00ca      	lsls	r2, r1, #3
 8002bc2:	4610      	mov	r0, r2
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	4642      	mov	r2, r8
 8002bca:	189b      	adds	r3, r3, r2
 8002bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bd0:	464b      	mov	r3, r9
 8002bd2:	460a      	mov	r2, r1
 8002bd4:	eb42 0303 	adc.w	r3, r2, r3
 8002bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002be8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002bec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	18db      	adds	r3, r3, r3
 8002bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	eb42 0303 	adc.w	r3, r2, r3
 8002bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002c06:	f7fd fb05 	bl	8000214 <__aeabi_uldivmod>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c44 <UART_SetConfig+0x2d4>)
 8002c10:	fba3 1302 	umull	r1, r3, r3, r2
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	2164      	movs	r1, #100	@ 0x64
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	3332      	adds	r3, #50	@ 0x32
 8002c22:	4a08      	ldr	r2, [pc, #32]	@ (8002c44 <UART_SetConfig+0x2d4>)
 8002c24:	fba2 2303 	umull	r2, r3, r2, r3
 8002c28:	095b      	lsrs	r3, r3, #5
 8002c2a:	f003 0207 	and.w	r2, r3, #7
 8002c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4422      	add	r2, r4
 8002c36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c38:	e106      	b.n	8002e48 <UART_SetConfig+0x4d8>
 8002c3a:	bf00      	nop
 8002c3c:	40011000 	.word	0x40011000
 8002c40:	40011400 	.word	0x40011400
 8002c44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002c56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002c5a:	4642      	mov	r2, r8
 8002c5c:	464b      	mov	r3, r9
 8002c5e:	1891      	adds	r1, r2, r2
 8002c60:	6239      	str	r1, [r7, #32]
 8002c62:	415b      	adcs	r3, r3
 8002c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c6a:	4641      	mov	r1, r8
 8002c6c:	1854      	adds	r4, r2, r1
 8002c6e:	4649      	mov	r1, r9
 8002c70:	eb43 0501 	adc.w	r5, r3, r1
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	00eb      	lsls	r3, r5, #3
 8002c7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c82:	00e2      	lsls	r2, r4, #3
 8002c84:	4614      	mov	r4, r2
 8002c86:	461d      	mov	r5, r3
 8002c88:	4643      	mov	r3, r8
 8002c8a:	18e3      	adds	r3, r4, r3
 8002c8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c90:	464b      	mov	r3, r9
 8002c92:	eb45 0303 	adc.w	r3, r5, r3
 8002c96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ca6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	008b      	lsls	r3, r1, #2
 8002cba:	4621      	mov	r1, r4
 8002cbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	008a      	lsls	r2, r1, #2
 8002cc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002cc8:	f7fd faa4 	bl	8000214 <__aeabi_uldivmod>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4b60      	ldr	r3, [pc, #384]	@ (8002e54 <UART_SetConfig+0x4e4>)
 8002cd2:	fba3 2302 	umull	r2, r3, r3, r2
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	011c      	lsls	r4, r3, #4
 8002cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ce4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002ce8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002cec:	4642      	mov	r2, r8
 8002cee:	464b      	mov	r3, r9
 8002cf0:	1891      	adds	r1, r2, r2
 8002cf2:	61b9      	str	r1, [r7, #24]
 8002cf4:	415b      	adcs	r3, r3
 8002cf6:	61fb      	str	r3, [r7, #28]
 8002cf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cfc:	4641      	mov	r1, r8
 8002cfe:	1851      	adds	r1, r2, r1
 8002d00:	6139      	str	r1, [r7, #16]
 8002d02:	4649      	mov	r1, r9
 8002d04:	414b      	adcs	r3, r1
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d14:	4659      	mov	r1, fp
 8002d16:	00cb      	lsls	r3, r1, #3
 8002d18:	4651      	mov	r1, sl
 8002d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d1e:	4651      	mov	r1, sl
 8002d20:	00ca      	lsls	r2, r1, #3
 8002d22:	4610      	mov	r0, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	4603      	mov	r3, r0
 8002d28:	4642      	mov	r2, r8
 8002d2a:	189b      	adds	r3, r3, r2
 8002d2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d30:	464b      	mov	r3, r9
 8002d32:	460a      	mov	r2, r1
 8002d34:	eb42 0303 	adc.w	r3, r2, r3
 8002d38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002d54:	4649      	mov	r1, r9
 8002d56:	008b      	lsls	r3, r1, #2
 8002d58:	4641      	mov	r1, r8
 8002d5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d5e:	4641      	mov	r1, r8
 8002d60:	008a      	lsls	r2, r1, #2
 8002d62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d66:	f7fd fa55 	bl	8000214 <__aeabi_uldivmod>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4b38      	ldr	r3, [pc, #224]	@ (8002e54 <UART_SetConfig+0x4e4>)
 8002d72:	fba3 2301 	umull	r2, r3, r3, r1
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	2264      	movs	r2, #100	@ 0x64
 8002d7a:	fb02 f303 	mul.w	r3, r2, r3
 8002d7e:	1acb      	subs	r3, r1, r3
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	3332      	adds	r3, #50	@ 0x32
 8002d84:	4a33      	ldr	r2, [pc, #204]	@ (8002e54 <UART_SetConfig+0x4e4>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d90:	441c      	add	r4, r3
 8002d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d96:	2200      	movs	r2, #0
 8002d98:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002da0:	4642      	mov	r2, r8
 8002da2:	464b      	mov	r3, r9
 8002da4:	1891      	adds	r1, r2, r2
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	415b      	adcs	r3, r3
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002db0:	4641      	mov	r1, r8
 8002db2:	1851      	adds	r1, r2, r1
 8002db4:	6039      	str	r1, [r7, #0]
 8002db6:	4649      	mov	r1, r9
 8002db8:	414b      	adcs	r3, r1
 8002dba:	607b      	str	r3, [r7, #4]
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002dc8:	4659      	mov	r1, fp
 8002dca:	00cb      	lsls	r3, r1, #3
 8002dcc:	4651      	mov	r1, sl
 8002dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dd2:	4651      	mov	r1, sl
 8002dd4:	00ca      	lsls	r2, r1, #3
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4603      	mov	r3, r0
 8002ddc:	4642      	mov	r2, r8
 8002dde:	189b      	adds	r3, r3, r2
 8002de0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002de2:	464b      	mov	r3, r9
 8002de4:	460a      	mov	r2, r1
 8002de6:	eb42 0303 	adc.w	r3, r2, r3
 8002dea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002df6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002e04:	4649      	mov	r1, r9
 8002e06:	008b      	lsls	r3, r1, #2
 8002e08:	4641      	mov	r1, r8
 8002e0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e0e:	4641      	mov	r1, r8
 8002e10:	008a      	lsls	r2, r1, #2
 8002e12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002e16:	f7fd f9fd 	bl	8000214 <__aeabi_uldivmod>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e54 <UART_SetConfig+0x4e4>)
 8002e20:	fba3 1302 	umull	r1, r3, r3, r2
 8002e24:	095b      	lsrs	r3, r3, #5
 8002e26:	2164      	movs	r1, #100	@ 0x64
 8002e28:	fb01 f303 	mul.w	r3, r1, r3
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	3332      	adds	r3, #50	@ 0x32
 8002e32:	4a08      	ldr	r2, [pc, #32]	@ (8002e54 <UART_SetConfig+0x4e4>)
 8002e34:	fba2 2303 	umull	r2, r3, r2, r3
 8002e38:	095b      	lsrs	r3, r3, #5
 8002e3a:	f003 020f 	and.w	r2, r3, #15
 8002e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4422      	add	r2, r4
 8002e46:	609a      	str	r2, [r3, #8]
}
 8002e48:	bf00      	nop
 8002e4a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e54:	51eb851f 	.word	0x51eb851f

08002e58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e58:	b084      	sub	sp, #16
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	f107 001c 	add.w	r0, r7, #28
 8002e66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e6a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d123      	bne.n	8002eba <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e76:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002e86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002e9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d105      	bne.n	8002eae <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fa9a 	bl	80033e8 <USB_CoreReset>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	73fb      	strb	r3, [r7, #15]
 8002eb8:	e01b      	b.n	8002ef2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fa8e 	bl	80033e8 <USB_CoreReset>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002ed0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d106      	bne.n	8002ee6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002edc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ee4:	e005      	b.n	8002ef2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002ef2:	7fbb      	ldrb	r3, [r7, #30]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d10b      	bne.n	8002f10 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f043 0206 	orr.w	r2, r3, #6
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f043 0220 	orr.w	r2, r3, #32
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f1c:	b004      	add	sp, #16
 8002f1e:	4770      	bx	lr

08002f20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f023 0201 	bic.w	r2, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b084      	sub	sp, #16
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d115      	bne.n	8002f90 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002f70:	200a      	movs	r0, #10
 8002f72:	f7fd ff7d 	bl	8000e70 <HAL_Delay>
      ms += 10U;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	330a      	adds	r3, #10
 8002f7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 fa25 	bl	80033cc <USB_GetMode>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d01e      	beq.n	8002fc6 <USB_SetCurrentMode+0x84>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2bc7      	cmp	r3, #199	@ 0xc7
 8002f8c:	d9f0      	bls.n	8002f70 <USB_SetCurrentMode+0x2e>
 8002f8e:	e01a      	b.n	8002fc6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d115      	bne.n	8002fc2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002fa2:	200a      	movs	r0, #10
 8002fa4:	f7fd ff64 	bl	8000e70 <HAL_Delay>
      ms += 10U;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	330a      	adds	r3, #10
 8002fac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fa0c 	bl	80033cc <USB_GetMode>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d005      	beq.n	8002fc6 <USB_SetCurrentMode+0x84>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2bc7      	cmp	r3, #199	@ 0xc7
 8002fbe:	d9f0      	bls.n	8002fa2 <USB_SetCurrentMode+0x60>
 8002fc0:	e001      	b.n	8002fc6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e005      	b.n	8002fd2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2bc8      	cmp	r3, #200	@ 0xc8
 8002fca:	d101      	bne.n	8002fd0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002fdc:	b084      	sub	sp, #16
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b086      	sub	sp, #24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002fea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	e009      	b.n	8003010 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	3340      	adds	r3, #64	@ 0x40
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	2200      	movs	r2, #0
 8003008:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	3301      	adds	r3, #1
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	2b0e      	cmp	r3, #14
 8003014:	d9f2      	bls.n	8002ffc <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003016:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800301a:	2b00      	cmp	r3, #0
 800301c:	d11c      	bne.n	8003058 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800302c:	f043 0302 	orr.w	r3, r3, #2
 8003030:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003036:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	e005      	b.n	8003064 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800306a:	461a      	mov	r2, r3
 800306c:	2300      	movs	r3, #0
 800306e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003070:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003074:	2b01      	cmp	r3, #1
 8003076:	d10d      	bne.n	8003094 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003078:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800307c:	2b00      	cmp	r3, #0
 800307e:	d104      	bne.n	800308a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003080:	2100      	movs	r1, #0
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f968 	bl	8003358 <USB_SetDevSpeed>
 8003088:	e008      	b.n	800309c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800308a:	2101      	movs	r1, #1
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f963 	bl	8003358 <USB_SetDevSpeed>
 8003092:	e003      	b.n	800309c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003094:	2103      	movs	r1, #3
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f95e 	bl	8003358 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800309c:	2110      	movs	r1, #16
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f8fa 	bl	8003298 <USB_FlushTxFifo>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f924 	bl	80032fc <USB_FlushRxFifo>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030c4:	461a      	mov	r2, r3
 80030c6:	2300      	movs	r3, #0
 80030c8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030d0:	461a      	mov	r2, r3
 80030d2:	2300      	movs	r3, #0
 80030d4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030dc:	461a      	mov	r2, r3
 80030de:	2300      	movs	r3, #0
 80030e0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030e2:	2300      	movs	r3, #0
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	e043      	b.n	8003170 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80030fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030fe:	d118      	bne.n	8003132 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10a      	bne.n	800311c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4413      	add	r3, r2
 800310e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003112:	461a      	mov	r2, r3
 8003114:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	e013      	b.n	8003144 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4413      	add	r3, r2
 8003124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003128:	461a      	mov	r2, r3
 800312a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800312e:	6013      	str	r3, [r2, #0]
 8003130:	e008      	b.n	8003144 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	015a      	lsls	r2, r3, #5
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4413      	add	r3, r2
 800313a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800313e:	461a      	mov	r2, r3
 8003140:	2300      	movs	r3, #0
 8003142:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4413      	add	r3, r2
 800314c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003150:	461a      	mov	r2, r3
 8003152:	2300      	movs	r3, #0
 8003154:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4413      	add	r3, r2
 800315e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003162:	461a      	mov	r2, r3
 8003164:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003168:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	3301      	adds	r3, #1
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003174:	461a      	mov	r2, r3
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4293      	cmp	r3, r2
 800317a:	d3b5      	bcc.n	80030e8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800317c:	2300      	movs	r3, #0
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	e043      	b.n	800320a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4413      	add	r3, r2
 800318a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003194:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003198:	d118      	bne.n	80031cc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10a      	bne.n	80031b6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031ac:	461a      	mov	r2, r3
 80031ae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	e013      	b.n	80031de <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	015a      	lsls	r2, r3, #5
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4413      	add	r3, r2
 80031be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031c2:	461a      	mov	r2, r3
 80031c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e008      	b.n	80031de <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031d8:	461a      	mov	r2, r3
 80031da:	2300      	movs	r3, #0
 80031dc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031ea:	461a      	mov	r2, r3
 80031ec:	2300      	movs	r3, #0
 80031ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031fc:	461a      	mov	r2, r3
 80031fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003202:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	3301      	adds	r3, #1
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800320e:	461a      	mov	r2, r3
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4293      	cmp	r3, r2
 8003214:	d3b5      	bcc.n	8003182 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003224:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003228:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003236:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003238:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800323c:	2b00      	cmp	r3, #0
 800323e:	d105      	bne.n	800324c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f043 0210 	orr.w	r2, r3, #16
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699a      	ldr	r2, [r3, #24]
 8003250:	4b10      	ldr	r3, [pc, #64]	@ (8003294 <USB_DevInit+0x2b8>)
 8003252:	4313      	orrs	r3, r2
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003258:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	f043 0208 	orr.w	r2, r3, #8
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800326c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003270:	2b01      	cmp	r3, #1
 8003272:	d107      	bne.n	8003284 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800327c:	f043 0304 	orr.w	r3, r3, #4
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003284:	7dfb      	ldrb	r3, [r7, #23]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003290:	b004      	add	sp, #16
 8003292:	4770      	bx	lr
 8003294:	803c3800 	.word	0x803c3800

08003298 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	3301      	adds	r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80032b2:	d901      	bls.n	80032b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e01b      	b.n	80032f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	daf2      	bge.n	80032a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	019b      	lsls	r3, r3, #6
 80032c8:	f043 0220 	orr.w	r2, r3, #32
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	3301      	adds	r3, #1
 80032d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80032dc:	d901      	bls.n	80032e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e006      	b.n	80032f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	2b20      	cmp	r3, #32
 80032ec:	d0f0      	beq.n	80032d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	3301      	adds	r3, #1
 800330c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003314:	d901      	bls.n	800331a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e018      	b.n	800334c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	2b00      	cmp	r3, #0
 8003320:	daf2      	bge.n	8003308 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2210      	movs	r2, #16
 800332a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3301      	adds	r3, #1
 8003330:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003338:	d901      	bls.n	800333e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e006      	b.n	800334c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	2b10      	cmp	r3, #16
 8003348:	d0f0      	beq.n	800332c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	68f9      	ldr	r1, [r7, #12]
 8003374:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003378:	4313      	orrs	r3, r2
 800337a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800338a:	b480      	push	{r7}
 800338c:	b085      	sub	sp, #20
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80033a4:	f023 0303 	bic.w	r3, r3, #3
 80033a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033b8:	f043 0302 	orr.w	r3, r3, #2
 80033bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	f003 0301 	and.w	r3, r3, #1
}
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	3301      	adds	r3, #1
 80033f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003400:	d901      	bls.n	8003406 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e01b      	b.n	800343e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	2b00      	cmp	r3, #0
 800340c:	daf2      	bge.n	80033f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f043 0201 	orr.w	r2, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	3301      	adds	r3, #1
 8003422:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800342a:	d901      	bls.n	8003430 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e006      	b.n	800343e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b01      	cmp	r3, #1
 800343a:	d0f0      	beq.n	800341e <USB_CoreReset+0x36>

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
	...

0800344c <_prep_out_transaction>:
static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
CFG_TUD_MEM_SECTION static cdcd_epbuf_t _cdcd_epbuf[CFG_TUD_CDC];

static tud_cdc_configure_fifo_t _cdcd_fifo_cfg;

static bool _prep_out_transaction(uint8_t itf) {
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	71fb      	strb	r3, [r7, #7]
  const uint8_t rhport = 0;
 8003456:	2300      	movs	r3, #0
 8003458:	75fb      	strb	r3, [r7, #23]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 800345a:	79fb      	ldrb	r3, [r7, #7]
 800345c:	22a8      	movs	r2, #168	@ 0xa8
 800345e:	fb02 f303 	mul.w	r3, r2, r3
 8003462:	4a30      	ldr	r2, [pc, #192]	@ (8003524 <_prep_out_transaction+0xd8>)
 8003464:	4413      	add	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	01db      	lsls	r3, r3, #7
 800346c:	4a2e      	ldr	r2, [pc, #184]	@ (8003528 <_prep_out_transaction+0xdc>)
 800346e:	4413      	add	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 8003472:	f001 fb17 	bl	8004aa4 <tud_mounted>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d009      	beq.n	8003490 <_prep_out_transaction+0x44>
 800347c:	f001 fb24 	bl	8004ac8 <tud_suspended>
 8003480:	4603      	mov	r3, r0
 8003482:	f083 0301 	eor.w	r3, r3, #1
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <_prep_out_transaction+0x44>
 800348c:	2301      	movs	r3, #1
 800348e:	e000      	b.n	8003492 <_prep_out_transaction+0x46>
 8003490:	2300      	movs	r3, #0
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
 8003498:	f083 0301 	eor.w	r3, r3, #1
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d103      	bne.n	80034aa <_prep_out_transaction+0x5e>
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	78db      	ldrb	r3, [r3, #3]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <_prep_out_transaction+0x62>
 80034aa:	2300      	movs	r3, #0
 80034ac:	e035      	b.n	800351a <_prep_out_transaction+0xce>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	3310      	adds	r3, #16
 80034b2:	4618      	mov	r0, r3
 80034b4:	f001 f989 	bl	80047ca <tu_fifo_remaining>
 80034b8:	4603      	mov	r3, r0
 80034ba:	817b      	strh	r3, [r7, #10]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= CFG_TUD_CDC_EP_BUFSIZE);
 80034bc:	897b      	ldrh	r3, [r7, #10]
 80034be:	2b3f      	cmp	r3, #63	@ 0x3f
 80034c0:	d801      	bhi.n	80034c6 <_prep_out_transaction+0x7a>
 80034c2:	2300      	movs	r3, #0
 80034c4:	e029      	b.n	800351a <_prep_out_transaction+0xce>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	78da      	ldrb	r2, [r3, #3]
 80034ca:	7dfb      	ldrb	r3, [r7, #23]
 80034cc:	4611      	mov	r1, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f002 fda0 	bl	8006014 <usbd_edpt_claim>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f083 0301 	eor.w	r3, r3, #1
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <_prep_out_transaction+0x98>
 80034e0:	2300      	movs	r3, #0
 80034e2:	e01a      	b.n	800351a <_prep_out_transaction+0xce>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	3310      	adds	r3, #16
 80034e8:	4618      	mov	r0, r3
 80034ea:	f001 f96e 	bl	80047ca <tu_fifo_remaining>
 80034ee:	4603      	mov	r3, r0
 80034f0:	817b      	strh	r3, [r7, #10]

  if (available >= CFG_TUD_CDC_EP_BUFSIZE) {
 80034f2:	897b      	ldrh	r3, [r7, #10]
 80034f4:	2b3f      	cmp	r3, #63	@ 0x3f
 80034f6:	d908      	bls.n	800350a <_prep_out_transaction+0xbe>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	78d9      	ldrb	r1, [r3, #3]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	7df8      	ldrb	r0, [r7, #23]
 8003500:	2340      	movs	r3, #64	@ 0x40
 8003502:	f002 fdd7 	bl	80060b4 <usbd_edpt_xfer>
 8003506:	4603      	mov	r3, r0
 8003508:	e007      	b.n	800351a <_prep_out_transaction+0xce>
  } else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	78da      	ldrb	r2, [r3, #3]
 800350e:	7dfb      	ldrb	r3, [r7, #23]
 8003510:	4611      	mov	r1, r2
 8003512:	4618      	mov	r0, r3
 8003514:	f002 fda6 	bl	8006064 <usbd_edpt_release>
    return false;
 8003518:	2300      	movs	r3, #0
  }
}
 800351a:	4618      	mov	r0, r3
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	200005c0 	.word	0x200005c0
 8003528:	20000710 	.word	0x20000710

0800352c <tud_cdc_n_available>:
}

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf) {
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 8003536:	79fb      	ldrb	r3, [r7, #7]
 8003538:	22a8      	movs	r2, #168	@ 0xa8
 800353a:	fb02 f303 	mul.w	r3, r2, r3
 800353e:	3310      	adds	r3, #16
 8003540:	4a04      	ldr	r2, [pc, #16]	@ (8003554 <tud_cdc_n_available+0x28>)
 8003542:	4413      	add	r3, r2
 8003544:	4618      	mov	r0, r3
 8003546:	f001 f8cb 	bl	80046e0 <tu_fifo_count>
 800354a:	4603      	mov	r3, r0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	200005c0 	.word	0x200005c0

08003558 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize) {
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8003566:	7bfb      	ldrb	r3, [r7, #15]
 8003568:	22a8      	movs	r2, #168	@ 0xa8
 800356a:	fb02 f303 	mul.w	r3, r2, r3
 800356e:	4a0f      	ldr	r2, [pc, #60]	@ (80035ac <tud_cdc_n_read+0x54>)
 8003570:	4413      	add	r3, r2
 8003572:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f103 0010 	add.w	r0, r3, #16
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003580:	4293      	cmp	r3, r2
 8003582:	d802      	bhi.n	800358a <tud_cdc_n_read+0x32>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	b29b      	uxth	r3, r3
 8003588:	e001      	b.n	800358e <tud_cdc_n_read+0x36>
 800358a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800358e:	461a      	mov	r2, r3
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	f001 f976 	bl	8004882 <tu_fifo_read_n>
 8003596:	4603      	mov	r3, r0
 8003598:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(itf);
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff ff55 	bl	800344c <_prep_out_transaction>
  return num_read;
 80035a2:	693b      	ldr	r3, [r7, #16]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	200005c0 	.word	0x200005c0

080035b0 <tud_cdc_n_write>:
}

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, const void* buffer, uint32_t bufsize) {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	22a8      	movs	r2, #168	@ 0xa8
 80035c2:	fb02 f303 	mul.w	r3, r2, r3
 80035c6:	4a13      	ldr	r2, [pc, #76]	@ (8003614 <tud_cdc_n_write+0x64>)
 80035c8:	4413      	add	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f103 001c 	add.w	r0, r3, #28
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80035d8:	4293      	cmp	r3, r2
 80035da:	d802      	bhi.n	80035e2 <tud_cdc_n_write+0x32>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	e001      	b.n	80035e6 <tud_cdc_n_write+0x36>
 80035e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035e6:	461a      	mov	r2, r3
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	f001 f9b1 	bl	8004950 <tu_fifo_write_n>
 80035ee:	4603      	mov	r3, r0
 80035f0:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  if (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	331c      	adds	r3, #28
 80035f6:	4618      	mov	r0, r3
 80035f8:	f001 f872 	bl	80046e0 <tu_fifo_count>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8003600:	d903      	bls.n	800360a <tud_cdc_n_write+0x5a>
      #if CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
      || tu_fifo_full(&p_cdc->tx_ff) // check full if fifo size is less than packet size
      #endif
      ) {
    tud_cdc_n_write_flush(itf);
 8003602:	7bfb      	ldrb	r3, [r7, #15]
 8003604:	4618      	mov	r0, r3
 8003606:	f000 f807 	bl	8003618 <tud_cdc_n_write_flush>
  }

  return ret;
 800360a:	8a7b      	ldrh	r3, [r7, #18]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	200005c0 	.word	0x200005c0

08003618 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	22a8      	movs	r2, #168	@ 0xa8
 8003626:	fb02 f303 	mul.w	r3, r2, r3
 800362a:	4a39      	ldr	r2, [pc, #228]	@ (8003710 <tud_cdc_n_write_flush+0xf8>)
 800362c:	4413      	add	r3, r2
 800362e:	617b      	str	r3, [r7, #20]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8003630:	79fb      	ldrb	r3, [r7, #7]
 8003632:	01db      	lsls	r3, r3, #7
 8003634:	4a37      	ldr	r2, [pc, #220]	@ (8003714 <tud_cdc_n_write_flush+0xfc>)
 8003636:	4413      	add	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	f001 fa33 	bl	8004aa4 <tud_mounted>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d009      	beq.n	8003658 <tud_cdc_n_write_flush+0x40>
 8003644:	f001 fa40 	bl	8004ac8 <tud_suspended>
 8003648:	4603      	mov	r3, r0
 800364a:	f083 0301 	eor.w	r3, r3, #1
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <tud_cdc_n_write_flush+0x40>
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <tud_cdc_n_write_flush+0x42>
 8003658:	2300      	movs	r3, #0
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready(), 0);
 8003660:	f083 0301 	eor.w	r3, r3, #1
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <tud_cdc_n_write_flush+0x56>
 800366a:	2300      	movs	r3, #0
 800366c:	e04c      	b.n	8003708 <tud_cdc_n_write_flush+0xf0>

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) {
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	331c      	adds	r3, #28
 8003672:	4618      	mov	r0, r3
 8003674:	f001 f834 	bl	80046e0 <tu_fifo_count>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <tud_cdc_n_write_flush+0x6a>
    return 0;
 800367e:	2300      	movs	r3, #0
 8003680:	e042      	b.n	8003708 <tud_cdc_n_write_flush+0xf0>
  }

  const uint8_t rhport = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	73fb      	strb	r3, [r7, #15]

  // Claim the endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_in), 0);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	789a      	ldrb	r2, [r3, #2]
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	4611      	mov	r1, r2
 800368e:	4618      	mov	r0, r3
 8003690:	f002 fcc0 	bl	8006014 <usbd_edpt_claim>
 8003694:	4603      	mov	r3, r0
 8003696:	f083 0301 	eor.w	r3, r3, #1
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <tud_cdc_n_write_flush+0x8c>
 80036a0:	2300      	movs	r3, #0
 80036a2:	e031      	b.n	8003708 <tud_cdc_n_write_flush+0xf0>

  // Pull data from FIFO
  const uint16_t count = tu_fifo_read_n(&p_cdc->tx_ff, p_epbuf->epin, CFG_TUD_CDC_EP_BUFSIZE);
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f103 001c 	add.w	r0, r3, #28
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	3340      	adds	r3, #64	@ 0x40
 80036ae:	2240      	movs	r2, #64	@ 0x40
 80036b0:	4619      	mov	r1, r3
 80036b2:	f001 f8e6 	bl	8004882 <tu_fifo_read_n>
 80036b6:	4603      	mov	r3, r0
 80036b8:	81bb      	strh	r3, [r7, #12]

  if (count) {
 80036ba:	89bb      	ldrh	r3, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d01b      	beq.n	80036f8 <tud_cdc_n_write_flush+0xe0>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, p_epbuf->epin, count), 0);
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	7899      	ldrb	r1, [r3, #2]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80036ca:	89bb      	ldrh	r3, [r7, #12]
 80036cc:	7bf8      	ldrb	r0, [r7, #15]
 80036ce:	f002 fcf1 	bl	80060b4 <usbd_edpt_xfer>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f083 0301 	eor.w	r3, r3, #1
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <tud_cdc_n_write_flush+0xdc>
 80036de:	4b0e      	ldr	r3, [pc, #56]	@ (8003718 <tud_cdc_n_write_flush+0x100>)
 80036e0:	60bb      	str	r3, [r7, #8]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d000      	beq.n	80036f0 <tud_cdc_n_write_flush+0xd8>
 80036ee:	be00      	bkpt	0x0000
 80036f0:	2300      	movs	r3, #0
 80036f2:	e009      	b.n	8003708 <tud_cdc_n_write_flush+0xf0>
    return count;
 80036f4:	89bb      	ldrh	r3, [r7, #12]
 80036f6:	e007      	b.n	8003708 <tud_cdc_n_write_flush+0xf0>
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	789a      	ldrb	r2, [r3, #2]
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	4611      	mov	r1, r2
 8003700:	4618      	mov	r0, r3
 8003702:	f002 fcaf 	bl	8006064 <usbd_edpt_release>
    return 0;
 8003706:	2300      	movs	r3, #0
  }
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	200005c0 	.word	0x200005c0
 8003714:	20000710 	.word	0x20000710
 8003718:	e000edf0 	.word	0xe000edf0

0800371c <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8003722:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8003726:	2100      	movs	r1, #0
 8003728:	4822      	ldr	r0, [pc, #136]	@ (80037b4 <cdcd_init+0x98>)
 800372a:	f004 ffaa 	bl	8008682 <memset>
  tu_memclr(&_cdcd_fifo_cfg, sizeof(_cdcd_fifo_cfg));
 800372e:	2201      	movs	r2, #1
 8003730:	2100      	movs	r1, #0
 8003732:	4821      	ldr	r0, [pc, #132]	@ (80037b8 <cdcd_init+0x9c>)
 8003734:	f004 ffa5 	bl	8008682 <memset>

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8003738:	2300      	movs	r3, #0
 800373a:	71fb      	strb	r3, [r7, #7]
 800373c:	e031      	b.n	80037a2 <cdcd_init+0x86>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	22a8      	movs	r2, #168	@ 0xa8
 8003742:	fb02 f303 	mul.w	r3, r2, r3
 8003746:	4a1b      	ldr	r2, [pc, #108]	@ (80037b4 <cdcd_init+0x98>)
 8003748:	4413      	add	r3, r2
 800374a:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	22ff      	movs	r2, #255	@ 0xff
 8003750:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003758:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2200      	movs	r2, #0
 800375e:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity = 0;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	2200      	movs	r2, #0
 8003764:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2208      	movs	r2, #8
 800376a:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	f103 0010 	add.w	r0, r3, #16
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8003778:	2300      	movs	r3, #0
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	2301      	movs	r3, #1
 800377e:	2240      	movs	r2, #64	@ 0x40
 8003780:	f000 fb1c 	bl	8003dbc <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	f103 001c 	add.w	r0, r3, #28
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8003790:	2301      	movs	r3, #1
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	2301      	movs	r3, #1
 8003796:	2240      	movs	r2, #64	@ 0x40
 8003798:	f000 fb10 	bl	8003dbc <tu_fifo_config>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 800379c:	79fb      	ldrb	r3, [r7, #7]
 800379e:	3301      	adds	r3, #1
 80037a0:	71fb      	strb	r3, [r7, #7]
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d9ca      	bls.n	800373e <cdcd_init+0x22>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
    #endif
  }
}
 80037a8:	bf00      	nop
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	200005c0 	.word	0x200005c0
 80037b8:	20000810 	.word	0x20000810

080037bc <cdcd_deinit>:

bool cdcd_deinit(void) {
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
      tu_fifo_config_mutex(&p_cdc->tx_ff, NULL, NULL);
    }
  }
  #endif

  return true;
 80037c0:	2301      	movs	r3, #1
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <cdcd_reset>:

void cdcd_reset(uint8_t rhport) {
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 80037d6:	2300      	movs	r3, #0
 80037d8:	73fb      	strb	r3, [r7, #15]
 80037da:	e02c      	b.n	8003836 <cdcd_reset+0x6a>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	22a8      	movs	r2, #168	@ 0xa8
 80037e0:	fb02 f303 	mul.w	r3, r2, r3
 80037e4:	4a18      	ldr	r2, [pc, #96]	@ (8003848 <cdcd_reset+0x7c>)
 80037e6:	4413      	add	r3, r2
 80037e8:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 80037ea:	2205      	movs	r2, #5
 80037ec:	2100      	movs	r1, #0
 80037ee:	68b8      	ldr	r0, [r7, #8]
 80037f0:	f004 ff47 	bl	8008682 <memset>
    if (!_cdcd_fifo_cfg.rx_persistent) {
 80037f4:	4b15      	ldr	r3, [pc, #84]	@ (800384c <cdcd_reset+0x80>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d104      	bne.n	800380c <cdcd_reset+0x40>
      tu_fifo_clear(&p_cdc->rx_ff);
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	3310      	adds	r3, #16
 8003806:	4618      	mov	r0, r3
 8003808:	f001 f8c6 	bl	8004998 <tu_fifo_clear>
    }
    if (!_cdcd_fifo_cfg.tx_persistent) {
 800380c:	4b0f      	ldr	r3, [pc, #60]	@ (800384c <cdcd_reset+0x80>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d104      	bne.n	8003824 <cdcd_reset+0x58>
      tu_fifo_clear(&p_cdc->tx_ff);
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	331c      	adds	r3, #28
 800381e:	4618      	mov	r0, r3
 8003820:	f001 f8ba 	bl	8004998 <tu_fifo_clear>
    }
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	331c      	adds	r3, #28
 8003828:	2101      	movs	r1, #1
 800382a:	4618      	mov	r0, r3
 800382c:	f001 f8c5 	bl	80049ba <tu_fifo_set_overwritable>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	3301      	adds	r3, #1
 8003834:	73fb      	strb	r3, [r7, #15]
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d9cf      	bls.n	80037dc <cdcd_reset+0x10>
  }
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	200005c0 	.word	0x200005c0
 800384c:	20000810 	.word	0x20000810

08003850 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 8003850:	b580      	push	{r7, lr}
 8003852:	b09a      	sub	sp, #104	@ 0x68
 8003854:	af02      	add	r7, sp, #8
 8003856:	4603      	mov	r3, r0
 8003858:	6039      	str	r1, [r7, #0]
 800385a:	71fb      	strb	r3, [r7, #7]
 800385c:	4613      	mov	r3, r2
 800385e:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	795b      	ldrb	r3, [r3, #5]
 8003864:	2b02      	cmp	r3, #2
 8003866:	d103      	bne.n	8003870 <cdcd_open+0x20>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	799b      	ldrb	r3, [r3, #6]
 800386c:	2b02      	cmp	r3, #2
 800386e:	d001      	beq.n	8003874 <cdcd_open+0x24>
 8003870:	2300      	movs	r3, #0
 8003872:	e0da      	b.n	8003a2a <cdcd_open+0x1da>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t* p_cdc;
  uint8_t cdc_id;
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8003874:	2300      	movs	r3, #0
 8003876:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800387a:	e010      	b.n	800389e <cdcd_open+0x4e>
    p_cdc = &_cdcd_itf[cdc_id];
 800387c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003880:	22a8      	movs	r2, #168	@ 0xa8
 8003882:	fb02 f303 	mul.w	r3, r2, r3
 8003886:	4a6b      	ldr	r2, [pc, #428]	@ (8003a34 <cdcd_open+0x1e4>)
 8003888:	4413      	add	r3, r2
 800388a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (p_cdc->ep_in == 0) {
 800388c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800388e:	789b      	ldrb	r3, [r3, #2]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d009      	beq.n	80038a8 <cdcd_open+0x58>
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8003894:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003898:	3301      	adds	r3, #1
 800389a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800389e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d9ea      	bls.n	800387c <cdcd_open+0x2c>
 80038a6:	e000      	b.n	80038aa <cdcd_open+0x5a>
      break;
 80038a8:	bf00      	nop
    }
  }
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);
 80038aa:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d90a      	bls.n	80038c8 <cdcd_open+0x78>
 80038b2:	4b61      	ldr	r3, [pc, #388]	@ (8003a38 <cdcd_open+0x1e8>)
 80038b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80038b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d000      	beq.n	80038c4 <cdcd_open+0x74>
 80038c2:	be00      	bkpt	0x0000
 80038c4:	2300      	movs	r3, #0
 80038c6:	e0b0      	b.n	8003a2a <cdcd_open+0x1da>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	789a      	ldrb	r2, [r3, #2]
 80038cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038ce:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 80038d0:	2309      	movs	r3, #9
 80038d2:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	643b      	str	r3, [r7, #64]	@ 0x40
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 80038da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 80038de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038e6:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(itf_desc);
 80038e8:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 80038ea:	e013      	b.n	8003914 <cdcd_open+0xc4>
 80038ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ee:	633b      	str	r3, [r7, #48]	@ 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80038f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f2:	781b      	ldrb	r3, [r3, #0]
    drv_len += tu_desc_len(p_desc);
 80038f4:	461a      	mov	r2, r3
 80038f6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80038fa:	4413      	add	r3, r2
 80038fc:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8003900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003902:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003906:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003910:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8003912:	657b      	str	r3, [r7, #84]	@ 0x54
 8003914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003916:	62fb      	str	r3, [r7, #44]	@ 0x2c
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8003918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391a:	3301      	adds	r3, #1
 800391c:	781b      	ldrb	r3, [r3, #0]
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 800391e:	2b24      	cmp	r3, #36	@ 0x24
 8003920:	d104      	bne.n	800392c <cdcd_open+0xdc>
 8003922:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8003926:	88bb      	ldrh	r3, [r7, #4]
 8003928:	429a      	cmp	r2, r3
 800392a:	d9df      	bls.n	80038ec <cdcd_open+0x9c>
 800392c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800392e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003932:	3301      	adds	r3, #1
 8003934:	781b      	ldrb	r3, [r3, #0]
  }

  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 8003936:	2b05      	cmp	r3, #5
 8003938:	d12f      	bne.n	800399a <cdcd_open+0x14a>
    // notification endpoint
    const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 800393a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800393c:	653b      	str	r3, [r7, #80]	@ 0x50

    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003942:	4618      	mov	r0, r3
 8003944:	f002 fb20 	bl	8005f88 <usbd_edpt_open>
 8003948:	4603      	mov	r3, r0
 800394a:	f083 0301 	eor.w	r3, r3, #1
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <cdcd_open+0x11a>
 8003954:	4b38      	ldr	r3, [pc, #224]	@ (8003a38 <cdcd_open+0x1e8>)
 8003956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d000      	beq.n	8003966 <cdcd_open+0x116>
 8003964:	be00      	bkpt	0x0000
 8003966:	2300      	movs	r3, #0
 8003968:	e05f      	b.n	8003a2a <cdcd_open+0x1da>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 800396a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800396c:	789a      	ldrb	r2, [r3, #2]
 800396e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003970:	705a      	strb	r2, [r3, #1]
 8003972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003974:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 800397a:	461a      	mov	r2, r3
 800397c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8003980:	4413      	add	r3, r2
 8003982:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8003986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003988:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 800398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398c:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8003998:	657b      	str	r3, [r7, #84]	@ 0x54
 800399a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800399c:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	3301      	adds	r3, #1
 80039a2:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d139      	bne.n	8003a1c <cdcd_open+0x1cc>
      (TUSB_CLASS_CDC_DATA == ((const tusb_desc_interface_t*) p_desc)->bInterfaceClass)) {
 80039a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039aa:	795b      	ldrb	r3, [r3, #5]
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 80039ac:	2b0a      	cmp	r3, #10
 80039ae:	d135      	bne.n	8003a1c <cdcd_open+0x1cc>
 80039b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b2:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	781b      	ldrb	r3, [r3, #0]
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 80039b8:	461a      	mov	r2, r3
 80039ba:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80039be:	4413      	add	r3, r2
 80039c0:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 80039c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039c6:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	461a      	mov	r2, r3
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 80039d6:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
 80039d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039da:	3303      	adds	r3, #3
 80039dc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80039de:	3202      	adds	r2, #2
 80039e0:	79f8      	ldrb	r0, [r7, #7]
 80039e2:	9201      	str	r2, [sp, #4]
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	2302      	movs	r3, #2
 80039e8:	2202      	movs	r2, #2
 80039ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039ec:	f002 fa64 	bl	8005eb8 <usbd_open_edpt_pair>
 80039f0:	4603      	mov	r3, r0
 80039f2:	f083 0301 	eor.w	r3, r3, #1
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <cdcd_open+0x1c2>
 80039fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003a38 <cdcd_open+0x1e8>)
 80039fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d000      	beq.n	8003a0e <cdcd_open+0x1be>
 8003a0c:	be00      	bkpt	0x0000
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e00b      	b.n	8003a2a <cdcd_open+0x1da>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
 8003a12:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8003a16:	330e      	adds	r3, #14
 8003a18:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 8003a1c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fd13 	bl	800344c <_prep_out_transaction>

  return drv_len;
 8003a26:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3760      	adds	r7, #96	@ 0x60
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	200005c0 	.word	0x200005c0
 8003a38:	e000edf0 	.word	0xe000edf0

08003a3c <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	@ 0x28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	603a      	str	r2, [r7, #0]
 8003a46:	71fb      	strb	r3, [r7, #7]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b20      	cmp	r3, #32
 8003a58:	d001      	beq.n	8003a5e <cdcd_control_xfer_cb+0x22>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e0d7      	b.n	8003c0e <cdcd_control_xfer_cb+0x1d2>

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003a64:	e014      	b.n	8003a90 <cdcd_control_xfer_cb+0x54>
    p_cdc = &_cdcd_itf[itf];
 8003a66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a6a:	22a8      	movs	r2, #168	@ 0xa8
 8003a6c:	fb02 f303 	mul.w	r3, r2, r3
 8003a70:	4a69      	ldr	r2, [pc, #420]	@ (8003c18 <cdcd_control_xfer_cb+0x1dc>)
 8003a72:	4413      	add	r3, r2
 8003a74:	623b      	str	r3, [r7, #32]
    if (p_cdc->itf_num == request->wIndex) {
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	889b      	ldrh	r3, [r3, #4]
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d009      	beq.n	8003a9a <cdcd_control_xfer_cb+0x5e>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8003a86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003a90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d9e6      	bls.n	8003a66 <cdcd_control_xfer_cb+0x2a>
 8003a98:	e000      	b.n	8003a9c <cdcd_control_xfer_cb+0x60>
      break;
 8003a9a:	bf00      	nop
    }
  }
  TU_VERIFY(itf < CFG_TUD_CDC);
 8003a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d901      	bls.n	8003aa8 <cdcd_control_xfer_cb+0x6c>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e0b2      	b.n	8003c0e <cdcd_control_xfer_cb+0x1d2>

  switch (request->bRequest) {
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	785b      	ldrb	r3, [r3, #1]
 8003aac:	3b20      	subs	r3, #32
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	f200 80a3 	bhi.w	8003bfa <cdcd_control_xfer_cb+0x1be>
 8003ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8003abc <cdcd_control_xfer_cb+0x80>)
 8003ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aba:	bf00      	nop
 8003abc:	08003acd 	.word	0x08003acd
 8003ac0:	08003b09 	.word	0x08003b09
 8003ac4:	08003b21 	.word	0x08003b21
 8003ac8:	08003bc9 	.word	0x08003bc9
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8003acc:	79bb      	ldrb	r3, [r7, #6]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d108      	bne.n	8003ae4 <cdcd_control_xfer_cb+0xa8>
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	f103 0208 	add.w	r2, r3, #8
 8003ad8:	79f8      	ldrb	r0, [r7, #7]
 8003ada:	2307      	movs	r3, #7
 8003adc:	6839      	ldr	r1, [r7, #0]
 8003ade:	f002 fca3 	bl	8006428 <tud_control_xfer>
      } else if (stage == CONTROL_STAGE_ACK) {
        if (tud_cdc_line_coding_cb) {
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
        }
      }
      break;
 8003ae2:	e08c      	b.n	8003bfe <cdcd_control_xfer_cb+0x1c2>
      } else if (stage == CONTROL_STAGE_ACK) {
 8003ae4:	79bb      	ldrb	r3, [r7, #6]
 8003ae6:	2b03      	cmp	r3, #3
 8003ae8:	f040 8089 	bne.w	8003bfe <cdcd_control_xfer_cb+0x1c2>
        if (tud_cdc_line_coding_cb) {
 8003aec:	4b4b      	ldr	r3, [pc, #300]	@ (8003c1c <cdcd_control_xfer_cb+0x1e0>)
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 8085 	beq.w	8003bfe <cdcd_control_xfer_cb+0x1c2>
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	f103 0208 	add.w	r2, r3, #8
 8003afa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003afe:	4611      	mov	r1, r2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f3af 8000 	nop.w
      break;
 8003b06:	e07a      	b.n	8003bfe <cdcd_control_xfer_cb+0x1c2>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8003b08:	79bb      	ldrb	r3, [r7, #6]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d179      	bne.n	8003c02 <cdcd_control_xfer_cb+0x1c6>
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	f103 0208 	add.w	r2, r3, #8
 8003b14:	79f8      	ldrb	r0, [r7, #7]
 8003b16:	2307      	movs	r3, #7
 8003b18:	6839      	ldr	r1, [r7, #0]
 8003b1a:	f002 fc85 	bl	8006428 <tud_control_xfer>
      }
      break;
 8003b1e:	e070      	b.n	8003c02 <cdcd_control_xfer_cb+0x1c6>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP) {
 8003b20:	79bb      	ldrb	r3, [r7, #6]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d105      	bne.n	8003b32 <cdcd_control_xfer_cb+0xf6>
        tud_control_status(rhport, request);
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	6839      	ldr	r1, [r7, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f002 fc0a 	bl	8006344 <tud_control_status>
        // Invoke callback
        if (tud_cdc_line_state_cb) {
          tud_cdc_line_state_cb(itf, dtr, rts);
        }
      }
      break;
 8003b30:	e069      	b.n	8003c06 <cdcd_control_xfer_cb+0x1ca>
      } else if (stage == CONTROL_STAGE_ACK) {
 8003b32:	79bb      	ldrb	r3, [r7, #6]
 8003b34:	2b03      	cmp	r3, #3
 8003b36:	d166      	bne.n	8003c06 <cdcd_control_xfer_cb+0x1ca>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	885b      	ldrh	r3, [r3, #2]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	2300      	movs	r3, #0
 8003b42:	73fb      	strb	r3, [r7, #15]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bf14      	ite	ne
 8003b54:	2301      	movne	r3, #1
 8003b56:	2300      	moveq	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	885b      	ldrh	r3, [r3, #2]
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	61bb      	str	r3, [r7, #24]
 8003b64:	2301      	movs	r3, #1
 8003b66:	75fb      	strb	r3, [r7, #23]
 8003b68:	7dfb      	ldrb	r3, [r7, #23]
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	bf14      	ite	ne
 8003b78:	2301      	movne	r3, #1
 8003b7a:	2300      	moveq	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	885b      	ldrh	r3, [r3, #2]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	f103 021c 	add.w	r2, r3, #28
 8003b92:	7ffb      	ldrb	r3, [r7, #31]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	bf14      	ite	ne
 8003b98:	2301      	movne	r3, #1
 8003b9a:	2300      	moveq	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	f083 0301 	eor.w	r3, r3, #1
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	4619      	mov	r1, r3
 8003bac:	4610      	mov	r0, r2
 8003bae:	f000 ff04 	bl	80049ba <tu_fifo_set_overwritable>
        if (tud_cdc_line_state_cb) {
 8003bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c20 <cdcd_control_xfer_cb+0x1e4>)
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d026      	beq.n	8003c06 <cdcd_control_xfer_cb+0x1ca>
          tud_cdc_line_state_cb(itf, dtr, rts);
 8003bb8:	7fba      	ldrb	r2, [r7, #30]
 8003bba:	7ff9      	ldrb	r1, [r7, #31]
 8003bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f3af 8000 	nop.w
      break;
 8003bc6:	e01e      	b.n	8003c06 <cdcd_control_xfer_cb+0x1ca>

    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP) {
 8003bc8:	79bb      	ldrb	r3, [r7, #6]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d105      	bne.n	8003bda <cdcd_control_xfer_cb+0x19e>
        tud_control_status(rhport, request);
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	6839      	ldr	r1, [r7, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f002 fbb6 	bl	8006344 <tud_control_status>
        TU_LOG_DRV("  Send Break\r\n");
        if (tud_cdc_send_break_cb) {
          tud_cdc_send_break_cb(itf, request->wValue);
        }
      }
      break;
 8003bd8:	e017      	b.n	8003c0a <cdcd_control_xfer_cb+0x1ce>
      } else if (stage == CONTROL_STAGE_ACK) {
 8003bda:	79bb      	ldrb	r3, [r7, #6]
 8003bdc:	2b03      	cmp	r3, #3
 8003bde:	d114      	bne.n	8003c0a <cdcd_control_xfer_cb+0x1ce>
        if (tud_cdc_send_break_cb) {
 8003be0:	4b10      	ldr	r3, [pc, #64]	@ (8003c24 <cdcd_control_xfer_cb+0x1e8>)
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d011      	beq.n	8003c0a <cdcd_control_xfer_cb+0x1ce>
          tud_cdc_send_break_cb(itf, request->wValue);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	885b      	ldrh	r3, [r3, #2]
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bf0:	4611      	mov	r1, r2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f3af 8000 	nop.w
      break;
 8003bf8:	e007      	b.n	8003c0a <cdcd_control_xfer_cb+0x1ce>

    default:
      return false; // stall unsupported request
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e007      	b.n	8003c0e <cdcd_control_xfer_cb+0x1d2>
      break;
 8003bfe:	bf00      	nop
 8003c00:	e004      	b.n	8003c0c <cdcd_control_xfer_cb+0x1d0>
      break;
 8003c02:	bf00      	nop
 8003c04:	e002      	b.n	8003c0c <cdcd_control_xfer_cb+0x1d0>
      break;
 8003c06:	bf00      	nop
 8003c08:	e000      	b.n	8003c0c <cdcd_control_xfer_cb+0x1d0>
      break;
 8003c0a:	bf00      	nop
  }

  return true;
 8003c0c:	2301      	movs	r3, #1
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3728      	adds	r7, #40	@ 0x28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	200005c0 	.word	0x200005c0
	...

08003c28 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	4603      	mov	r3, r0
 8003c32:	71fb      	strb	r3, [r7, #7]
 8003c34:	460b      	mov	r3, r1
 8003c36:	71bb      	strb	r3, [r7, #6]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	77fb      	strb	r3, [r7, #31]
 8003c40:	e013      	b.n	8003c6a <cdcd_xfer_cb+0x42>
    p_cdc = &_cdcd_itf[itf];
 8003c42:	7ffb      	ldrb	r3, [r7, #31]
 8003c44:	22a8      	movs	r2, #168	@ 0xa8
 8003c46:	fb02 f303 	mul.w	r3, r2, r3
 8003c4a:	4a56      	ldr	r2, [pc, #344]	@ (8003da4 <cdcd_xfer_cb+0x17c>)
 8003c4c:	4413      	add	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in)) {
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	78db      	ldrb	r3, [r3, #3]
 8003c54:	79ba      	ldrb	r2, [r7, #6]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d00a      	beq.n	8003c70 <cdcd_xfer_cb+0x48>
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	789b      	ldrb	r3, [r3, #2]
 8003c5e:	79ba      	ldrb	r2, [r7, #6]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d005      	beq.n	8003c70 <cdcd_xfer_cb+0x48>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8003c64:	7ffb      	ldrb	r3, [r7, #31]
 8003c66:	3301      	adds	r3, #1
 8003c68:	77fb      	strb	r3, [r7, #31]
 8003c6a:	7ffb      	ldrb	r3, [r7, #31]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d9e8      	bls.n	8003c42 <cdcd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 8003c70:	7ffb      	ldrb	r3, [r7, #31]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d90a      	bls.n	8003c8c <cdcd_xfer_cb+0x64>
 8003c76:	4b4c      	ldr	r3, [pc, #304]	@ (8003da8 <cdcd_xfer_cb+0x180>)
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d000      	beq.n	8003c88 <cdcd_xfer_cb+0x60>
 8003c86:	be00      	bkpt	0x0000
 8003c88:	2300      	movs	r3, #0
 8003c8a:	e087      	b.n	8003d9c <cdcd_xfer_cb+0x174>
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8003c8c:	7ffb      	ldrb	r3, [r7, #31]
 8003c8e:	01db      	lsls	r3, r3, #7
 8003c90:	4a46      	ldr	r2, [pc, #280]	@ (8003dac <cdcd_xfer_cb+0x184>)
 8003c92:	4413      	add	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	78db      	ldrb	r3, [r3, #3]
 8003c9a:	79ba      	ldrb	r2, [r7, #6]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d148      	bne.n	8003d32 <cdcd_xfer_cb+0x10a>
    tu_fifo_write_n(&p_cdc->rx_ff, p_epbuf->epout, (uint16_t) xferred_bytes);
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	3310      	adds	r3, #16
 8003ca4:	6939      	ldr	r1, [r7, #16]
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	b292      	uxth	r2, r2
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fe50 	bl	8004950 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 8003cb0:	4b3f      	ldr	r3, [pc, #252]	@ (8003db0 <cdcd_xfer_cb+0x188>)
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d027      	beq.n	8003d06 <cdcd_xfer_cb+0xde>
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	795b      	ldrb	r3, [r3, #5]
 8003cba:	2bff      	cmp	r3, #255	@ 0xff
 8003cbc:	d023      	beq.n	8003d06 <cdcd_xfer_cb+0xde>
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	e01c      	b.n	8003cfe <cdcd_xfer_cb+0xd6>
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	795a      	ldrb	r2, [r3, #5]
 8003cc8:	6939      	ldr	r1, [r7, #16]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	440b      	add	r3, r1
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d111      	bne.n	8003cf8 <cdcd_xfer_cb+0xd0>
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	3310      	adds	r3, #16
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 fd33 	bl	8004744 <tu_fifo_empty>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f083 0301 	eor.w	r3, r3, #1
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d006      	beq.n	8003cf8 <cdcd_xfer_cb+0xd0>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	795a      	ldrb	r2, [r3, #5]
 8003cee:	7ffb      	ldrb	r3, [r7, #31]
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d3de      	bcc.n	8003cc4 <cdcd_xfer_cb+0x9c>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8003d06:	4b2b      	ldr	r3, [pc, #172]	@ (8003db4 <cdcd_xfer_cb+0x18c>)
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00e      	beq.n	8003d2a <cdcd_xfer_cb+0x102>
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	3310      	adds	r3, #16
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fd17 	bl	8004744 <tu_fifo_empty>
 8003d16:	4603      	mov	r3, r0
 8003d18:	f083 0301 	eor.w	r3, r3, #1
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <cdcd_xfer_cb+0x102>
      tud_cdc_rx_cb(itf);
 8003d22:	7ffb      	ldrb	r3, [r7, #31]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f3af 8000 	nop.w
    }

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 8003d2a:	7ffb      	ldrb	r3, [r7, #31]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff fb8d 	bl	800344c <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	789b      	ldrb	r3, [r3, #2]
 8003d36:	79ba      	ldrb	r2, [r7, #6]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d12e      	bne.n	8003d9a <cdcd_xfer_cb+0x172>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) {
 8003d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8003db8 <cdcd_xfer_cb+0x190>)
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <cdcd_xfer_cb+0x122>
      tud_cdc_tx_complete_cb(itf);
 8003d42:	7ffb      	ldrb	r3, [r7, #31]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f3af 8000 	nop.w
    }

    if (0 == tud_cdc_n_write_flush(itf)) {
 8003d4a:	7ffb      	ldrb	r3, [r7, #31]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff fc63 	bl	8003618 <tud_cdc_n_write_flush>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d120      	bne.n	8003d9a <cdcd_xfer_cb+0x172>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	331c      	adds	r3, #28
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fcbf 	bl	80046e0 <tu_fifo_count>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d118      	bne.n	8003d9a <cdcd_xfer_cb+0x172>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d015      	beq.n	8003d9a <cdcd_xfer_cb+0x172>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d110      	bne.n	8003d9a <cdcd_xfer_cb+0x172>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	789a      	ldrb	r2, [r3, #2]
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f002 f947 	bl	8006014 <usbd_edpt_claim>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d006      	beq.n	8003d9a <cdcd_xfer_cb+0x172>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	7899      	ldrb	r1, [r3, #2]
 8003d90:	79f8      	ldrb	r0, [r7, #7]
 8003d92:	2300      	movs	r3, #0
 8003d94:	2200      	movs	r2, #0
 8003d96:	f002 f98d 	bl	80060b4 <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 8003d9a:	2301      	movs	r3, #1
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3720      	adds	r7, #32
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	200005c0 	.word	0x200005c0
 8003da8:	e000edf0 	.word	0xe000edf0
 8003dac:	20000710 	.word	0x20000710
	...

08003dbc <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	461a      	mov	r2, r3
 8003dca:	460b      	mov	r3, r1
 8003dcc:	80fb      	strh	r3, [r7, #6]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dd8:	d901      	bls.n	8003dde <tu_fifo_config+0x22>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e01b      	b.n	8003e16 <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	88fa      	ldrh	r2, [r7, #6]
 8003de8:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 8003dea:	88bb      	ldrh	r3, [r7, #4]
 8003dec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003df0:	b299      	uxth	r1, r3
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	88d3      	ldrh	r3, [r2, #6]
 8003df6:	f361 030e 	bfi	r3, r1, #0, #15
 8003dfa:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	79d3      	ldrb	r3, [r2, #7]
 8003e00:	7e39      	ldrb	r1, [r7, #24]
 8003e02:	f361 13c7 	bfi	r3, r1, #7, #1
 8003e06:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8003e14:	2301      	movs	r3, #1
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <_ff_push_const_addr>:
#ifdef TUP_MEM_CONST_ADDR
// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b08a      	sub	sp, #40	@ 0x28
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8003e34:	88fb      	ldrh	r3, [r7, #6]
 8003e36:	089b      	lsrs	r3, r3, #2
 8003e38:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8003e3a:	e00b      	b.n	8003e54 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	61ba      	str	r2, [r7, #24]
 8003e44:	617b      	str	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	601a      	str	r2, [r3, #0]
}
 8003e4c:	bf00      	nop
    ff_buf += 4;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3304      	adds	r3, #4
 8003e52:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8003e54:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003e56:	1e5a      	subs	r2, r3, #1
 8003e58:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1ee      	bne.n	8003e3c <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8003e5e:	88fb      	ldrh	r3, [r7, #6]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8003e68:	7ffb      	ldrb	r3, [r7, #31]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d009      	beq.n	8003e82 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8003e74:	7ffa      	ldrb	r2, [r7, #31]
 8003e76:	f107 0310 	add.w	r3, r7, #16
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f004 fc2d 	bl	80086dc <memcpy>
  }
}
 8003e82:	bf00      	nop
 8003e84:	3728      	adds	r7, #40	@ 0x28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b08a      	sub	sp, #40	@ 0x28
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	4613      	mov	r3, r2
 8003e96:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8003e9c:	88fb      	ldrh	r3, [r7, #6]
 8003e9e:	089b      	lsrs	r3, r3, #2
 8003ea0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8003ea2:	e008      	b.n	8003eb6 <_ff_pull_const_addr+0x2c>
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 8003eb6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003eb8:	1e5a      	subs	r2, r3, #1
 8003eba:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1f1      	bne.n	8003ea4 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8003ec0:	88fb      	ldrh	r3, [r7, #6]
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8003eca:	7ffb      	ldrb	r3, [r7, #31]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00b      	beq.n	8003ee8 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8003ed4:	7ffa      	ldrb	r2, [r7, #31]
 8003ed6:	f107 0314 	add.w	r3, r7, #20
 8003eda:	68b9      	ldr	r1, [r7, #8]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f004 fbfd 	bl	80086dc <memcpy>

    *reg_tx = tmp32;
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	601a      	str	r2, [r3, #0]
  }
}
 8003ee8:	bf00      	nop
 8003eea:	3728      	adds	r7, #40	@ 0x28
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <_ff_push>:
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	4613      	mov	r3, r2
 8003efc:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	88fa      	ldrh	r2, [r7, #6]
 8003f04:	68f9      	ldr	r1, [r7, #12]
 8003f06:	88c9      	ldrh	r1, [r1, #6]
 8003f08:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8003f0c:	b289      	uxth	r1, r1
 8003f0e:	fb01 f202 	mul.w	r2, r1, r2
 8003f12:	1898      	adds	r0, r3, r2
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	88db      	ldrh	r3, [r3, #6]
 8003f18:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	68b9      	ldr	r1, [r7, #8]
 8003f22:	f004 fbdb 	bl	80086dc <memcpy>
}
 8003f26:	bf00      	nop
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b08e      	sub	sp, #56	@ 0x38
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	4611      	mov	r1, r2
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	80fb      	strh	r3, [r7, #6]
 8003f40:	4613      	mov	r3, r2
 8003f42:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	889a      	ldrh	r2, [r3, #4]
 8003f48:	88bb      	ldrh	r3, [r7, #4]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 8003f4e:	88fa      	ldrh	r2, [r7, #6]
 8003f50:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	88db      	ldrh	r3, [r3, #6]
 8003f5a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	461a      	mov	r2, r3
 8003f62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003f64:	fb13 f302 	smulbb	r3, r3, r2
 8003f68:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	88db      	ldrh	r3, [r3, #6]
 8003f6e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f78:	fb13 f302 	smulbb	r3, r3, r2
 8003f7c:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	88ba      	ldrh	r2, [r7, #4]
 8003f84:	68f9      	ldr	r1, [r7, #12]
 8003f86:	88c9      	ldrh	r1, [r1, #6]
 8003f88:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8003f8c:	b289      	uxth	r1, r1
 8003f8e:	fb01 f202 	mul.w	r2, r1, r2
 8003f92:	4413      	add	r3, r2
 8003f94:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8003f96:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <_ff_push_n+0x76>
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d022      	beq.n	8003fe8 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 8003fa2:	e09e      	b.n	80040e2 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8003fa4:	88fa      	ldrh	r2, [r7, #6]
 8003fa6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d80d      	bhi.n	8003fc8 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	88d2      	ldrh	r2, [r2, #6]
 8003fb2:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8003fb6:	b292      	uxth	r2, r2
 8003fb8:	fb02 f303 	mul.w	r3, r2, r3
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	68b9      	ldr	r1, [r7, #8]
 8003fc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fc2:	f004 fb8b 	bl	80086dc <memcpy>
      break;
 8003fc6:	e08c      	b.n	80040e2 <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 8003fc8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003fca:	461a      	mov	r2, r3
 8003fcc:	68b9      	ldr	r1, [r7, #8]
 8003fce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003fd0:	f004 fb84 	bl	80086dc <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	4413      	add	r3, r2
 8003fde:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	f004 fb7b 	bl	80086dc <memcpy>
      break;
 8003fe6:	e07c      	b.n	80040e2 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8003fe8:	88fa      	ldrh	r2, [r7, #6]
 8003fea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d80f      	bhi.n	8004010 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	88db      	ldrh	r3, [r3, #6]
 8003ff4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	88fb      	ldrh	r3, [r7, #6]
 8003ffe:	fb13 f302 	smulbb	r3, r3, r2
 8004002:	b29b      	uxth	r3, r3
 8004004:	461a      	mov	r2, r3
 8004006:	68b9      	ldr	r1, [r7, #8]
 8004008:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800400a:	f7ff ff0a 	bl	8003e22 <_ff_push_const_addr>
      break;
 800400e:	e067      	b.n	80040e0 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8004010:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004012:	f023 0303 	bic.w	r3, r3, #3
 8004016:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8004018:	8c3b      	ldrh	r3, [r7, #32]
 800401a:	461a      	mov	r2, r3
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004020:	f7ff feff 	bl	8003e22 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8004024:	8c3b      	ldrh	r3, [r7, #32]
 8004026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004028:	4413      	add	r3, r2
 800402a:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 800402c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800402e:	b2db      	uxtb	r3, r3
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8004038:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800403c:	2b00      	cmp	r3, #0
 800403e:	d043      	beq.n	80040c8 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8004044:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004048:	b29b      	uxth	r3, r3
 800404a:	f1c3 0304 	rsb	r3, r3, #4
 800404e:	b29a      	uxth	r2, r3
 8004050:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004052:	837b      	strh	r3, [r7, #26]
 8004054:	4613      	mov	r3, r2
 8004056:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8004058:	8b7a      	ldrh	r2, [r7, #26]
 800405a:	8b3b      	ldrh	r3, [r7, #24]
 800405c:	4293      	cmp	r3, r2
 800405e:	bf28      	it	cs
 8004060:	4613      	movcs	r3, r2
 8004062:	b29b      	uxth	r3, r3
 8004064:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8004068:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800406c:	b29b      	uxth	r3, r3
 800406e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 800407a:	f107 0314 	add.w	r3, r7, #20
 800407e:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8004080:	e007      	b.n	8004092 <_ff_push_n+0x164>
 8004082:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004084:	1c53      	adds	r3, r2, #1
 8004086:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408a:	1c59      	adds	r1, r3, #1
 800408c:	6339      	str	r1, [r7, #48]	@ 0x30
 800408e:	7812      	ldrb	r2, [r2, #0]
 8004090:	701a      	strb	r2, [r3, #0]
 8004092:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004096:	1e5a      	subs	r2, r3, #1
 8004098:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1f0      	bne.n	8004082 <_ff_push_n+0x154>
          ff_buf = f->buffer;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 80040a6:	e007      	b.n	80040b8 <_ff_push_n+0x18a>
 80040a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040aa:	1c53      	adds	r3, r2, #1
 80040ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b0:	1c59      	adds	r1, r3, #1
 80040b2:	6339      	str	r1, [r7, #48]	@ 0x30
 80040b4:	7812      	ldrb	r2, [r2, #0]
 80040b6:	701a      	strb	r2, [r3, #0]
 80040b8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80040bc:	1e5a      	subs	r2, r3, #1
 80040be:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f0      	bne.n	80040a8 <_ff_push_n+0x17a>
 80040c6:	e002      	b.n	80040ce <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 80040ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <_ff_push_n+0x1b2>
 80040d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80040d6:	461a      	mov	r2, r3
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040dc:	f7ff fea1 	bl	8003e22 <_ff_push_const_addr>
      break;
 80040e0:	bf00      	nop
  }
}
 80040e2:	bf00      	nop
 80040e4:	3738      	adds	r7, #56	@ 0x38
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	4613      	mov	r3, r2
 80040f6:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	88fa      	ldrh	r2, [r7, #6]
 80040fe:	68f9      	ldr	r1, [r7, #12]
 8004100:	88c9      	ldrh	r1, [r1, #6]
 8004102:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8004106:	b289      	uxth	r1, r1
 8004108:	fb01 f202 	mul.w	r2, r1, r2
 800410c:	1899      	adds	r1, r3, r2
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	88db      	ldrh	r3, [r3, #6]
 8004112:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004116:	b29b      	uxth	r3, r3
 8004118:	461a      	mov	r2, r3
 800411a:	68b8      	ldr	r0, [r7, #8]
 800411c:	f004 fade 	bl	80086dc <memcpy>
}
 8004120:	bf00      	nop
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08e      	sub	sp, #56	@ 0x38
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	4611      	mov	r1, r2
 8004134:	461a      	mov	r2, r3
 8004136:	460b      	mov	r3, r1
 8004138:	80fb      	strh	r3, [r7, #6]
 800413a:	4613      	mov	r3, r2
 800413c:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	889a      	ldrh	r2, [r3, #4]
 8004142:	88bb      	ldrh	r3, [r7, #4]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8004148:	88fa      	ldrh	r2, [r7, #6]
 800414a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	88db      	ldrh	r3, [r3, #6]
 8004154:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004158:	b29b      	uxth	r3, r3
 800415a:	461a      	mov	r2, r3
 800415c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800415e:	fb13 f302 	smulbb	r3, r3, r2
 8004162:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	88db      	ldrh	r3, [r3, #6]
 8004168:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800416c:	b29b      	uxth	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004172:	fb13 f302 	smulbb	r3, r3, r2
 8004176:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	88ba      	ldrh	r2, [r7, #4]
 800417e:	68f9      	ldr	r1, [r7, #12]
 8004180:	88c9      	ldrh	r1, [r1, #6]
 8004182:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8004186:	b289      	uxth	r1, r1
 8004188:	fb01 f202 	mul.w	r2, r1, r2
 800418c:	4413      	add	r3, r2
 800418e:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8004190:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <_ff_pull_n+0x76>
 8004198:	2b01      	cmp	r3, #1
 800419a:	d022      	beq.n	80041e2 <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 800419c:	e0a0      	b.n	80042e0 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 800419e:	88fa      	ldrh	r2, [r7, #6]
 80041a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d80d      	bhi.n	80041c2 <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	88d2      	ldrh	r2, [r2, #6]
 80041ac:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80041b0:	b292      	uxth	r2, r2
 80041b2:	fb02 f303 	mul.w	r3, r2, r3
 80041b6:	461a      	mov	r2, r3
 80041b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041ba:	68b8      	ldr	r0, [r7, #8]
 80041bc:	f004 fa8e 	bl	80086dc <memcpy>
    break;
 80041c0:	e08e      	b.n	80042e0 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 80041c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80041c4:	461a      	mov	r2, r3
 80041c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041c8:	68b8      	ldr	r0, [r7, #8]
 80041ca:	f004 fa87 	bl	80086dc <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 80041ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	18d0      	adds	r0, r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80041da:	4619      	mov	r1, r3
 80041dc:	f004 fa7e 	bl	80086dc <memcpy>
    break;
 80041e0:	e07e      	b.n	80042e0 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 80041e2:	88fa      	ldrh	r2, [r7, #6]
 80041e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d80f      	bhi.n	800420a <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	88db      	ldrh	r3, [r3, #6]
 80041ee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	461a      	mov	r2, r3
 80041f6:	88fb      	ldrh	r3, [r7, #6]
 80041f8:	fb13 f302 	smulbb	r3, r3, r2
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	461a      	mov	r2, r3
 8004200:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004202:	68b8      	ldr	r0, [r7, #8]
 8004204:	f7ff fe41 	bl	8003e8a <_ff_pull_const_addr>
    break;
 8004208:	e069      	b.n	80042de <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 800420a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800420c:	f023 0303 	bic.w	r3, r3, #3
 8004210:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 8004212:	8c3b      	ldrh	r3, [r7, #32]
 8004214:	461a      	mov	r2, r3
 8004216:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004218:	68b8      	ldr	r0, [r7, #8]
 800421a:	f7ff fe36 	bl	8003e8a <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 800421e:	8c3b      	ldrh	r3, [r7, #32]
 8004220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004222:	4413      	add	r3, r2
 8004224:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8004226:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004228:	b2db      	uxtb	r3, r3
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8004232:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004236:	2b00      	cmp	r3, #0
 8004238:	d045      	beq.n	80042c6 <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800423e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004242:	b29b      	uxth	r3, r3
 8004244:	f1c3 0304 	rsb	r3, r3, #4
 8004248:	b29a      	uxth	r2, r3
 800424a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800424c:	837b      	strh	r3, [r7, #26]
 800424e:	4613      	mov	r3, r2
 8004250:	833b      	strh	r3, [r7, #24]
 8004252:	8b7a      	ldrh	r2, [r7, #26]
 8004254:	8b3b      	ldrh	r3, [r7, #24]
 8004256:	4293      	cmp	r3, r2
 8004258:	bf28      	it	cs
 800425a:	4613      	movcs	r3, r2
 800425c:	b29b      	uxth	r3, r3
 800425e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8004262:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004266:	b29b      	uxth	r3, r3
 8004268:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 800426e:	2300      	movs	r3, #0
 8004270:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 8004272:	f107 0314 	add.w	r3, r7, #20
 8004276:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8004278:	e007      	b.n	800428a <_ff_pull_n+0x162>
 800427a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800427c:	1c53      	adds	r3, r2, #1
 800427e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004282:	1c59      	adds	r1, r3, #1
 8004284:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004286:	7812      	ldrb	r2, [r2, #0]
 8004288:	701a      	strb	r2, [r3, #0]
 800428a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800428e:	1e5a      	subs	r2, r3, #1
 8004290:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1f0      	bne.n	800427a <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 800429e:	e007      	b.n	80042b0 <_ff_pull_n+0x188>
 80042a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042a2:	1c53      	adds	r3, r2, #1
 80042a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80042a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a8:	1c59      	adds	r1, r3, #1
 80042aa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80042ac:	7812      	ldrb	r2, [r2, #0]
 80042ae:	701a      	strb	r2, [r3, #0]
 80042b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80042b4:	1e5a      	subs	r2, r3, #1
 80042b6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1f0      	bne.n	80042a0 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	e002      	b.n	80042cc <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 80042cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d005      	beq.n	80042de <_ff_pull_n+0x1b6>
 80042d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80042d4:	461a      	mov	r2, r3
 80042d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80042d8:	68b8      	ldr	r0, [r7, #8]
 80042da:	f7ff fdd6 	bl	8003e8a <_ff_pull_const_addr>
    break;
 80042de:	bf00      	nop
  }
}
 80042e0:	bf00      	nop
 80042e2:	3738      	adds	r7, #56	@ 0x38
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	80fb      	strh	r3, [r7, #6]
 80042f2:	460b      	mov	r3, r1
 80042f4:	80bb      	strh	r3, [r7, #4]
 80042f6:	4613      	mov	r3, r2
 80042f8:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 80042fa:	88ba      	ldrh	r2, [r7, #4]
 80042fc:	887b      	ldrh	r3, [r7, #2]
 80042fe:	4413      	add	r3, r2
 8004300:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8004302:	88ba      	ldrh	r2, [r7, #4]
 8004304:	89fb      	ldrh	r3, [r7, #14]
 8004306:	429a      	cmp	r2, r3
 8004308:	d804      	bhi.n	8004314 <advance_index+0x2c>
 800430a:	89fa      	ldrh	r2, [r7, #14]
 800430c:	88fb      	ldrh	r3, [r7, #6]
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	429a      	cmp	r2, r3
 8004312:	db08      	blt.n	8004326 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8004314:	88fb      	ldrh	r3, [r7, #6]
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	b29b      	uxth	r3, r3
 800431a:	425b      	negs	r3, r3
 800431c:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800431e:	89fa      	ldrh	r2, [r7, #14]
 8004320:	89bb      	ldrh	r3, [r7, #12]
 8004322:	4413      	add	r3, r2
 8004324:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 8004326:	89fb      	ldrh	r3, [r7, #14]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08a      	sub	sp, #40	@ 0x28
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	4611      	mov	r1, r2
 8004340:	461a      	mov	r2, r3
 8004342:	460b      	mov	r3, r1
 8004344:	80fb      	strh	r3, [r7, #6]
 8004346:	4613      	mov	r3, r2
 8004348:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	889b      	ldrh	r3, [r3, #4]
 800434e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004350:	88fb      	ldrh	r3, [r7, #6]
 8004352:	843b      	strh	r3, [r7, #32]
 8004354:	88bb      	ldrh	r3, [r7, #4]
 8004356:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8004358:	8c3a      	ldrh	r2, [r7, #32]
 800435a:	8bfb      	ldrh	r3, [r7, #30]
 800435c:	429a      	cmp	r2, r3
 800435e:	d304      	bcc.n	800436a <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8004360:	8c3a      	ldrh	r2, [r7, #32]
 8004362:	8bfb      	ldrh	r3, [r7, #30]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	b29b      	uxth	r3, r3
 8004368:	e008      	b.n	800437c <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800436a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	8c39      	ldrh	r1, [r7, #32]
 8004372:	8bfb      	ldrh	r3, [r7, #30]
 8004374:	1acb      	subs	r3, r1, r3
 8004376:	b29b      	uxth	r3, r3
 8004378:	4413      	add	r3, r2
 800437a:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800437c:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 800437e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <_tu_fifo_peek+0x54>
 8004384:	2300      	movs	r3, #0
 8004386:	e037      	b.n	80043f8 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	889b      	ldrh	r3, [r3, #4]
 800438c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800438e:	429a      	cmp	r2, r3
 8004390:	d91b      	bls.n	80043ca <_tu_fifo_peek+0x96>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	88fb      	ldrh	r3, [r7, #6]
 8004398:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	889b      	ldrh	r3, [r3, #4]
 800439e:	8afa      	ldrh	r2, [r7, #22]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d305      	bcc.n	80043b0 <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	889b      	ldrh	r3, [r3, #4]
 80043a8:	8afa      	ldrh	r2, [r7, #22]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	82bb      	strh	r3, [r7, #20]
 80043ae:	e004      	b.n	80043ba <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	889a      	ldrh	r2, [r3, #4]
 80043b4:	8afb      	ldrh	r3, [r7, #22]
 80043b6:	4413      	add	r3, r2
 80043b8:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	8aba      	ldrh	r2, [r7, #20]
 80043be:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 80043c0:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 80043c2:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	889b      	ldrh	r3, [r3, #4]
 80043c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	889b      	ldrh	r3, [r3, #4]
 80043ce:	827b      	strh	r3, [r7, #18]
 80043d0:	88bb      	ldrh	r3, [r7, #4]
 80043d2:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 80043d4:	e003      	b.n	80043de <_tu_fifo_peek+0xaa>
 80043d6:	8a3a      	ldrh	r2, [r7, #16]
 80043d8:	8a7b      	ldrh	r3, [r7, #18]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	823b      	strh	r3, [r7, #16]
 80043de:	8a7a      	ldrh	r2, [r7, #18]
 80043e0:	8a3b      	ldrh	r3, [r7, #16]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d9f7      	bls.n	80043d6 <_tu_fifo_peek+0xa2>
  return idx;
 80043e6:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80043e8:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 80043ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80043ec:	461a      	mov	r2, r3
 80043ee:	68b9      	ldr	r1, [r7, #8]
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f7ff fe7a 	bl	80040ea <_ff_pull>

  return true;
 80043f6:	2301      	movs	r3, #1
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3728      	adds	r7, #40	@ 0x28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08c      	sub	sp, #48	@ 0x30
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	4611      	mov	r1, r2
 800440c:	461a      	mov	r2, r3
 800440e:	460b      	mov	r3, r1
 8004410:	80fb      	strh	r3, [r7, #6]
 8004412:	4613      	mov	r3, r2
 8004414:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	889b      	ldrh	r3, [r3, #4]
 800441a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800441c:	88bb      	ldrh	r3, [r7, #4]
 800441e:	843b      	strh	r3, [r7, #32]
 8004420:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004422:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8004424:	8c3a      	ldrh	r2, [r7, #32]
 8004426:	8bfb      	ldrh	r3, [r7, #30]
 8004428:	429a      	cmp	r2, r3
 800442a:	d304      	bcc.n	8004436 <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 800442c:	8c3a      	ldrh	r2, [r7, #32]
 800442e:	8bfb      	ldrh	r3, [r7, #30]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	b29b      	uxth	r3, r3
 8004434:	e008      	b.n	8004448 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004436:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	8c39      	ldrh	r1, [r7, #32]
 800443e:	8bfb      	ldrh	r3, [r7, #30]
 8004440:	1acb      	subs	r3, r1, r3
 8004442:	b29b      	uxth	r3, r3
 8004444:	4413      	add	r3, r2
 8004446:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8004448:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 800444a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <_tu_fifo_peek_n+0x54>
 8004450:	2300      	movs	r3, #0
 8004452:	e041      	b.n	80044d8 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	889b      	ldrh	r3, [r3, #4]
 8004458:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800445a:	429a      	cmp	r2, r3
 800445c:	d91b      	bls.n	8004496 <_tu_fifo_peek_n+0x96>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	88bb      	ldrh	r3, [r7, #4]
 8004464:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	889b      	ldrh	r3, [r3, #4]
 800446a:	8afa      	ldrh	r2, [r7, #22]
 800446c:	429a      	cmp	r2, r3
 800446e:	d305      	bcc.n	800447c <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	889b      	ldrh	r3, [r3, #4]
 8004474:	8afa      	ldrh	r2, [r7, #22]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	82bb      	strh	r3, [r7, #20]
 800447a:	e004      	b.n	8004486 <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	889a      	ldrh	r2, [r3, #4]
 8004480:	8afb      	ldrh	r3, [r7, #22]
 8004482:	4413      	add	r3, r2
 8004484:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	8aba      	ldrh	r2, [r7, #20]
 800448a:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 800448c:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800448e:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	889b      	ldrh	r3, [r3, #4]
 8004494:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8004496:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	429a      	cmp	r2, r3
 800449c:	d201      	bcs.n	80044a2 <_tu_fifo_peek_n+0xa2>
 800449e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80044a0:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	889b      	ldrh	r3, [r3, #4]
 80044a6:	827b      	strh	r3, [r7, #18]
 80044a8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80044aa:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 80044ac:	e003      	b.n	80044b6 <_tu_fifo_peek_n+0xb6>
 80044ae:	8a3a      	ldrh	r2, [r7, #16]
 80044b0:	8a7b      	ldrh	r3, [r7, #18]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	823b      	strh	r3, [r7, #16]
 80044b6:	8a7a      	ldrh	r2, [r7, #18]
 80044b8:	8a3b      	ldrh	r3, [r7, #16]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d9f7      	bls.n	80044ae <_tu_fifo_peek_n+0xae>
  return idx;
 80044be:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80044c0:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 80044c2:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80044c4:	88fa      	ldrh	r2, [r7, #6]
 80044c6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	460b      	mov	r3, r1
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f7ff fe29 	bl	8004128 <_ff_pull_n>

  return n;
 80044d6:	88fb      	ldrh	r3, [r7, #6]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3728      	adds	r7, #40	@ 0x28
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b092      	sub	sp, #72	@ 0x48
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	4611      	mov	r1, r2
 80044ec:	461a      	mov	r2, r3
 80044ee:	460b      	mov	r3, r1
 80044f0:	80fb      	strh	r3, [r7, #6]
 80044f2:	4613      	mov	r3, r2
 80044f4:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 80044f6:	88fb      	ldrh	r3, [r7, #6]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <_tu_fifo_write_n+0x20>
 80044fc:	2300      	movs	r3, #0
 80044fe:	e0bc      	b.n	800467a <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	891b      	ldrh	r3, [r3, #8]
 8004504:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	895b      	ldrh	r3, [r3, #10]
 800450a:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	79db      	ldrb	r3, [r3, #7]
 8004514:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f083 0301 	eor.w	r3, r3, #1
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d036      	beq.n	8004592 <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	889b      	ldrh	r3, [r3, #4]
 8004528:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800452a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800452c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800452e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004530:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004532:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004534:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004536:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004538:	847b      	strh	r3, [r7, #34]	@ 0x22
 800453a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800453c:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 800453e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004540:	8c3b      	ldrh	r3, [r7, #32]
 8004542:	429a      	cmp	r2, r3
 8004544:	d304      	bcc.n	8004550 <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 8004546:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004548:	8c3b      	ldrh	r3, [r7, #32]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	b29b      	uxth	r3, r3
 800454e:	e008      	b.n	8004562 <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004550:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8004558:	8c3b      	ldrh	r3, [r7, #32]
 800455a:	1acb      	subs	r3, r1, r3
 800455c:	b29b      	uxth	r3, r3
 800455e:	4413      	add	r3, r2
 8004560:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8004562:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8004564:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8004566:	8bfb      	ldrh	r3, [r7, #30]
 8004568:	429a      	cmp	r2, r3
 800456a:	d904      	bls.n	8004576 <_tu_fifo_write_n+0x96>
 800456c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800456e:	8bfb      	ldrh	r3, [r7, #30]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	b29b      	uxth	r3, r3
 8004574:	e000      	b.n	8004578 <_tu_fifo_write_n+0x98>
 8004576:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8004578:	867b      	strh	r3, [r7, #50]	@ 0x32
 800457a:	88fb      	ldrh	r3, [r7, #6]
 800457c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800457e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004580:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004582:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004584:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004586:	4293      	cmp	r3, r2
 8004588:	bf28      	it	cs
 800458a:	4613      	movcs	r3, r2
 800458c:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 800458e:	80fb      	strh	r3, [r7, #6]
 8004590:	e04b      	b.n	800462a <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	889b      	ldrh	r3, [r3, #4]
 8004596:	88fa      	ldrh	r2, [r7, #6]
 8004598:	429a      	cmp	r2, r3
 800459a:	d317      	bcc.n	80045cc <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 800459c:	797b      	ldrb	r3, [r7, #5]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10e      	bne.n	80045c0 <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 80045a2:	88fb      	ldrh	r3, [r7, #6]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	8892      	ldrh	r2, [r2, #4]
 80045a8:	1a9b      	subs	r3, r3, r2
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	88d2      	ldrh	r2, [r2, #6]
 80045ae:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80045b2:	b292      	uxth	r2, r2
 80045b4:	fb02 f303 	mul.w	r3, r2, r3
 80045b8:	461a      	mov	r2, r3
 80045ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045bc:	4413      	add	r3, r2
 80045be:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	889b      	ldrh	r3, [r3, #4]
 80045c4:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 80045c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80045c8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80045ca:	e02e      	b.n	800462a <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	889b      	ldrh	r3, [r3, #4]
 80045d0:	83bb      	strh	r3, [r7, #28]
 80045d2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80045d4:	837b      	strh	r3, [r7, #26]
 80045d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80045d8:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 80045da:	8b7a      	ldrh	r2, [r7, #26]
 80045dc:	8b3b      	ldrh	r3, [r7, #24]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d304      	bcc.n	80045ec <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 80045e2:	8b7a      	ldrh	r2, [r7, #26]
 80045e4:	8b3b      	ldrh	r3, [r7, #24]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	e008      	b.n	80045fe <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80045ec:	8bbb      	ldrh	r3, [r7, #28]
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	8b79      	ldrh	r1, [r7, #26]
 80045f4:	8b3b      	ldrh	r3, [r7, #24]
 80045f6:	1acb      	subs	r3, r1, r3
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	4413      	add	r3, r2
 80045fc:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 80045fe:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 8004600:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004602:	88fb      	ldrh	r3, [r7, #6]
 8004604:	441a      	add	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	889b      	ldrh	r3, [r3, #4]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	429a      	cmp	r2, r3
 800460e:	db0c      	blt.n	800462a <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8898      	ldrh	r0, [r3, #4]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	889a      	ldrh	r2, [r3, #4]
 8004618:	88fb      	ldrh	r3, [r7, #6]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	b29a      	uxth	r2, r3
 800461e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004620:	4619      	mov	r1, r3
 8004622:	f7ff fe61 	bl	80042e8 <advance_index>
 8004626:	4603      	mov	r3, r0
 8004628:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 800462a:	88fb      	ldrh	r3, [r7, #6]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d023      	beq.n	8004678 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	889b      	ldrh	r3, [r3, #4]
 8004634:	82fb      	strh	r3, [r7, #22]
 8004636:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004638:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 800463a:	e003      	b.n	8004644 <_tu_fifo_write_n+0x164>
 800463c:	8aba      	ldrh	r2, [r7, #20]
 800463e:	8afb      	ldrh	r3, [r7, #22]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	82bb      	strh	r3, [r7, #20]
 8004644:	8afa      	ldrh	r2, [r7, #22]
 8004646:	8abb      	ldrh	r3, [r7, #20]
 8004648:	429a      	cmp	r2, r3
 800464a:	d9f7      	bls.n	800463c <_tu_fifo_write_n+0x15c>
  return idx;
 800464c:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 800464e:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8004650:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8004652:	88fa      	ldrh	r2, [r7, #6]
 8004654:	797b      	ldrb	r3, [r7, #5]
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	460b      	mov	r3, r1
 800465a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f7ff fc66 	bl	8003f2e <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	889b      	ldrh	r3, [r3, #4]
 8004666:	88fa      	ldrh	r2, [r7, #6]
 8004668:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff fe3c 	bl	80042e8 <advance_index>
 8004670:	4603      	mov	r3, r0
 8004672:	461a      	mov	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8004678:	88fb      	ldrh	r3, [r7, #6]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3740      	adds	r7, #64	@ 0x40
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b086      	sub	sp, #24
 8004686:	af02      	add	r7, sp, #8
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	4611      	mov	r1, r2
 800468e:	461a      	mov	r2, r3
 8004690:	460b      	mov	r3, r1
 8004692:	80fb      	strh	r3, [r7, #6]
 8004694:	4613      	mov	r3, r2
 8004696:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	891b      	ldrh	r3, [r3, #8]
 800469c:	b298      	uxth	r0, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	895b      	ldrh	r3, [r3, #10]
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	88f9      	ldrh	r1, [r7, #6]
 80046a6:	797a      	ldrb	r2, [r7, #5]
 80046a8:	9201      	str	r2, [sp, #4]
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	4603      	mov	r3, r0
 80046ae:	460a      	mov	r2, r1
 80046b0:	68b9      	ldr	r1, [r7, #8]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7ff fea4 	bl	8004400 <_tu_fifo_peek_n>
 80046b8:	4603      	mov	r3, r0
 80046ba:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8898      	ldrh	r0, [r3, #4]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	895b      	ldrh	r3, [r3, #10]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	88fa      	ldrh	r2, [r7, #6]
 80046c8:	4619      	mov	r1, r3
 80046ca:	f7ff fe0d 	bl	80042e8 <advance_index>
 80046ce:	4603      	mov	r3, r0
 80046d0:	461a      	mov	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 80046d6:	88fb      	ldrh	r3, [r7, #6]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	8899      	ldrh	r1, [r3, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	891b      	ldrh	r3, [r3, #8]
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	895b      	ldrh	r3, [r3, #10]
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	8279      	strh	r1, [r7, #18]
 80046fa:	823a      	strh	r2, [r7, #16]
 80046fc:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 80046fe:	8a3a      	ldrh	r2, [r7, #16]
 8004700:	89fb      	ldrh	r3, [r7, #14]
 8004702:	429a      	cmp	r2, r3
 8004704:	d304      	bcc.n	8004710 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8004706:	8a3a      	ldrh	r2, [r7, #16]
 8004708:	89fb      	ldrh	r3, [r7, #14]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	b29b      	uxth	r3, r3
 800470e:	e008      	b.n	8004722 <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004710:	8a7b      	ldrh	r3, [r7, #18]
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	8a39      	ldrh	r1, [r7, #16]
 8004718:	89fb      	ldrh	r3, [r7, #14]
 800471a:	1acb      	subs	r3, r1, r3
 800471c:	b29b      	uxth	r3, r3
 800471e:	4413      	add	r3, r2
 8004720:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	8892      	ldrh	r2, [r2, #4]
 8004726:	82fb      	strh	r3, [r7, #22]
 8004728:	4613      	mov	r3, r2
 800472a:	82bb      	strh	r3, [r7, #20]
 800472c:	8afa      	ldrh	r2, [r7, #22]
 800472e:	8abb      	ldrh	r3, [r7, #20]
 8004730:	4293      	cmp	r3, r2
 8004732:	bf28      	it	cs
 8004734:	4613      	movcs	r3, r2
 8004736:	b29b      	uxth	r3, r3
}
 8004738:	4618      	mov	r0, r3
 800473a:	371c      	adds	r7, #28
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	891b      	ldrh	r3, [r3, #8]
 8004750:	b29a      	uxth	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	895b      	ldrh	r3, [r3, #10]
 8004756:	b29b      	uxth	r3, r3
 8004758:	429a      	cmp	r2, r3
 800475a:	bf0c      	ite	eq
 800475c:	2301      	moveq	r3, #1
 800475e:	2300      	movne	r3, #0
 8004760:	b2db      	uxtb	r3, r3
}
 8004762:	4618      	mov	r0, r3
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 800476e:	b480      	push	{r7}
 8004770:	b085      	sub	sp, #20
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	8899      	ldrh	r1, [r3, #4]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	891b      	ldrh	r3, [r3, #8]
 800477e:	b29a      	uxth	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	895b      	ldrh	r3, [r3, #10]
 8004784:	b29b      	uxth	r3, r3
 8004786:	81f9      	strh	r1, [r7, #14]
 8004788:	81ba      	strh	r2, [r7, #12]
 800478a:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 800478c:	89ba      	ldrh	r2, [r7, #12]
 800478e:	897b      	ldrh	r3, [r7, #10]
 8004790:	429a      	cmp	r2, r3
 8004792:	d304      	bcc.n	800479e <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8004794:	89ba      	ldrh	r2, [r7, #12]
 8004796:	897b      	ldrh	r3, [r7, #10]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	b29b      	uxth	r3, r3
 800479c:	e008      	b.n	80047b0 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800479e:	89fb      	ldrh	r3, [r7, #14]
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	89b9      	ldrh	r1, [r7, #12]
 80047a6:	897b      	ldrh	r3, [r7, #10]
 80047a8:	1acb      	subs	r3, r1, r3
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	4413      	add	r3, r2
 80047ae:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	8892      	ldrh	r2, [r2, #4]
 80047b4:	4293      	cmp	r3, r2
 80047b6:	bf2c      	ite	cs
 80047b8:	2301      	movcs	r3, #1
 80047ba:	2300      	movcc	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b087      	sub	sp, #28
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	8899      	ldrh	r1, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	891b      	ldrh	r3, [r3, #8]
 80047da:	b29a      	uxth	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	895b      	ldrh	r3, [r3, #10]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	82f9      	strh	r1, [r7, #22]
 80047e4:	82ba      	strh	r2, [r7, #20]
 80047e6:	827b      	strh	r3, [r7, #18]
 80047e8:	8afb      	ldrh	r3, [r7, #22]
 80047ea:	823b      	strh	r3, [r7, #16]
 80047ec:	8abb      	ldrh	r3, [r7, #20]
 80047ee:	81fb      	strh	r3, [r7, #14]
 80047f0:	8a7b      	ldrh	r3, [r7, #18]
 80047f2:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 80047f4:	89fa      	ldrh	r2, [r7, #14]
 80047f6:	89bb      	ldrh	r3, [r7, #12]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d304      	bcc.n	8004806 <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 80047fc:	89fa      	ldrh	r2, [r7, #14]
 80047fe:	89bb      	ldrh	r3, [r7, #12]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	b29b      	uxth	r3, r3
 8004804:	e008      	b.n	8004818 <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004806:	8a3b      	ldrh	r3, [r7, #16]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	89f9      	ldrh	r1, [r7, #14]
 800480e:	89bb      	ldrh	r3, [r7, #12]
 8004810:	1acb      	subs	r3, r1, r3
 8004812:	b29b      	uxth	r3, r3
 8004814:	4413      	add	r3, r2
 8004816:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8004818:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 800481a:	8afa      	ldrh	r2, [r7, #22]
 800481c:	897b      	ldrh	r3, [r7, #10]
 800481e:	429a      	cmp	r2, r3
 8004820:	d904      	bls.n	800482c <tu_fifo_remaining+0x62>
 8004822:	8afa      	ldrh	r2, [r7, #22]
 8004824:	897b      	ldrh	r3, [r7, #10]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	b29b      	uxth	r3, r3
 800482a:	e000      	b.n	800482e <tu_fifo_remaining+0x64>
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b084      	sub	sp, #16
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	891b      	ldrh	r3, [r3, #8]
 8004848:	b29a      	uxth	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	895b      	ldrh	r3, [r3, #10]
 800484e:	b29b      	uxth	r3, r3
 8004850:	6839      	ldr	r1, [r7, #0]
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff fd6e 	bl	8004334 <_tu_fifo_peek>
 8004858:	4603      	mov	r3, r0
 800485a:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	8898      	ldrh	r0, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	895b      	ldrh	r3, [r3, #10]
 8004864:	b29b      	uxth	r3, r3
 8004866:	7bfa      	ldrb	r2, [r7, #15]
 8004868:	b292      	uxth	r2, r2
 800486a:	4619      	mov	r1, r3
 800486c:	f7ff fd3c 	bl	80042e8 <advance_index>
 8004870:	4603      	mov	r3, r0
 8004872:	461a      	mov	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8004878:	7bfb      	ldrb	r3, [r7, #15]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b084      	sub	sp, #16
 8004886:	af00      	add	r7, sp, #0
 8004888:	60f8      	str	r0, [r7, #12]
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	4613      	mov	r3, r2
 800488e:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8004890:	88fa      	ldrh	r2, [r7, #6]
 8004892:	2300      	movs	r3, #0
 8004894:	68b9      	ldr	r1, [r7, #8]
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f7ff fef3 	bl	8004682 <_tu_fifo_read_n>
 800489c:	4603      	mov	r3, r0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <tu_fifo_read_n_const_addr_full_words>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b084      	sub	sp, #16
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	4613      	mov	r3, r2
 80048b2:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 80048b4:	88fa      	ldrh	r2, [r7, #6]
 80048b6:	2301      	movs	r3, #1
 80048b8:	68b9      	ldr	r1, [r7, #8]
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f7ff fee1 	bl	8004682 <_tu_fifo_read_n>
 80048c0:	4603      	mov	r3, r0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b086      	sub	sp, #24
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	891b      	ldrh	r3, [r3, #8]
 80048d8:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7ff ff47 	bl	800476e <tu_fifo_full>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00c      	beq.n	8004900 <tu_fifo_write+0x36>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	79db      	ldrb	r3, [r3, #7]
 80048ea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	f083 0301 	eor.w	r3, r3, #1
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <tu_fifo_write+0x36>
  {
    ret = false;
 80048fa:	2300      	movs	r3, #0
 80048fc:	75fb      	strb	r3, [r7, #23]
 80048fe:	e022      	b.n	8004946 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	889b      	ldrh	r3, [r3, #4]
 8004904:	823b      	strh	r3, [r7, #16]
 8004906:	8abb      	ldrh	r3, [r7, #20]
 8004908:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 800490a:	e003      	b.n	8004914 <tu_fifo_write+0x4a>
 800490c:	89fa      	ldrh	r2, [r7, #14]
 800490e:	8a3b      	ldrh	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	81fb      	strh	r3, [r7, #14]
 8004914:	8a3a      	ldrh	r2, [r7, #16]
 8004916:	89fb      	ldrh	r3, [r7, #14]
 8004918:	429a      	cmp	r2, r3
 800491a:	d9f7      	bls.n	800490c <tu_fifo_write+0x42>
  return idx;
 800491c:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 800491e:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8004920:	8a7b      	ldrh	r3, [r7, #18]
 8004922:	461a      	mov	r2, r3
 8004924:	6839      	ldr	r1, [r7, #0]
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff fae2 	bl	8003ef0 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	889b      	ldrh	r3, [r3, #4]
 8004930:	8ab9      	ldrh	r1, [r7, #20]
 8004932:	2201      	movs	r2, #1
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fcd7 	bl	80042e8 <advance_index>
 800493a:	4603      	mov	r3, r0
 800493c:	461a      	mov	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	811a      	strh	r2, [r3, #8]

    ret = true;
 8004942:	2301      	movs	r3, #1
 8004944:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8004946:	7dfb      	ldrb	r3, [r7, #23]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	4613      	mov	r3, r2
 800495c:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 800495e:	88fa      	ldrh	r2, [r7, #6]
 8004960:	2300      	movs	r3, #0
 8004962:	68b9      	ldr	r1, [r7, #8]
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f7ff fdbb 	bl	80044e0 <_tu_fifo_write_n>
 800496a:	4603      	mov	r3, r0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	4613      	mov	r3, r2
 8004980:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8004982:	88fa      	ldrh	r2, [r7, #6]
 8004984:	2301      	movs	r3, #1
 8004986:	68b9      	ldr	r1, [r7, #8]
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f7ff fda9 	bl	80044e0 <_tu_fifo_write_n>
 800498e:	4603      	mov	r3, r0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 80049ac:	2301      	movs	r3, #1
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	460b      	mov	r3, r1
 80049c4:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	79d3      	ldrb	r3, [r2, #7]
 80049ca:	78f9      	ldrb	r1, [r7, #3]
 80049cc:	f361 13c7 	bfi	r3, r1, #7, #1
 80049d0:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 80049d2:	2301      	movs	r3, #1
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	4603      	mov	r3, r0
 80049e8:	6039      	str	r1, [r7, #0]
 80049ea:	71fb      	strb	r3, [r7, #7]
 80049ec:	4613      	mov	r3, r2
 80049ee:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <tud_descriptor_bos_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  return NULL;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  return NULL;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <tud_suspend_cb>:
}

TU_ATTR_WEAK void tud_umount_cb(void) {
}

TU_ATTR_WEAK void tud_suspend_cb(bool remote_wakeup_en) {
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <tud_resume_cb>:

TU_ATTR_WEAK void tud_resume_cb(void) {
 8004a5e:	b480      	push	{r7}
 8004a60:	af00      	add	r7, sp, #0
}
 8004a62:	bf00      	nop
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <tud_vendor_control_xfer_cb>:

TU_ATTR_WEAK bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const* request) {
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	4603      	mov	r3, r0
 8004a74:	603a      	str	r2, [r7, #0]
 8004a76:	71fb      	strb	r3, [r7, #7]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) stage; (void) request;
  return false;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <dcd_dcache_clean>:

TU_ATTR_WEAK void dcd_disconnect(uint8_t rhport) {
  (void) rhport;
}

TU_ATTR_WEAK bool dcd_dcache_clean(const void* addr, uint32_t data_size) {
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return true;
 8004a94:	2301      	movs	r3, #1
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
	...

08004aa4 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8004aa8:	4b06      	ldr	r3, [pc, #24]	@ (8004ac4 <tud_mounted+0x20>)
 8004aaa:	785b      	ldrb	r3, [r3, #1]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	bf14      	ite	ne
 8004ab2:	2301      	movne	r3, #1
 8004ab4:	2300      	moveq	r3, #0
 8004ab6:	b2db      	uxtb	r3, r3
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	20000814 	.word	0x20000814

08004ac8 <tud_suspended>:

bool tud_suspended(void) {
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8004acc:	4b07      	ldr	r3, [pc, #28]	@ (8004aec <tud_suspended+0x24>)
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	bf14      	ite	ne
 8004ada:	2301      	movne	r3, #1
 8004adc:	2300      	moveq	r3, #0
 8004ade:	b2db      	uxtb	r3, r3
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	20000814 	.word	0x20000814

08004af0 <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8004af4:	4b05      	ldr	r3, [pc, #20]	@ (8004b0c <tud_inited+0x1c>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2bff      	cmp	r3, #255	@ 0xff
 8004afa:	bf14      	ite	ne
 8004afc:	2301      	movne	r3, #1
 8004afe:	2300      	moveq	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	2000001d 	.word	0x2000001d

08004b10 <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08c      	sub	sp, #48	@ 0x30
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	4603      	mov	r3, r0
 8004b18:	6039      	str	r1, [r7, #0]
 8004b1a:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 8004b1c:	f7ff ffe8 	bl	8004af0 <tud_inited>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 8004b26:	2301      	movs	r3, #1
 8004b28:	e099      	b.n	8004c5e <tud_rhport_init+0x14e>
  }
  TU_ASSERT(rh_init);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10a      	bne.n	8004b46 <tud_rhport_init+0x36>
 8004b30:	4b4d      	ldr	r3, [pc, #308]	@ (8004c68 <tud_rhport_init+0x158>)
 8004b32:	61bb      	str	r3, [r7, #24]
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d000      	beq.n	8004b42 <tud_rhport_init+0x32>
 8004b40:	be00      	bkpt	0x0000
 8004b42:	2300      	movs	r3, #0
 8004b44:	e08b      	b.n	8004c5e <tud_rhport_init+0x14e>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8004b46:	222c      	movs	r2, #44	@ 0x2c
 8004b48:	2100      	movs	r1, #0
 8004b4a:	4848      	ldr	r0, [pc, #288]	@ (8004c6c <tud_rhport_init+0x15c>)
 8004b4c:	f003 fd99 	bl	8008682 <memset>
  _usbd_queued_setup = 0;
 8004b50:	4b47      	ldr	r3, [pc, #284]	@ (8004c70 <tud_rhport_init+0x160>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	701a      	strb	r2, [r3, #0]
 8004b56:	4b47      	ldr	r3, [pc, #284]	@ (8004c74 <tud_rhport_init+0x164>)
 8004b58:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7ff ff1a 	bl	8004998 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8004b64:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8004b66:	4a44      	ldr	r2, [pc, #272]	@ (8004c78 <tud_rhport_init+0x168>)
 8004b68:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8004b6a:	4b43      	ldr	r3, [pc, #268]	@ (8004c78 <tud_rhport_init+0x168>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10a      	bne.n	8004b88 <tud_rhport_init+0x78>
 8004b72:	4b3d      	ldr	r3, [pc, #244]	@ (8004c68 <tud_rhport_init+0x158>)
 8004b74:	61fb      	str	r3, [r7, #28]
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d000      	beq.n	8004b84 <tud_rhport_init+0x74>
 8004b82:	be00      	bkpt	0x0000
 8004b84:	2300      	movs	r3, #0
 8004b86:	e06a      	b.n	8004c5e <tud_rhport_init+0x14e>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 8004b88:	4b3c      	ldr	r3, [pc, #240]	@ (8004c7c <tud_rhport_init+0x16c>)
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <tud_rhport_init+0x8a>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8004b8e:	483c      	ldr	r0, [pc, #240]	@ (8004c80 <tud_rhport_init+0x170>)
 8004b90:	f3af 8000 	nop.w
 8004b94:	4603      	mov	r3, r0
 8004b96:	4a3b      	ldr	r2, [pc, #236]	@ (8004c84 <tud_rhport_init+0x174>)
 8004b98:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004ba0:	e039      	b.n	8004c16 <tud_rhport_init+0x106>
 8004ba2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004ba6:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8004bac:	4b34      	ldr	r3, [pc, #208]	@ (8004c80 <tud_rhport_init+0x170>)
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	7cfa      	ldrb	r2, [r7, #19]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d206      	bcs.n	8004bc4 <tud_rhport_init+0xb4>
    driver = &_app_driver[drvid];
 8004bb6:	4b33      	ldr	r3, [pc, #204]	@ (8004c84 <tud_rhport_init+0x174>)
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	7cfb      	ldrb	r3, [r7, #19]
 8004bbc:	015b      	lsls	r3, r3, #5
 8004bbe:	4413      	add	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	e00c      	b.n	8004bde <tud_rhport_init+0xce>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8004bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8004c80 <tud_rhport_init+0x170>)
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	7cfa      	ldrb	r2, [r7, #19]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d807      	bhi.n	8004bde <tud_rhport_init+0xce>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8004bce:	7cfb      	ldrb	r3, [r7, #19]
 8004bd0:	4a2b      	ldr	r2, [pc, #172]	@ (8004c80 <tud_rhport_init+0x170>)
 8004bd2:	7812      	ldrb	r2, [r2, #0]
 8004bd4:	1a9b      	subs	r3, r3, r2
 8004bd6:	015b      	lsls	r3, r3, #5
 8004bd8:	4a2b      	ldr	r2, [pc, #172]	@ (8004c88 <tud_rhport_init+0x178>)
 8004bda:	4413      	add	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
  return driver;
 8004bde:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 8004be0:	627b      	str	r3, [r7, #36]	@ 0x24
    TU_ASSERT(driver && driver->init);
 8004be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <tud_rhport_init+0xe0>
 8004be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10a      	bne.n	8004c06 <tud_rhport_init+0xf6>
 8004bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c68 <tud_rhport_init+0x158>)
 8004bf2:	623b      	str	r3, [r7, #32]
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d000      	beq.n	8004c02 <tud_rhport_init+0xf2>
 8004c00:	be00      	bkpt	0x0000
 8004c02:	2300      	movs	r3, #0
 8004c04:	e02b      	b.n	8004c5e <tud_rhport_init+0x14e>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 8004c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8004c0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004c10:	3301      	adds	r3, #1
 8004c12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004c16:	4b1a      	ldr	r3, [pc, #104]	@ (8004c80 <tud_rhport_init+0x170>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d9bf      	bls.n	8004ba2 <tud_rhport_init+0x92>
  }

  _usbd_rhport = rhport;
 8004c22:	4a1a      	ldr	r2, [pc, #104]	@ (8004c8c <tud_rhport_init+0x17c>)
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 8004c28:	79fb      	ldrb	r3, [r7, #7]
 8004c2a:	6839      	ldr	r1, [r7, #0]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f002 f957 	bl	8006ee0 <dcd_init>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f083 0301 	eor.w	r3, r3, #1
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <tud_rhport_init+0x144>
 8004c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c68 <tud_rhport_init+0x158>)
 8004c40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d000      	beq.n	8004c50 <tud_rhport_init+0x140>
 8004c4e:	be00      	bkpt	0x0000
 8004c50:	2300      	movs	r3, #0
 8004c52:	e004      	b.n	8004c5e <tud_rhport_init+0x14e>
  dcd_int_enable(rhport);
 8004c54:	79fb      	ldrb	r3, [r7, #7]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f002 f9d6 	bl	8007008 <dcd_int_enable>

  return true;
 8004c5c:	2301      	movs	r3, #1
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3730      	adds	r7, #48	@ 0x30
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	e000edf0 	.word	0xe000edf0
 8004c6c:	20000814 	.word	0x20000814
 8004c70:	20000840 	.word	0x20000840
 8004c74:	20000020 	.word	0x20000020
 8004c78:	2000090c 	.word	0x2000090c
 8004c7c:	00000000 	.word	0x00000000
 8004c80:	20000848 	.word	0x20000848
 8004c84:	20000844 	.word	0x20000844
 8004c88:	08008804 	.word	0x08008804
 8004c8c:	2000001d 	.word	0x2000001d

08004c90 <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	4603      	mov	r3, r0
 8004c98:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	77fb      	strb	r3, [r7, #31]
 8004c9e:	e033      	b.n	8004d08 <configuration_reset+0x78>
 8004ca0:	7ffb      	ldrb	r3, [r7, #31]
 8004ca2:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8004ca8:	4b24      	ldr	r3, [pc, #144]	@ (8004d3c <configuration_reset+0xac>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	7cfa      	ldrb	r2, [r7, #19]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d206      	bcs.n	8004cc0 <configuration_reset+0x30>
    driver = &_app_driver[drvid];
 8004cb2:	4b23      	ldr	r3, [pc, #140]	@ (8004d40 <configuration_reset+0xb0>)
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	7cfb      	ldrb	r3, [r7, #19]
 8004cb8:	015b      	lsls	r3, r3, #5
 8004cba:	4413      	add	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	e00c      	b.n	8004cda <configuration_reset+0x4a>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8004cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8004d3c <configuration_reset+0xac>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	7cfa      	ldrb	r2, [r7, #19]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d807      	bhi.n	8004cda <configuration_reset+0x4a>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8004cca:	7cfb      	ldrb	r3, [r7, #19]
 8004ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8004d3c <configuration_reset+0xac>)
 8004cce:	7812      	ldrb	r2, [r2, #0]
 8004cd0:	1a9b      	subs	r3, r3, r2
 8004cd2:	015b      	lsls	r3, r3, #5
 8004cd4:	4a1b      	ldr	r2, [pc, #108]	@ (8004d44 <configuration_reset+0xb4>)
 8004cd6:	4413      	add	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]
  return driver;
 8004cda:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 8004cdc:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d109      	bne.n	8004cf8 <configuration_reset+0x68>
 8004ce4:	4b18      	ldr	r3, [pc, #96]	@ (8004d48 <configuration_reset+0xb8>)
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d01e      	beq.n	8004d32 <configuration_reset+0xa2>
 8004cf4:	be00      	bkpt	0x0000
 8004cf6:	e01c      	b.n	8004d32 <configuration_reset+0xa2>
    driver->reset(rhport);
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	79fa      	ldrb	r2, [r7, #7]
 8004cfe:	4610      	mov	r0, r2
 8004d00:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8004d02:	7ffb      	ldrb	r3, [r7, #31]
 8004d04:	3301      	adds	r3, #1
 8004d06:	77fb      	strb	r3, [r7, #31]
 8004d08:	4b0c      	ldr	r3, [pc, #48]	@ (8004d3c <configuration_reset+0xac>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	7ffa      	ldrb	r2, [r7, #31]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d9c6      	bls.n	8004ca0 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8004d12:	222c      	movs	r2, #44	@ 0x2c
 8004d14:	2100      	movs	r1, #0
 8004d16:	480d      	ldr	r0, [pc, #52]	@ (8004d4c <configuration_reset+0xbc>)
 8004d18:	f003 fcb3 	bl	8008682 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8004d1c:	2210      	movs	r2, #16
 8004d1e:	21ff      	movs	r1, #255	@ 0xff
 8004d20:	480b      	ldr	r0, [pc, #44]	@ (8004d50 <configuration_reset+0xc0>)
 8004d22:	f003 fcae 	bl	8008682 <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 8004d26:	220c      	movs	r2, #12
 8004d28:	21ff      	movs	r1, #255	@ 0xff
 8004d2a:	480a      	ldr	r0, [pc, #40]	@ (8004d54 <configuration_reset+0xc4>)
 8004d2c:	f003 fca9 	bl	8008682 <memset>
 8004d30:	e000      	b.n	8004d34 <configuration_reset+0xa4>
    TU_ASSERT(driver,);
 8004d32:	bf00      	nop
}
 8004d34:	3720      	adds	r7, #32
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20000848 	.word	0x20000848
 8004d40:	20000844 	.word	0x20000844
 8004d44:	08008804 	.word	0x08008804
 8004d48:	e000edf0 	.word	0xe000edf0
 8004d4c:	20000814 	.word	0x20000814
 8004d50:	20000818 	.word	0x20000818
 8004d54:	20000828 	.word	0x20000828

08004d58 <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	4603      	mov	r3, r0
 8004d60:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8004d62:	79fb      	ldrb	r3, [r7, #7]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff ff93 	bl	8004c90 <configuration_reset>
  usbd_control_reset();
 8004d6a:	f001 fbcd 	bl	8006508 <usbd_control_reset>
}
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 8004d78:	b590      	push	{r4, r7, lr}
 8004d7a:	b093      	sub	sp, #76	@ 0x4c
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
 8004d84:	f7ff feb4 	bl	8004af0 <tud_inited>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	f083 0301 	eor.w	r3, r3, #1
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f040 8189 	bne.w	80050a8 <tud_task_ext+0x330>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8004d96:	4bb1      	ldr	r3, [pc, #708]	@ (800505c <tud_task_ext+0x2e4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d9c:	f107 030c 	add.w	r3, r7, #12
 8004da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	62bb      	str	r3, [r7, #40]	@ 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  qhdl->interrupt_set(false);
 8004da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2000      	movs	r0, #0
 8004dac:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 8004dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db0:	3304      	adds	r3, #4
 8004db2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff fd40 	bl	800483a <tu_fifo_read>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  qhdl->interrupt_set(true);
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2001      	movs	r0, #1
 8004dc6:	4798      	blx	r3

  return success;
 8004dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004dcc:	f083 0301 	eor.w	r3, r3, #1
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f040 816a 	bne.w	80050ac <tud_task_ext+0x334>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch (event.event_id) {
 8004dd8:	7b7b      	ldrb	r3, [r7, #13]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	2b07      	cmp	r3, #7
 8004dde:	f200 814b 	bhi.w	8005078 <tud_task_ext+0x300>
 8004de2:	a201      	add	r2, pc, #4	@ (adr r2, 8004de8 <tud_task_ext+0x70>)
 8004de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de8:	08004e09 	.word	0x08004e09
 8004dec:	08004e19 	.word	0x08004e19
 8004df0:	0800502b 	.word	0x0800502b
 8004df4:	08004fdd 	.word	0x08004fdd
 8004df8:	08005007 	.word	0x08005007
 8004dfc:	08004e27 	.word	0x08004e27
 8004e00:	08004ed7 	.word	0x08004ed7
 8004e04:	0800501b 	.word	0x0800501b
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 8004e08:	7b3b      	ldrb	r3, [r7, #12]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff ffa4 	bl	8004d58 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8004e10:	7c3a      	ldrb	r2, [r7, #16]
 8004e12:	4b93      	ldr	r3, [pc, #588]	@ (8005060 <tud_task_ext+0x2e8>)
 8004e14:	709a      	strb	r2, [r3, #2]
        break;
 8004e16:	e146      	b.n	80050a6 <tud_task_ext+0x32e>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 8004e18:	7b3b      	ldrb	r3, [r7, #12]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff ff9c 	bl	8004d58 <usbd_reset>
        tud_umount_cb();
 8004e20:	f7fb fbf3 	bl	800060a <tud_umount_cb>
        break;
 8004e24:	e13f      	b.n	80050a6 <tud_task_ext+0x32e>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
 8004e26:	4b8f      	ldr	r3, [pc, #572]	@ (8005064 <tud_task_ext+0x2ec>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10a      	bne.n	8004e46 <tud_task_ext+0xce>
 8004e30:	4b8d      	ldr	r3, [pc, #564]	@ (8005068 <tud_task_ext+0x2f0>)
 8004e32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 8137 	beq.w	80050b0 <tud_task_ext+0x338>
 8004e42:	be00      	bkpt	0x0000
 8004e44:	e134      	b.n	80050b0 <tud_task_ext+0x338>
        _usbd_queued_setup--;
 8004e46:	4b87      	ldr	r3, [pc, #540]	@ (8005064 <tud_task_ext+0x2ec>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	4b84      	ldr	r3, [pc, #528]	@ (8005064 <tud_task_ext+0x2ec>)
 8004e52:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        if (_usbd_queued_setup) {
 8004e54:	4b83      	ldr	r3, [pc, #524]	@ (8005064 <tud_task_ext+0x2ec>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f040 8116 	bne.w	800508c <tud_task_ext+0x314>
          break;
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8004e60:	4a7f      	ldr	r2, [pc, #508]	@ (8005060 <tud_task_ext+0x2e8>)
 8004e62:	7813      	ldrb	r3, [r2, #0]
 8004e64:	f043 0301 	orr.w	r3, r3, #1
 8004e68:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8004e6a:	4a7d      	ldr	r2, [pc, #500]	@ (8005060 <tud_task_ext+0x2e8>)
 8004e6c:	f892 3020 	ldrb.w	r3, [r2, #32]
 8004e70:	f023 0301 	bic.w	r3, r3, #1
 8004e74:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8004e78:	4a79      	ldr	r2, [pc, #484]	@ (8005060 <tud_task_ext+0x2e8>)
 8004e7a:	f892 3020 	ldrb.w	r3, [r2, #32]
 8004e7e:	f023 0304 	bic.w	r3, r3, #4
 8004e82:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 8004e86:	4a76      	ldr	r2, [pc, #472]	@ (8005060 <tud_task_ext+0x2e8>)
 8004e88:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8004e8c:	f023 0301 	bic.w	r3, r3, #1
 8004e90:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 8004e94:	4a72      	ldr	r2, [pc, #456]	@ (8005060 <tud_task_ext+0x2e8>)
 8004e96:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8004e9a:	f023 0304 	bic.w	r3, r3, #4
 8004e9e:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
 8004ea2:	7b3a      	ldrb	r2, [r7, #12]
 8004ea4:	f107 030c 	add.w	r3, r7, #12
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	4619      	mov	r1, r3
 8004eac:	4610      	mov	r0, r2
 8004eae:	f000 f91f 	bl	80050f0 <process_control_request>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	f083 0301 	eor.w	r3, r3, #1
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 80e8 	beq.w	8005090 <tud_task_ext+0x318>
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8004ec0:	7b3b      	ldrb	r3, [r7, #12]
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f002 faa3 	bl	8007410 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8004eca:	7b3b      	ldrb	r3, [r7, #12]
 8004ecc:	2180      	movs	r1, #128	@ 0x80
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f002 fa9e 	bl	8007410 <dcd_edpt_stall>
        }
        break;
 8004ed4:	e0dc      	b.n	8005090 <tud_task_ext+0x318>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8004ed6:	7c3b      	ldrb	r3, [r7, #16]
 8004ed8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8004edc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004ee0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004ee4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004ee8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eec:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 8004eee:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8004ef2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004ef6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004efa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004efe:	09db      	lsrs	r3, r3, #7
 8004f00:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 8004f02:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 8004f06:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8004f0a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004f0e:	4954      	ldr	r1, [pc, #336]	@ (8005060 <tud_task_ext+0x2e8>)
 8004f10:	0052      	lsls	r2, r2, #1
 8004f12:	440a      	add	r2, r1
 8004f14:	4413      	add	r3, r2
 8004f16:	f103 0220 	add.w	r2, r3, #32
 8004f1a:	7813      	ldrb	r3, [r2, #0]
 8004f1c:	f023 0301 	bic.w	r3, r3, #1
 8004f20:	7013      	strb	r3, [r2, #0]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8004f22:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8004f26:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004f2a:	494d      	ldr	r1, [pc, #308]	@ (8005060 <tud_task_ext+0x2e8>)
 8004f2c:	0052      	lsls	r2, r2, #1
 8004f2e:	440a      	add	r2, r1
 8004f30:	4413      	add	r3, r2
 8004f32:	f103 0220 	add.w	r2, r3, #32
 8004f36:	7813      	ldrb	r3, [r2, #0]
 8004f38:	f023 0304 	bic.w	r3, r3, #4
 8004f3c:	7013      	strb	r3, [r2, #0]

        if (0 == epnum) {
 8004f3e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d107      	bne.n	8004f56 <tud_task_ext+0x1de>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 8004f46:	7b38      	ldrb	r0, [r7, #12]
 8004f48:	7c7a      	ldrb	r2, [r7, #17]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8004f50:	f001 fb10 	bl	8006574 <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
 8004f54:	e0a7      	b.n	80050a6 <tud_task_ext+0x32e>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8004f56:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8004f5a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8004f5e:	4940      	ldr	r1, [pc, #256]	@ (8005060 <tud_task_ext+0x2e8>)
 8004f60:	0052      	lsls	r2, r2, #1
 8004f62:	440a      	add	r2, r1
 8004f64:	4413      	add	r3, r2
 8004f66:	3314      	adds	r3, #20
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  usbd_class_driver_t const * driver = NULL;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8004f72:	4b3e      	ldr	r3, [pc, #248]	@ (800506c <tud_task_ext+0x2f4>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d207      	bcs.n	8004f8e <tud_task_ext+0x216>
    driver = &_app_driver[drvid];
 8004f7e:	4b3c      	ldr	r3, [pc, #240]	@ (8005070 <tud_task_ext+0x2f8>)
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f86:	015b      	lsls	r3, r3, #5
 8004f88:	4413      	add	r3, r2
 8004f8a:	623b      	str	r3, [r7, #32]
 8004f8c:	e00e      	b.n	8004fac <tud_task_ext+0x234>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8004f8e:	4b37      	ldr	r3, [pc, #220]	@ (800506c <tud_task_ext+0x2f4>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d808      	bhi.n	8004fac <tud_task_ext+0x234>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8004f9a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f9e:	4a33      	ldr	r2, [pc, #204]	@ (800506c <tud_task_ext+0x2f4>)
 8004fa0:	7812      	ldrb	r2, [r2, #0]
 8004fa2:	1a9b      	subs	r3, r3, r2
 8004fa4:	015b      	lsls	r3, r3, #5
 8004fa6:	4a33      	ldr	r2, [pc, #204]	@ (8005074 <tud_task_ext+0x2fc>)
 8004fa8:	4413      	add	r3, r2
 8004faa:	623b      	str	r3, [r7, #32]
  return driver;
 8004fac:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8004fae:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver,);
 8004fb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d109      	bne.n	8004fca <tud_task_ext+0x252>
 8004fb6:	4b2c      	ldr	r3, [pc, #176]	@ (8005068 <tud_task_ext+0x2f0>)
 8004fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d076      	beq.n	80050b4 <tud_task_ext+0x33c>
 8004fc6:	be00      	bkpt	0x0000
 8004fc8:	e074      	b.n	80050b4 <tud_task_ext+0x33c>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 8004fca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fcc:	699c      	ldr	r4, [r3, #24]
 8004fce:	7b38      	ldrb	r0, [r7, #12]
 8004fd0:	7c7a      	ldrb	r2, [r7, #17]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8004fd8:	47a0      	blx	r4
        break;
 8004fda:	e064      	b.n	80050a6 <tud_task_ext+0x32e>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
 8004fdc:	4b20      	ldr	r3, [pc, #128]	@ (8005060 <tud_task_ext+0x2e8>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d054      	beq.n	8005094 <tud_task_ext+0x31c>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8004fea:	4b1d      	ldr	r3, [pc, #116]	@ (8005060 <tud_task_ext+0x2e8>)
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	bf14      	ite	ne
 8004ff8:	2301      	movne	r3, #1
 8004ffa:	2300      	moveq	r3, #0
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff fd22 	bl	8004a48 <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 8005004:	e046      	b.n	8005094 <tud_task_ext+0x31c>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
 8005006:	4b16      	ldr	r3, [pc, #88]	@ (8005060 <tud_task_ext+0x2e8>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d041      	beq.n	8005098 <tud_task_ext+0x320>
          TU_LOG_USBD("\r\n");
          tud_resume_cb();
 8005014:	f7ff fd23 	bl	8004a5e <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 8005018:	e03e      	b.n	8005098 <tud_task_ext+0x320>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if (event.func_call.func) event.func_call.func(event.func_call.param);
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d03d      	beq.n	800509c <tud_task_ext+0x324>
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	4610      	mov	r0, r2
 8005026:	4798      	blx	r3
        break;
 8005028:	e038      	b.n	800509c <tud_task_ext+0x324>

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 800502a:	4b0d      	ldr	r3, [pc, #52]	@ (8005060 <tud_task_ext+0x2e8>)
 800502c:	78db      	ldrb	r3, [r3, #3]
 800502e:	b2db      	uxtb	r3, r3
 8005030:	61fb      	str	r3, [r7, #28]
 8005032:	2300      	movs	r3, #0
 8005034:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8005036:	7efb      	ldrb	r3, [r7, #27]
 8005038:	69fa      	ldr	r2, [r7, #28]
 800503a:	fa22 f303 	lsr.w	r3, r2, r3
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	bf14      	ite	ne
 8005046:	2301      	movne	r3, #1
 8005048:	2300      	moveq	r3, #0
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d027      	beq.n	80050a0 <tud_task_ext+0x328>
          TU_LOG_USBD("\r\n");
          tud_sof_cb(event.sof.frame_count);
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff fcd2 	bl	80049fc <tud_sof_cb>
        }
      break;
 8005058:	e022      	b.n	80050a0 <tud_task_ext+0x328>
 800505a:	bf00      	nop
 800505c:	2000090c 	.word	0x2000090c
 8005060:	20000814 	.word	0x20000814
 8005064:	20000840 	.word	0x20000840
 8005068:	e000edf0 	.word	0xe000edf0
 800506c:	20000848 	.word	0x20000848
 8005070:	20000844 	.word	0x20000844
 8005074:	08008804 	.word	0x08008804

      default:
        TU_BREAKPOINT();
 8005078:	4b10      	ldr	r3, [pc, #64]	@ (80050bc <tud_task_ext+0x344>)
 800507a:	637b      	str	r3, [r7, #52]	@ 0x34
 800507c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00d      	beq.n	80050a4 <tud_task_ext+0x32c>
 8005088:	be00      	bkpt	0x0000
        break;
 800508a:	e00b      	b.n	80050a4 <tud_task_ext+0x32c>
          break;
 800508c:	bf00      	nop
 800508e:	e682      	b.n	8004d96 <tud_task_ext+0x1e>
        break;
 8005090:	bf00      	nop
 8005092:	e680      	b.n	8004d96 <tud_task_ext+0x1e>
        break;
 8005094:	bf00      	nop
 8005096:	e67e      	b.n	8004d96 <tud_task_ext+0x1e>
        break;
 8005098:	bf00      	nop
 800509a:	e67c      	b.n	8004d96 <tud_task_ext+0x1e>
        break;
 800509c:	bf00      	nop
 800509e:	e67a      	b.n	8004d96 <tud_task_ext+0x1e>
      break;
 80050a0:	bf00      	nop
 80050a2:	e678      	b.n	8004d96 <tud_task_ext+0x1e>
        break;
 80050a4:	bf00      	nop
  while (1) {
 80050a6:	e676      	b.n	8004d96 <tud_task_ext+0x1e>
  if (!tud_inited()) return;
 80050a8:	bf00      	nop
 80050aa:	e004      	b.n	80050b6 <tud_task_ext+0x33e>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 80050ac:	bf00      	nop
 80050ae:	e002      	b.n	80050b6 <tud_task_ext+0x33e>
        TU_ASSERT(_usbd_queued_setup > 0,);
 80050b0:	bf00      	nop
 80050b2:	e000      	b.n	80050b6 <tud_task_ext+0x33e>
          TU_ASSERT(driver,);
 80050b4:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) return;
#endif
  }
}
 80050b6:	374c      	adds	r7, #76	@ 0x4c
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd90      	pop	{r4, r7, pc}
 80050bc:	e000edf0 	.word	0xe000edf0

080050c0 <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	4603      	mov	r3, r0
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f001 fa24 	bl	8006520 <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	7bf8      	ldrb	r0, [r7, #15]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	2101      	movs	r1, #1
 80050e2:	4798      	blx	r3
 80050e4:	4603      	mov	r3, r0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
	...

080050f0 <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b09a      	sub	sp, #104	@ 0x68
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	4603      	mov	r3, r0
 80050f8:	6039      	str	r1, [r7, #0]
 80050fa:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 80050fc:	2000      	movs	r0, #0
 80050fe:	f001 fa0f 	bl	8006520 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b60      	cmp	r3, #96	@ 0x60
 800510e:	d10a      	bne.n	8005126 <process_control_request+0x36>
 8005110:	4ba4      	ldr	r3, [pc, #656]	@ (80053a4 <process_control_request+0x2b4>)
 8005112:	633b      	str	r3, [r7, #48]	@ 0x30
 8005114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d000      	beq.n	8005122 <process_control_request+0x32>
 8005120:	be00      	bkpt	0x0000
 8005122:	2300      	movs	r3, #0
 8005124:	e2b7      	b.n	8005696 <process_control_request+0x5a6>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b40      	cmp	r3, #64	@ 0x40
 8005132:	d10a      	bne.n	800514a <process_control_request+0x5a>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8005134:	489c      	ldr	r0, [pc, #624]	@ (80053a8 <process_control_request+0x2b8>)
 8005136:	f001 f9f3 	bl	8006520 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	2101      	movs	r1, #1
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff fc93 	bl	8004a6c <tud_vendor_control_xfer_cb>
 8005146:	4603      	mov	r3, r0
 8005148:	e2a5      	b.n	8005696 <process_control_request+0x5a6>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	f000 81c7 	beq.w	80054e8 <process_control_request+0x3f8>
 800515a:	2b02      	cmp	r3, #2
 800515c:	f300 828e 	bgt.w	800567c <process_control_request+0x58c>
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <process_control_request+0x7c>
 8005164:	2b01      	cmp	r3, #1
 8005166:	f000 814f 	beq.w	8005408 <process_control_request+0x318>
 800516a:	e287      	b.n	800567c <process_control_request+0x58c>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b20      	cmp	r3, #32
 8005178:	d142      	bne.n	8005200 <process_control_request+0x110>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	889b      	ldrh	r3, [r3, #4]
 800517e:	b29b      	uxth	r3, r3
 8005180:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8005182:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005184:	b2db      	uxtb	r3, r3
 8005186:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 800518a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800518e:	2b0f      	cmp	r3, #15
 8005190:	d901      	bls.n	8005196 <process_control_request+0xa6>
 8005192:	2300      	movs	r3, #0
 8005194:	e27f      	b.n	8005696 <process_control_request+0x5a6>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8005196:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800519a:	4a84      	ldr	r2, [pc, #528]	@ (80053ac <process_control_request+0x2bc>)
 800519c:	4413      	add	r3, r2
 800519e:	791b      	ldrb	r3, [r3, #4]
 80051a0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const * driver = NULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if ( drvid < _app_driver_count ) {
 80051a8:	4b81      	ldr	r3, [pc, #516]	@ (80053b0 <process_control_request+0x2c0>)
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d207      	bcs.n	80051c4 <process_control_request+0xd4>
    driver = &_app_driver[drvid];
 80051b4:	4b7f      	ldr	r3, [pc, #508]	@ (80053b4 <process_control_request+0x2c4>)
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80051bc:	015b      	lsls	r3, r3, #5
 80051be:	4413      	add	r3, r2
 80051c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051c2:	e00e      	b.n	80051e2 <process_control_request+0xf2>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80051c4:	4b7a      	ldr	r3, [pc, #488]	@ (80053b0 <process_control_request+0x2c0>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d808      	bhi.n	80051e2 <process_control_request+0xf2>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80051d0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80051d4:	4a76      	ldr	r2, [pc, #472]	@ (80053b0 <process_control_request+0x2c0>)
 80051d6:	7812      	ldrb	r2, [r2, #0]
 80051d8:	1a9b      	subs	r3, r3, r2
 80051da:	015b      	lsls	r3, r3, #5
 80051dc:	4a76      	ldr	r2, [pc, #472]	@ (80053b8 <process_control_request+0x2c8>)
 80051de:	4413      	add	r3, r2
 80051e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
 80051e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80051e4:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
 80051e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <process_control_request+0x100>
 80051ec:	2300      	movs	r3, #0
 80051ee:	e252      	b.n	8005696 <process_control_request+0x5a6>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 80051f0:	79fb      	ldrb	r3, [r7, #7]
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff ff62 	bl	80050c0 <invoke_class_control>
 80051fc:	4603      	mov	r3, r0
 80051fe:	e24a      	b.n	8005696 <process_control_request+0x5a6>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <process_control_request+0x134>
        // Non-standard request is not supported
        TU_BREAKPOINT();
 800520e:	4b65      	ldr	r3, [pc, #404]	@ (80053a4 <process_control_request+0x2b4>)
 8005210:	643b      	str	r3, [r7, #64]	@ 0x40
 8005212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d000      	beq.n	8005220 <process_control_request+0x130>
 800521e:	be00      	bkpt	0x0000
        return false;
 8005220:	2300      	movs	r3, #0
 8005222:	e238      	b.n	8005696 <process_control_request+0x5a6>
      }

      switch ( p_request->bRequest ) {
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	785b      	ldrb	r3, [r3, #1]
 8005228:	2b09      	cmp	r3, #9
 800522a:	f200 80e0 	bhi.w	80053ee <process_control_request+0x2fe>
 800522e:	a201      	add	r2, pc, #4	@ (adr r2, 8005234 <process_control_request+0x144>)
 8005230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005234:	080053bd 	.word	0x080053bd
 8005238:	08005381 	.word	0x08005381
 800523c:	080053ef 	.word	0x080053ef
 8005240:	0800535b 	.word	0x0800535b
 8005244:	080053ef 	.word	0x080053ef
 8005248:	0800525d 	.word	0x0800525d
 800524c:	08005341 	.word	0x08005341
 8005250:	080053ef 	.word	0x080053ef
 8005254:	08005281 	.word	0x08005281
 8005258:	08005299 	.word	0x08005299
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 800525c:	6838      	ldr	r0, [r7, #0]
 800525e:	f001 f96f 	bl	8006540 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	885b      	ldrh	r3, [r3, #2]
 8005266:	b29b      	uxth	r3, r3
 8005268:	b2da      	uxtb	r2, r3
 800526a:	79fb      	ldrb	r3, [r7, #7]
 800526c:	4611      	mov	r1, r2
 800526e:	4618      	mov	r0, r3
 8005270:	f001 ff1a 	bl	80070a8 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8005274:	4a4d      	ldr	r2, [pc, #308]	@ (80053ac <process_control_request+0x2bc>)
 8005276:	7813      	ldrb	r3, [r2, #0]
 8005278:	f043 0302 	orr.w	r3, r3, #2
 800527c:	7013      	strb	r3, [r2, #0]
        break;
 800527e:	e0c2      	b.n	8005406 <process_control_request+0x316>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8005280:	4b4a      	ldr	r3, [pc, #296]	@ (80053ac <process_control_request+0x2bc>)
 8005282:	785b      	ldrb	r3, [r3, #1]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8005288:	f107 0213 	add.w	r2, r7, #19
 800528c:	79f8      	ldrb	r0, [r7, #7]
 800528e:	2301      	movs	r3, #1
 8005290:	6839      	ldr	r1, [r7, #0]
 8005292:	f001 f8c9 	bl	8006428 <tud_control_xfer>
        }
        break;
 8005296:	e0b6      	b.n	8005406 <process_control_request+0x316>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	885b      	ldrh	r3, [r3, #2]
 800529c:	b29b      	uxth	r3, r3
 800529e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
 80052a2:	4b42      	ldr	r3, [pc, #264]	@ (80053ac <process_control_request+0x2bc>)
 80052a4:	785b      	ldrb	r3, [r3, #1]
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d041      	beq.n	8005334 <process_control_request+0x244>
            if ( _usbd_dev.cfg_num ) {
 80052b0:	4b3e      	ldr	r3, [pc, #248]	@ (80053ac <process_control_request+0x2bc>)
 80052b2:	785b      	ldrb	r3, [r3, #1]
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d014      	beq.n	80052e4 <process_control_request+0x1f4>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // disable SOF
              dcd_sof_enable(rhport, false);
 80052ba:	79fb      	ldrb	r3, [r7, #7]
 80052bc:	2100      	movs	r1, #0
 80052be:	4618      	mov	r0, r3
 80052c0:	f001 ff72 	bl	80071a8 <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 80052c4:	79fb      	ldrb	r3, [r7, #7]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f001 ffd6 	bl	8007278 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 80052cc:	4b37      	ldr	r3, [pc, #220]	@ (80053ac <process_control_request+0x2bc>)
 80052ce:	789b      	ldrb	r3, [r3, #2]
 80052d0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
 80052d4:	79fb      	ldrb	r3, [r7, #7]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff fcda 	bl	8004c90 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 80052dc:	4a33      	ldr	r2, [pc, #204]	@ (80053ac <process_control_request+0x2bc>)
 80052de:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80052e2:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
 80052e4:	4a31      	ldr	r2, [pc, #196]	@ (80053ac <process_control_request+0x2bc>)
 80052e6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80052ea:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
 80052ec:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d01d      	beq.n	8005330 <process_control_request+0x240>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
 80052f4:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80052f8:	79fb      	ldrb	r3, [r7, #7]
 80052fa:	4611      	mov	r1, r2
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 f9d3 	bl	80056a8 <process_set_config>
 8005302:	4603      	mov	r3, r0
 8005304:	f083 0301 	eor.w	r3, r3, #1
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00d      	beq.n	800532a <process_control_request+0x23a>
                TU_MESS_FAILED();
                TU_BREAKPOINT();
 800530e:	4b25      	ldr	r3, [pc, #148]	@ (80053a4 <process_control_request+0x2b4>)
 8005310:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005312:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d000      	beq.n	8005320 <process_control_request+0x230>
 800531e:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 8005320:	4b22      	ldr	r3, [pc, #136]	@ (80053ac <process_control_request+0x2bc>)
 8005322:	2200      	movs	r2, #0
 8005324:	705a      	strb	r2, [r3, #1]
                return false;
 8005326:	2300      	movs	r3, #0
 8005328:	e1b5      	b.n	8005696 <process_control_request+0x5a6>
              }
              tud_mount_cb();
 800532a:	f7fb f967 	bl	80005fc <tud_mount_cb>
 800532e:	e001      	b.n	8005334 <process_control_request+0x244>
            } else {
              tud_umount_cb();
 8005330:	f7fb f96b 	bl	800060a <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
 8005334:	79fb      	ldrb	r3, [r7, #7]
 8005336:	6839      	ldr	r1, [r7, #0]
 8005338:	4618      	mov	r0, r3
 800533a:	f001 f803 	bl	8006344 <tud_control_status>
        }
        break;
 800533e:	e062      	b.n	8005406 <process_control_request+0x316>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 8005340:	79fb      	ldrb	r3, [r7, #7]
 8005342:	6839      	ldr	r1, [r7, #0]
 8005344:	4618      	mov	r0, r3
 8005346:	f000 fae1 	bl	800590c <process_get_descriptor>
 800534a:	4603      	mov	r3, r0
 800534c:	f083 0301 	eor.w	r3, r3, #1
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d056      	beq.n	8005404 <process_control_request+0x314>
 8005356:	2300      	movs	r3, #0
 8005358:	e19d      	b.n	8005696 <process_control_request+0x5a6>
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	885b      	ldrh	r3, [r3, #2]
 800535e:	b29b      	uxth	r3, r3
 8005360:	2b01      	cmp	r3, #1
 8005362:	d10b      	bne.n	800537c <process_control_request+0x28c>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
 8005364:	4a11      	ldr	r2, [pc, #68]	@ (80053ac <process_control_request+0x2bc>)
 8005366:	7813      	ldrb	r3, [r2, #0]
 8005368:	f043 0308 	orr.w	r3, r3, #8
 800536c:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
 800536e:	79fb      	ldrb	r3, [r7, #7]
 8005370:	6839      	ldr	r1, [r7, #0]
 8005372:	4618      	mov	r0, r3
 8005374:	f000 ffe6 	bl	8006344 <tud_control_status>
            break;
 8005378:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
 800537a:	e044      	b.n	8005406 <process_control_request+0x316>
            default: return false;
 800537c:	2300      	movs	r3, #0
 800537e:	e18a      	b.n	8005696 <process_control_request+0x5a6>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	885b      	ldrh	r3, [r3, #2]
 8005384:	b29b      	uxth	r3, r3
 8005386:	2b01      	cmp	r3, #1
 8005388:	d001      	beq.n	800538e <process_control_request+0x29e>
 800538a:	2300      	movs	r3, #0
 800538c:	e183      	b.n	8005696 <process_control_request+0x5a6>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 800538e:	4a07      	ldr	r2, [pc, #28]	@ (80053ac <process_control_request+0x2bc>)
 8005390:	7813      	ldrb	r3, [r2, #0]
 8005392:	f023 0308 	bic.w	r3, r3, #8
 8005396:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8005398:	79fb      	ldrb	r3, [r7, #7]
 800539a:	6839      	ldr	r1, [r7, #0]
 800539c:	4618      	mov	r0, r3
 800539e:	f000 ffd1 	bl	8006344 <tud_control_status>
        break;
 80053a2:	e030      	b.n	8005406 <process_control_request+0x316>
 80053a4:	e000edf0 	.word	0xe000edf0
 80053a8:	08004a6d 	.word	0x08004a6d
 80053ac:	20000814 	.word	0x20000814
 80053b0:	20000848 	.word	0x20000848
 80053b4:	20000844 	.word	0x20000844
 80053b8:	08008804 	.word	0x08008804

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 80053bc:	4b93      	ldr	r3, [pc, #588]	@ (800560c <process_control_request+0x51c>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	095b      	lsrs	r3, r3, #5
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	4b90      	ldr	r3, [pc, #576]	@ (800560c <process_control_request+0x51c>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	089b      	lsrs	r3, r3, #2
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	4313      	orrs	r3, r2
 80053da:	b29b      	uxth	r3, r3
 80053dc:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 80053de:	f107 0210 	add.w	r2, r7, #16
 80053e2:	79f8      	ldrb	r0, [r7, #7]
 80053e4:	2302      	movs	r3, #2
 80053e6:	6839      	ldr	r1, [r7, #0]
 80053e8:	f001 f81e 	bl	8006428 <tud_control_xfer>
          break;
 80053ec:	e00b      	b.n	8005406 <process_control_request+0x316>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 80053ee:	4b88      	ldr	r3, [pc, #544]	@ (8005610 <process_control_request+0x520>)
 80053f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80053f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d000      	beq.n	8005400 <process_control_request+0x310>
 80053fe:	be00      	bkpt	0x0000
 8005400:	2300      	movs	r3, #0
 8005402:	e148      	b.n	8005696 <process_control_request+0x5a6>
        break;
 8005404:	bf00      	nop
      }
    break;
 8005406:	e145      	b.n	8005694 <process_control_request+0x5a4>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	889b      	ldrh	r3, [r3, #4]
 800540c:	b29b      	uxth	r3, r3
 800540e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005410:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005412:	b2db      	uxtb	r3, r3
 8005414:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8005418:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800541c:	2b0f      	cmp	r3, #15
 800541e:	d901      	bls.n	8005424 <process_control_request+0x334>
 8005420:	2300      	movs	r3, #0
 8005422:	e138      	b.n	8005696 <process_control_request+0x5a6>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8005424:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005428:	4a78      	ldr	r2, [pc, #480]	@ (800560c <process_control_request+0x51c>)
 800542a:	4413      	add	r3, r2
 800542c:	791b      	ldrb	r3, [r3, #4]
 800542e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const * driver = NULL;
 8005432:	2300      	movs	r3, #0
 8005434:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8005436:	4b77      	ldr	r3, [pc, #476]	@ (8005614 <process_control_request+0x524>)
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800543e:	429a      	cmp	r2, r3
 8005440:	d207      	bcs.n	8005452 <process_control_request+0x362>
    driver = &_app_driver[drvid];
 8005442:	4b75      	ldr	r3, [pc, #468]	@ (8005618 <process_control_request+0x528>)
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800544a:	015b      	lsls	r3, r3, #5
 800544c:	4413      	add	r3, r2
 800544e:	623b      	str	r3, [r7, #32]
 8005450:	e00e      	b.n	8005470 <process_control_request+0x380>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8005452:	4b70      	ldr	r3, [pc, #448]	@ (8005614 <process_control_request+0x524>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800545a:	429a      	cmp	r2, r3
 800545c:	d808      	bhi.n	8005470 <process_control_request+0x380>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800545e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005462:	4a6c      	ldr	r2, [pc, #432]	@ (8005614 <process_control_request+0x524>)
 8005464:	7812      	ldrb	r2, [r2, #0]
 8005466:	1a9b      	subs	r3, r3, r2
 8005468:	015b      	lsls	r3, r3, #5
 800546a:	4a6c      	ldr	r2, [pc, #432]	@ (800561c <process_control_request+0x52c>)
 800546c:	4413      	add	r3, r2
 800546e:	623b      	str	r3, [r7, #32]
  return driver;
 8005470:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8005472:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
 8005474:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <process_control_request+0x38e>
 800547a:	2300      	movs	r3, #0
 800547c:	e10b      	b.n	8005696 <process_control_request+0x5a6>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 800547e:	79fb      	ldrb	r3, [r7, #7]
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005484:	4618      	mov	r0, r3
 8005486:	f7ff fe1b 	bl	80050c0 <invoke_class_control>
 800548a:	4603      	mov	r3, r0
 800548c:	f083 0301 	eor.w	r3, r3, #1
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 80fd 	beq.w	8005692 <process_control_request+0x5a2>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <process_control_request+0x3ba>
 80054a6:	2300      	movs	r3, #0
 80054a8:	e0f5      	b.n	8005696 <process_control_request+0x5a6>

        switch(p_request->bRequest) {
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	785b      	ldrb	r3, [r3, #1]
 80054ae:	3b0a      	subs	r3, #10
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d816      	bhi.n	80054e2 <process_control_request+0x3f2>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 80054b4:	2000      	movs	r0, #0
 80054b6:	f001 f833 	bl	8006520 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	785b      	ldrb	r3, [r3, #1]
 80054be:	2b0a      	cmp	r3, #10
 80054c0:	d109      	bne.n	80054d6 <process_control_request+0x3e6>
              uint8_t alternate = 0;
 80054c2:	2300      	movs	r3, #0
 80054c4:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 80054c6:	f107 020f 	add.w	r2, r7, #15
 80054ca:	79f8      	ldrb	r0, [r7, #7]
 80054cc:	2301      	movs	r3, #1
 80054ce:	6839      	ldr	r1, [r7, #0]
 80054d0:	f000 ffaa 	bl	8006428 <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
 80054d4:	e007      	b.n	80054e6 <process_control_request+0x3f6>
              tud_control_status(rhport, p_request);
 80054d6:	79fb      	ldrb	r3, [r7, #7]
 80054d8:	6839      	ldr	r1, [r7, #0]
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 ff32 	bl	8006344 <tud_control_status>
          break;
 80054e0:	e001      	b.n	80054e6 <process_control_request+0x3f6>

          default: return false;
 80054e2:	2300      	movs	r3, #0
 80054e4:	e0d7      	b.n	8005696 <process_control_request+0x5a6>
        }
      }
      break;
 80054e6:	e0d4      	b.n	8005692 <process_control_request+0x5a2>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	889b      	ldrh	r3, [r3, #4]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	83bb      	strh	r3, [r7, #28]
 80054f0:	8bbb      	ldrh	r3, [r7, #28]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80054f8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80054fc:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80054fe:	7fbb      	ldrb	r3, [r7, #30]
 8005500:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005504:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8005506:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 800550a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800550e:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005510:	7ffb      	ldrb	r3, [r7, #31]
 8005512:	09db      	lsrs	r3, r3, #7
 8005514:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8005516:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 800551a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800551e:	2b05      	cmp	r3, #5
 8005520:	d90a      	bls.n	8005538 <process_control_request+0x448>
 8005522:	4b3b      	ldr	r3, [pc, #236]	@ (8005610 <process_control_request+0x520>)
 8005524:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005526:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d000      	beq.n	8005534 <process_control_request+0x444>
 8005532:	be00      	bkpt	0x0000
 8005534:	2300      	movs	r3, #0
 8005536:	e0ae      	b.n	8005696 <process_control_request+0x5a6>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8005538:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 800553c:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8005540:	4932      	ldr	r1, [pc, #200]	@ (800560c <process_control_request+0x51c>)
 8005542:	0052      	lsls	r2, r2, #1
 8005544:	440a      	add	r2, r1
 8005546:	4413      	add	r3, r2
 8005548:	3314      	adds	r3, #20
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 800554e:	2300      	movs	r3, #0
 8005550:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 8005552:	4b30      	ldr	r3, [pc, #192]	@ (8005614 <process_control_request+0x524>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	7efa      	ldrb	r2, [r7, #27]
 8005558:	429a      	cmp	r2, r3
 800555a:	d206      	bcs.n	800556a <process_control_request+0x47a>
    driver = &_app_driver[drvid];
 800555c:	4b2e      	ldr	r3, [pc, #184]	@ (8005618 <process_control_request+0x528>)
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	7efb      	ldrb	r3, [r7, #27]
 8005562:	015b      	lsls	r3, r3, #5
 8005564:	4413      	add	r3, r2
 8005566:	617b      	str	r3, [r7, #20]
 8005568:	e00c      	b.n	8005584 <process_control_request+0x494>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800556a:	4b2a      	ldr	r3, [pc, #168]	@ (8005614 <process_control_request+0x524>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	7efa      	ldrb	r2, [r7, #27]
 8005570:	429a      	cmp	r2, r3
 8005572:	d807      	bhi.n	8005584 <process_control_request+0x494>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8005574:	7efb      	ldrb	r3, [r7, #27]
 8005576:	4a27      	ldr	r2, [pc, #156]	@ (8005614 <process_control_request+0x524>)
 8005578:	7812      	ldrb	r2, [r2, #0]
 800557a:	1a9b      	subs	r3, r3, r2
 800557c:	015b      	lsls	r3, r3, #5
 800557e:	4a27      	ldr	r2, [pc, #156]	@ (800561c <process_control_request+0x52c>)
 8005580:	4413      	add	r3, r2
 8005582:	617b      	str	r3, [r7, #20]
  return driver;
 8005584:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8005586:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00c      	beq.n	80055b0 <process_control_request+0x4c0>
        // Forward class request to its driver
        TU_VERIFY(driver);
 8005596:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <process_control_request+0x4b0>
 800559c:	2300      	movs	r3, #0
 800559e:	e07a      	b.n	8005696 <process_control_request+0x5a6>
        return invoke_class_control(rhport, driver, p_request);
 80055a0:	79fb      	ldrb	r3, [r7, #7]
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff fd8a 	bl	80050c0 <invoke_class_control>
 80055ac:	4603      	mov	r3, r0
 80055ae:	e072      	b.n	8005696 <process_control_request+0x5a6>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	785b      	ldrb	r3, [r3, #1]
 80055b4:	2b03      	cmp	r3, #3
 80055b6:	d017      	beq.n	80055e8 <process_control_request+0x4f8>
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	dc52      	bgt.n	8005662 <process_control_request+0x572>
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <process_control_request+0x4d6>
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d011      	beq.n	80055e8 <process_control_request+0x4f8>
 80055c4:	e04d      	b.n	8005662 <process_control_request+0x572>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 80055c6:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	4611      	mov	r1, r2
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fe62 	bl	8006298 <usbd_edpt_stalled>
 80055d4:	4603      	mov	r3, r0
 80055d6:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 80055d8:	f107 020c 	add.w	r2, r7, #12
 80055dc:	79f8      	ldrb	r0, [r7, #7]
 80055de:	2302      	movs	r3, #2
 80055e0:	6839      	ldr	r1, [r7, #0]
 80055e2:	f000 ff21 	bl	8006428 <tud_control_xfer>
          }
          break;
 80055e6:	e048      	b.n	800567a <process_control_request+0x58a>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	885b      	ldrh	r3, [r3, #2]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d11d      	bne.n	800562e <process_control_request+0x53e>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	785b      	ldrb	r3, [r3, #1]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d112      	bne.n	8005620 <process_control_request+0x530>
                usbd_edpt_clear_stall(rhport, ep_addr);
 80055fa:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80055fe:	79fb      	ldrb	r3, [r7, #7]
 8005600:	4611      	mov	r1, r2
 8005602:	4618      	mov	r0, r3
 8005604:	f000 fe0a 	bl	800621c <usbd_edpt_clear_stall>
 8005608:	e011      	b.n	800562e <process_control_request+0x53e>
 800560a:	bf00      	nop
 800560c:	20000814 	.word	0x20000814
 8005610:	e000edf0 	.word	0xe000edf0
 8005614:	20000848 	.word	0x20000848
 8005618:	20000844 	.word	0x20000844
 800561c:	08008804 	.word	0x08008804
              }else {
                usbd_edpt_stall(rhport, ep_addr);
 8005620:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8005624:	79fb      	ldrb	r3, [r7, #7]
 8005626:	4611      	mov	r1, r2
 8005628:	4618      	mov	r0, r3
 800562a:	f000 fdb9 	bl	80061a0 <usbd_edpt_stall>
              }
            }

            if (driver) {
 800562e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005630:	2b00      	cmp	r3, #0
 8005632:	d021      	beq.n	8005678 <process_control_request+0x588>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff fd40 	bl	80050c0 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8005640:	2000      	movs	r0, #0
 8005642:	f000 ff6d 	bl	8006520 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8005646:	4b16      	ldr	r3, [pc, #88]	@ (80056a0 <process_control_request+0x5b0>)
 8005648:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800564c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d110      	bne.n	8005678 <process_control_request+0x588>
 8005656:	79fb      	ldrb	r3, [r7, #7]
 8005658:	6839      	ldr	r1, [r7, #0]
 800565a:	4618      	mov	r0, r3
 800565c:	f000 fe72 	bl	8006344 <tud_control_status>
            }
          }
          break;
 8005660:	e00a      	b.n	8005678 <process_control_request+0x588>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
 8005662:	4b10      	ldr	r3, [pc, #64]	@ (80056a4 <process_control_request+0x5b4>)
 8005664:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005666:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d000      	beq.n	8005674 <process_control_request+0x584>
 8005672:	be00      	bkpt	0x0000
            return false;
 8005674:	2300      	movs	r3, #0
 8005676:	e00e      	b.n	8005696 <process_control_request+0x5a6>
          break;
 8005678:	bf00      	nop
        }
      }
    }
    break;
 800567a:	e00b      	b.n	8005694 <process_control_request+0x5a4>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
 800567c:	4b09      	ldr	r3, [pc, #36]	@ (80056a4 <process_control_request+0x5b4>)
 800567e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	d000      	beq.n	800568e <process_control_request+0x59e>
 800568c:	be00      	bkpt	0x0000
      return false;
 800568e:	2300      	movs	r3, #0
 8005690:	e001      	b.n	8005696 <process_control_request+0x5a6>
      break;
 8005692:	bf00      	nop
  }

  return true;
 8005694:	2301      	movs	r3, #1
}
 8005696:	4618      	mov	r0, r3
 8005698:	3768      	adds	r7, #104	@ 0x68
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	20000814 	.word	0x20000814
 80056a4:	e000edf0 	.word	0xe000edf0

080056a8 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b096      	sub	sp, #88	@ 0x58
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	4603      	mov	r3, r0
 80056b0:	460a      	mov	r2, r1
 80056b2:	71fb      	strb	r3, [r7, #7]
 80056b4:	4613      	mov	r3, r2
 80056b6:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 80056b8:	79bb      	ldrb	r3, [r7, #6]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fb facc 	bl	8000c5c <tud_descriptor_configuration_cb>
 80056c4:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 80056c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <process_set_config+0x2c>
 80056cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056ce:	785b      	ldrb	r3, [r3, #1]
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d00a      	beq.n	80056ea <process_set_config+0x42>
 80056d4:	4b86      	ldr	r3, [pc, #536]	@ (80058f0 <process_set_config+0x248>)
 80056d6:	623b      	str	r3, [r7, #32]
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d000      	beq.n	80056e6 <process_set_config+0x3e>
 80056e4:	be00      	bkpt	0x0000
 80056e6:	2300      	movs	r3, #0
 80056e8:	e0fd      	b.n	80058e6 <process_set_config+0x23e>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 80056ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056ec:	79db      	ldrb	r3, [r3, #7]
 80056ee:	115b      	asrs	r3, r3, #5
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	b2d9      	uxtb	r1, r3
 80056f6:	4a7f      	ldr	r2, [pc, #508]	@ (80058f4 <process_set_config+0x24c>)
 80056f8:	7813      	ldrb	r3, [r2, #0]
 80056fa:	f361 1304 	bfi	r3, r1, #4, #1
 80056fe:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8005700:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005702:	79db      	ldrb	r3, [r3, #7]
 8005704:	119b      	asrs	r3, r3, #6
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	b2d9      	uxtb	r1, r3
 800570c:	4a79      	ldr	r2, [pc, #484]	@ (80058f4 <process_set_config+0x24c>)
 800570e:	7813      	ldrb	r3, [r2, #0]
 8005710:	f361 1345 	bfi	r3, r1, #5, #1
 8005714:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8005716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005718:	3309      	adds	r3, #9
 800571a:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 800571c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800571e:	885b      	ldrh	r3, [r3, #2]
 8005720:	b29b      	uxth	r3, r3
 8005722:	461a      	mov	r2, r3
 8005724:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005726:	4413      	add	r3, r2
 8005728:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
 800572a:	e0d6      	b.n	80058da <process_set_config+0x232>
  {
    uint8_t assoc_itf_count = 1;
 800572c:	2301      	movs	r3, #1
 800572e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8005732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005734:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	3301      	adds	r3, #1
 800573a:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 800573c:	2b0b      	cmp	r3, #11
 800573e:	d10f      	bne.n	8005760 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8005740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005742:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 8005744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005746:	78db      	ldrb	r3, [r3, #3]
 8005748:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800574c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800574e:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 800575e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005762:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	3301      	adds	r3, #1
 8005768:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 800576a:	2b04      	cmp	r3, #4
 800576c:	d00a      	beq.n	8005784 <process_set_config+0xdc>
 800576e:	4b60      	ldr	r3, [pc, #384]	@ (80058f0 <process_set_config+0x248>)
 8005770:	627b      	str	r3, [r7, #36]	@ 0x24
 8005772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d000      	beq.n	8005780 <process_set_config+0xd8>
 800577e:	be00      	bkpt	0x0000
 8005780:	2300      	movs	r3, #0
 8005782:	e0b0      	b.n	80058e6 <process_set_config+0x23e>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8005784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005786:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8005788:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800578a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8005790:	2300      	movs	r3, #0
 8005792:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8005796:	e088      	b.n	80058aa <process_set_config+0x202>
 8005798:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800579c:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 800579e:	2300      	movs	r3, #0
 80057a0:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 80057a2:	4b55      	ldr	r3, [pc, #340]	@ (80058f8 <process_set_config+0x250>)
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	7bfa      	ldrb	r2, [r7, #15]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d206      	bcs.n	80057ba <process_set_config+0x112>
    driver = &_app_driver[drvid];
 80057ac:	4b53      	ldr	r3, [pc, #332]	@ (80058fc <process_set_config+0x254>)
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
 80057b2:	015b      	lsls	r3, r3, #5
 80057b4:	4413      	add	r3, r2
 80057b6:	60bb      	str	r3, [r7, #8]
 80057b8:	e00c      	b.n	80057d4 <process_set_config+0x12c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80057ba:	4b4f      	ldr	r3, [pc, #316]	@ (80058f8 <process_set_config+0x250>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	7bfa      	ldrb	r2, [r7, #15]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d807      	bhi.n	80057d4 <process_set_config+0x12c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	4a4c      	ldr	r2, [pc, #304]	@ (80058f8 <process_set_config+0x250>)
 80057c8:	7812      	ldrb	r2, [r2, #0]
 80057ca:	1a9b      	subs	r3, r3, r2
 80057cc:	015b      	lsls	r3, r3, #5
 80057ce:	4a4c      	ldr	r2, [pc, #304]	@ (8005900 <process_set_config+0x258>)
 80057d0:	4413      	add	r3, r2
 80057d2:	60bb      	str	r3, [r7, #8]
  return driver;
 80057d4:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 80057d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
 80057d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10a      	bne.n	80057f4 <process_set_config+0x14c>
 80057de:	4b44      	ldr	r3, [pc, #272]	@ (80058f0 <process_set_config+0x248>)
 80057e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d000      	beq.n	80057f0 <process_set_config+0x148>
 80057ee:	be00      	bkpt	0x0000
 80057f0:	2300      	movs	r3, #0
 80057f2:	e078      	b.n	80058e6 <process_set_config+0x23e>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 80057f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80057fa:	79f8      	ldrb	r0, [r7, #7]
 80057fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057fe:	4798      	blx	r3
 8005800:	4603      	mov	r3, r0
 8005802:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8005804:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005806:	2b08      	cmp	r3, #8
 8005808:	d94a      	bls.n	80058a0 <process_set_config+0x1f8>
 800580a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800580c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800580e:	429a      	cmp	r2, r3
 8005810:	d846      	bhi.n	80058a0 <process_set_config+0x1f8>
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 8005812:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8005816:	2b01      	cmp	r3, #1
 8005818:	d107      	bne.n	800582a <process_set_config+0x182>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 800581a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	4a39      	ldr	r2, [pc, #228]	@ (8005904 <process_set_config+0x25c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d102      	bne.n	800582a <process_set_config+0x182>
 8005824:	2302      	movs	r3, #2
 8005826:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 800582a:	2300      	movs	r3, #0
 800582c:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8005830:	e024      	b.n	800587c <process_set_config+0x1d4>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8005832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005834:	789a      	ldrb	r2, [r3, #2]
 8005836:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800583a:	4413      	add	r3, r2
 800583c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8005840:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005844:	4a2b      	ldr	r2, [pc, #172]	@ (80058f4 <process_set_config+0x24c>)
 8005846:	4413      	add	r3, r2
 8005848:	791b      	ldrb	r3, [r3, #4]
 800584a:	2bff      	cmp	r3, #255	@ 0xff
 800584c:	d00a      	beq.n	8005864 <process_set_config+0x1bc>
 800584e:	4b28      	ldr	r3, [pc, #160]	@ (80058f0 <process_set_config+0x248>)
 8005850:	633b      	str	r3, [r7, #48]	@ 0x30
 8005852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d000      	beq.n	8005860 <process_set_config+0x1b8>
 800585e:	be00      	bkpt	0x0000
 8005860:	2300      	movs	r3, #0
 8005862:	e040      	b.n	80058e6 <process_set_config+0x23e>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8005864:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005868:	4a22      	ldr	r2, [pc, #136]	@ (80058f4 <process_set_config+0x24c>)
 800586a:	4413      	add	r3, r2
 800586c:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8005870:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8005872:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8005876:	3301      	adds	r3, #1
 8005878:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 800587c:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8005880:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8005884:	429a      	cmp	r2, r3
 8005886:	d3d4      	bcc.n	8005832 <process_set_config+0x18a>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8005888:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800588c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800588e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005890:	481d      	ldr	r0, [pc, #116]	@ (8005908 <process_set_config+0x260>)
 8005892:	f002 feb1 	bl	80085f8 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8005896:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005898:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800589a:	4413      	add	r3, r2
 800589c:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
 800589e:	e00b      	b.n	80058b8 <process_set_config+0x210>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 80058a0:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80058a4:	3301      	adds	r3, #1
 80058a6:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 80058aa:	4b13      	ldr	r3, [pc, #76]	@ (80058f8 <process_set_config+0x250>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 80058b2:	429a      	cmp	r2, r3
 80058b4:	f67f af70 	bls.w	8005798 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 80058b8:	4b0f      	ldr	r3, [pc, #60]	@ (80058f8 <process_set_config+0x250>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d90a      	bls.n	80058da <process_set_config+0x232>
 80058c4:	4b0a      	ldr	r3, [pc, #40]	@ (80058f0 <process_set_config+0x248>)
 80058c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d000      	beq.n	80058d6 <process_set_config+0x22e>
 80058d4:	be00      	bkpt	0x0000
 80058d6:	2300      	movs	r3, #0
 80058d8:	e005      	b.n	80058e6 <process_set_config+0x23e>
  while( p_desc < desc_end )
 80058da:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80058dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058de:	429a      	cmp	r2, r3
 80058e0:	f4ff af24 	bcc.w	800572c <process_set_config+0x84>
  }

  return true;
 80058e4:	2301      	movs	r3, #1
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3758      	adds	r7, #88	@ 0x58
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	e000edf0 	.word	0xe000edf0
 80058f4:	20000814 	.word	0x20000814
 80058f8:	20000848 	.word	0x20000848
 80058fc:	20000844 	.word	0x20000844
 8005900:	08008804 	.word	0x08008804
 8005904:	08003851 	.word	0x08003851
 8005908:	20000828 	.word	0x20000828

0800590c <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b094      	sub	sp, #80	@ 0x50
 8005910:	af00      	add	r7, sp, #0
 8005912:	4603      	mov	r3, r0
 8005914:	6039      	str	r1, [r7, #0]
 8005916:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	885b      	ldrh	r3, [r3, #2]
 800591c:	b29b      	uxth	r3, r3
 800591e:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8005920:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005922:	0a1b      	lsrs	r3, r3, #8
 8005924:	b29b      	uxth	r3, r3
 8005926:	b2db      	uxtb	r3, r3
 8005928:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	885b      	ldrh	r3, [r3, #2]
 8005930:	b29b      	uxth	r3, r3
 8005932:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8005934:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005936:	b2db      	uxtb	r3, r3
 8005938:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
 800593c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8005940:	3b01      	subs	r3, #1
 8005942:	2b0e      	cmp	r3, #14
 8005944:	f200 80b4 	bhi.w	8005ab0 <process_get_descriptor+0x1a4>
 8005948:	a201      	add	r2, pc, #4	@ (adr r2, 8005950 <process_get_descriptor+0x44>)
 800594a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594e:	bf00      	nop
 8005950:	0800598d 	.word	0x0800598d
 8005954:	080059f1 	.word	0x080059f1
 8005958:	08005a57 	.word	0x08005a57
 800595c:	08005ab1 	.word	0x08005ab1
 8005960:	08005ab1 	.word	0x08005ab1
 8005964:	08005a8b 	.word	0x08005a8b
 8005968:	080059f1 	.word	0x080059f1
 800596c:	08005ab1 	.word	0x08005ab1
 8005970:	08005ab1 	.word	0x08005ab1
 8005974:	08005ab1 	.word	0x08005ab1
 8005978:	08005ab1 	.word	0x08005ab1
 800597c:	08005ab1 	.word	0x08005ab1
 8005980:	08005ab1 	.word	0x08005ab1
 8005984:	08005ab1 	.word	0x08005ab1
 8005988:	080059bf 	.word	0x080059bf
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 800598c:	f7fb f95c 	bl	8000c48 <tud_descriptor_device_cb>
 8005990:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TU_ASSERT(desc_device);
 8005992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10a      	bne.n	80059ae <process_get_descriptor+0xa2>
 8005998:	4b48      	ldr	r3, [pc, #288]	@ (8005abc <process_get_descriptor+0x1b0>)
 800599a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800599c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d000      	beq.n	80059aa <process_get_descriptor+0x9e>
 80059a8:	be00      	bkpt	0x0000
 80059aa:	2300      	movs	r3, #0
 80059ac:	e081      	b.n	8005ab2 <process_get_descriptor+0x1a6>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 80059ae:	79f8      	ldrb	r0, [r7, #7]
 80059b0:	2312      	movs	r3, #18
 80059b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059b4:	6839      	ldr	r1, [r7, #0]
 80059b6:	f000 fd37 	bl	8006428 <tud_control_xfer>
 80059ba:	4603      	mov	r3, r0
 80059bc:	e079      	b.n	8005ab2 <process_get_descriptor+0x1a6>

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 80059be:	f7ff f827 	bl	8004a10 <tud_descriptor_bos_cb>
 80059c2:	4603      	mov	r3, r0
 80059c4:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_VERIFY(desc_bos);
 80059c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <process_get_descriptor+0xc4>
 80059cc:	2300      	movs	r3, #0
 80059ce:	e070      	b.n	8005ab2 <process_get_descriptor+0x1a6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 80059d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059d2:	3302      	adds	r3, #2
 80059d4:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 80059de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80059e4:	79f8      	ldrb	r0, [r7, #7]
 80059e6:	6839      	ldr	r1, [r7, #0]
 80059e8:	f000 fd1e 	bl	8006428 <tud_control_xfer>
 80059ec:	4603      	mov	r3, r0
 80059ee:	e060      	b.n	8005ab2 <process_get_descriptor+0x1a6>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 80059f0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d114      	bne.n	8005a22 <process_get_descriptor+0x116>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 80059f8:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7fb f92d 	bl	8000c5c <tud_descriptor_configuration_cb>
 8005a02:	4603      	mov	r3, r0
 8005a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_ASSERT(desc_config);
 8005a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d116      	bne.n	8005a3a <process_get_descriptor+0x12e>
 8005a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8005abc <process_get_descriptor+0x1b0>)
 8005a0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d000      	beq.n	8005a1e <process_get_descriptor+0x112>
 8005a1c:	be00      	bkpt	0x0000
 8005a1e:	2300      	movs	r3, #0
 8005a20:	e047      	b.n	8005ab2 <process_get_descriptor+0x1a6>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8005a22:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7ff f802 	bl	8004a30 <tud_descriptor_other_speed_configuration_cb>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_VERIFY(desc_config);
 8005a30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <process_get_descriptor+0x12e>
 8005a36:	2300      	movs	r3, #0
 8005a38:	e03b      	b.n	8005ab2 <process_get_descriptor+0x1a6>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8005a3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a3c:	3302      	adds	r3, #2
 8005a3e:	61fb      	str	r3, [r7, #28]
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8005a46:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a48:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005a4a:	79f8      	ldrb	r0, [r7, #7]
 8005a4c:	6839      	ldr	r1, [r7, #0]
 8005a4e:	f000 fceb 	bl	8006428 <tud_control_xfer>
 8005a52:	4603      	mov	r3, r0
 8005a54:	e02d      	b.n	8005ab2 <process_get_descriptor+0x1a6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	889b      	ldrh	r3, [r3, #4]
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8005a60:	4611      	mov	r1, r2
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fb f908 	bl	8000c78 <tud_descriptor_string_cb>
 8005a68:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_str);
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <process_get_descriptor+0x168>
 8005a70:	2300      	movs	r3, #0
 8005a72:	e01e      	b.n	8005ab2 <process_get_descriptor+0x1a6>
 8005a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a76:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8005a7c:	79f8      	ldrb	r0, [r7, #7]
 8005a7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a80:	6839      	ldr	r1, [r7, #0]
 8005a82:	f000 fcd1 	bl	8006428 <tud_control_xfer>
 8005a86:	4603      	mov	r3, r0
 8005a88:	e013      	b.n	8005ab2 <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8005a8a:	f7fe ffc9 	bl	8004a20 <tud_descriptor_device_qualifier_cb>
 8005a8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
      TU_VERIFY(desc_qualifier);
 8005a90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <process_get_descriptor+0x18e>
 8005a96:	2300      	movs	r3, #0
 8005a98:	e00b      	b.n	8005ab2 <process_get_descriptor+0x1a6>
 8005a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8005aa2:	79f8      	ldrb	r0, [r7, #7]
 8005aa4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005aa6:	6839      	ldr	r1, [r7, #0]
 8005aa8:	f000 fcbe 	bl	8006428 <tud_control_xfer>
 8005aac:	4603      	mov	r3, r0
 8005aae:	e000      	b.n	8005ab2 <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    default: return false;
 8005ab0:	2300      	movs	r3, #0
  }
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3750      	adds	r7, #80	@ 0x50
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	e000edf0 	.word	0xe000edf0

08005ac0 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b0a0      	sub	sp, #128	@ 0x80
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	460b      	mov	r3, r1
 8005aca:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 8005acc:	2300      	movs	r3, #0
 8005ace:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	785b      	ldrb	r3, [r3, #1]
 8005ad6:	3b02      	subs	r3, #2
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	f200 8173 	bhi.w	8005dc4 <dcd_event_handler+0x304>
 8005ade:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae4 <dcd_event_handler+0x24>)
 8005ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae4:	08005af9 	.word	0x08005af9
 8005ae8:	08005b69 	.word	0x08005b69
 8005aec:	08005b25 	.word	0x08005b25
 8005af0:	08005b47 	.word	0x08005b47
 8005af4:	08005d91 	.word	0x08005d91
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 8005af8:	4aab      	ldr	r2, [pc, #684]	@ (8005da8 <dcd_event_handler+0x2e8>)
 8005afa:	7813      	ldrb	r3, [r2, #0]
 8005afc:	f023 0301 	bic.w	r3, r3, #1
 8005b00:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 8005b02:	4aa9      	ldr	r2, [pc, #676]	@ (8005da8 <dcd_event_handler+0x2e8>)
 8005b04:	7813      	ldrb	r3, [r2, #0]
 8005b06:	f023 0302 	bic.w	r3, r3, #2
 8005b0a:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 8005b0c:	4ba6      	ldr	r3, [pc, #664]	@ (8005da8 <dcd_event_handler+0x2e8>)
 8005b0e:	2200      	movs	r2, #0
 8005b10:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 8005b12:	4aa5      	ldr	r2, [pc, #660]	@ (8005da8 <dcd_event_handler+0x2e8>)
 8005b14:	7813      	ldrb	r3, [r2, #0]
 8005b16:	f023 0304 	bic.w	r3, r3, #4
 8005b1a:	7013      	strb	r3, [r2, #0]
      send = true;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8005b22:	e158      	b.n	8005dd6 <dcd_event_handler+0x316>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8005b24:	4ba0      	ldr	r3, [pc, #640]	@ (8005da8 <dcd_event_handler+0x2e8>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 814c 	beq.w	8005dcc <dcd_event_handler+0x30c>
        _usbd_dev.suspended = 1;
 8005b34:	4a9c      	ldr	r2, [pc, #624]	@ (8005da8 <dcd_event_handler+0x2e8>)
 8005b36:	7813      	ldrb	r3, [r2, #0]
 8005b38:	f043 0304 	orr.w	r3, r3, #4
 8005b3c:	7013      	strb	r3, [r2, #0]
        send = true;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8005b44:	e142      	b.n	8005dcc <dcd_event_handler+0x30c>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 8005b46:	4b98      	ldr	r3, [pc, #608]	@ (8005da8 <dcd_event_handler+0x2e8>)
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 813d 	beq.w	8005dd0 <dcd_event_handler+0x310>
        _usbd_dev.suspended = 0;
 8005b56:	4a94      	ldr	r2, [pc, #592]	@ (8005da8 <dcd_event_handler+0x2e8>)
 8005b58:	7813      	ldrb	r3, [r2, #0]
 8005b5a:	f023 0304 	bic.w	r3, r3, #4
 8005b5e:	7013      	strb	r3, [r2, #0]
        send = true;
 8005b60:	2301      	movs	r3, #1
 8005b62:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8005b66:	e133      	b.n	8005dd0 <dcd_event_handler+0x310>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8005b6e:	e038      	b.n	8005be2 <dcd_event_handler+0x122>
 8005b70:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8005b74:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 8005b7c:	4b8b      	ldr	r3, [pc, #556]	@ (8005dac <dcd_event_handler+0x2ec>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d207      	bcs.n	8005b98 <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 8005b88:	4b89      	ldr	r3, [pc, #548]	@ (8005db0 <dcd_event_handler+0x2f0>)
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8005b90:	015b      	lsls	r3, r3, #5
 8005b92:	4413      	add	r3, r2
 8005b94:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b96:	e00e      	b.n	8005bb6 <dcd_event_handler+0xf6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8005b98:	4b84      	ldr	r3, [pc, #528]	@ (8005dac <dcd_event_handler+0x2ec>)
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d808      	bhi.n	8005bb6 <dcd_event_handler+0xf6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8005ba4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8005ba8:	4a80      	ldr	r2, [pc, #512]	@ (8005dac <dcd_event_handler+0x2ec>)
 8005baa:	7812      	ldrb	r2, [r2, #0]
 8005bac:	1a9b      	subs	r3, r3, r2
 8005bae:	015b      	lsls	r3, r3, #5
 8005bb0:	4a80      	ldr	r2, [pc, #512]	@ (8005db4 <dcd_event_handler+0x2f4>)
 8005bb2:	4413      	add	r3, r2
 8005bb4:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 8005bb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 8005bb8:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 8005bba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00b      	beq.n	8005bd8 <dcd_event_handler+0x118>
 8005bc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d007      	beq.n	8005bd8 <dcd_event_handler+0x118>
          driver->sof(event->rhport, event->sof.frame_count);
 8005bc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	7810      	ldrb	r0, [r2, #0]
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6852      	ldr	r2, [r2, #4]
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8005bd8:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8005bdc:	3301      	adds	r3, #1
 8005bde:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8005be2:	4b72      	ldr	r3, [pc, #456]	@ (8005dac <dcd_event_handler+0x2ec>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d9c0      	bls.n	8005b70 <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 8005bee:	4b6e      	ldr	r3, [pc, #440]	@ (8005da8 <dcd_event_handler+0x2e8>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d05a      	beq.n	8005cb2 <dcd_event_handler+0x1f2>
        _usbd_dev.suspended = 0;
 8005bfc:	4a6a      	ldr	r2, [pc, #424]	@ (8005da8 <dcd_event_handler+0x2e8>)
 8005bfe:	7813      	ldrb	r3, [r2, #0]
 8005c00:	f023 0304 	bic.w	r3, r3, #4
 8005c04:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8005c06:	f107 0314 	add.w	r3, r7, #20
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	605a      	str	r2, [r3, #4]
 8005c10:	609a      	str	r2, [r3, #8]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	753b      	strb	r3, [r7, #20]
 8005c18:	2305      	movs	r3, #5
 8005c1a:	757b      	strb	r3, [r7, #21]
 8005c1c:	f107 0314 	add.w	r3, r7, #20
 8005c20:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c22:	78fb      	ldrb	r3, [r7, #3]
 8005c24:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8005c28:	4b63      	ldr	r3, [pc, #396]	@ (8005db8 <dcd_event_handler+0x2f8>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c30:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c32:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8005c36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8005c3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c3e:	f083 0301 	eor.w	r3, r3, #1
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d003      	beq.n	8005c50 <dcd_event_handler+0x190>
    qhdl->interrupt_set(false);
 8005c48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 8005c50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c52:	3304      	adds	r3, #4
 8005c54:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fe fe37 	bl	80048ca <tu_fifo_write>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 8005c62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c66:	f083 0301 	eor.w	r3, r3, #1
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <dcd_event_handler+0x1b8>
    qhdl->interrupt_set(true);
 8005c70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2001      	movs	r0, #1
 8005c76:	4798      	blx	r3
  }

  return success;
 8005c78:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8005c7c:	f083 0301 	eor.w	r3, r3, #1
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d009      	beq.n	8005c9a <dcd_event_handler+0x1da>
 8005c86:	4b4d      	ldr	r3, [pc, #308]	@ (8005dbc <dcd_event_handler+0x2fc>)
 8005c88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00c      	beq.n	8005cb0 <dcd_event_handler+0x1f0>
 8005c96:	be00      	bkpt	0x0000
 8005c98:	e00a      	b.n	8005cb0 <dcd_event_handler+0x1f0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8005c9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c9c:	7818      	ldrb	r0, [r3, #0]
 8005c9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ca0:	785b      	ldrb	r3, [r3, #1]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8005ca8:	461a      	mov	r2, r3
 8005caa:	f7fe fe99 	bl	80049e0 <tud_event_hook_cb>
  return true;
 8005cae:	e000      	b.n	8005cb2 <dcd_event_handler+0x1f2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8005cb0:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8005cb2:	4b3d      	ldr	r3, [pc, #244]	@ (8005da8 <dcd_event_handler+0x2e8>)
 8005cb4:	78db      	ldrb	r3, [r3, #3]
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8005cc0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8005cc4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	bf14      	ite	ne
 8005cd2:	2301      	movne	r3, #1
 8005cd4:	2300      	moveq	r3, #0
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d07b      	beq.n	8005dd4 <dcd_event_handler+0x314>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 8005cdc:	f107 0308 	add.w	r3, r7, #8
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	605a      	str	r2, [r3, #4]
 8005ce6:	609a      	str	r2, [r3, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	723b      	strb	r3, [r7, #8]
 8005cee:	2303      	movs	r3, #3
 8005cf0:	727b      	strb	r3, [r7, #9]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	f107 0308 	add.w	r3, r7, #8
 8005cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cfe:	78fb      	ldrb	r3, [r7, #3]
 8005d00:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8005d04:	4b2c      	ldr	r3, [pc, #176]	@ (8005db8 <dcd_event_handler+0x2f8>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d0e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8005d12:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 8005d16:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005d1a:	f083 0301 	eor.w	r3, r3, #1
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <dcd_event_handler+0x26c>
    qhdl->interrupt_set(false);
 8005d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2000      	movs	r0, #0
 8005d2a:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8005d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d2e:	3304      	adds	r3, #4
 8005d30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fe fdc9 	bl	80048ca <tu_fifo_write>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 8005d3e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005d42:	f083 0301 	eor.w	r3, r3, #1
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <dcd_event_handler+0x294>
    qhdl->interrupt_set(true);
 8005d4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2001      	movs	r0, #1
 8005d52:	4798      	blx	r3
  return success;
 8005d54:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005d58:	f083 0301 	eor.w	r3, r3, #1
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d009      	beq.n	8005d76 <dcd_event_handler+0x2b6>
 8005d62:	4b16      	ldr	r3, [pc, #88]	@ (8005dbc <dcd_event_handler+0x2fc>)
 8005d64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00c      	beq.n	8005d8c <dcd_event_handler+0x2cc>
 8005d72:	be00      	bkpt	0x0000
 8005d74:	e00a      	b.n	8005d8c <dcd_event_handler+0x2cc>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8005d76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d78:	7818      	ldrb	r0, [r3, #0]
 8005d7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d7c:	785b      	ldrb	r3, [r3, #1]
 8005d7e:	4619      	mov	r1, r3
 8005d80:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8005d84:	461a      	mov	r2, r3
 8005d86:	f7fe fe2b 	bl	80049e0 <tud_event_hook_cb>
  return true;
 8005d8a:	e000      	b.n	8005d8e <dcd_event_handler+0x2ce>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8005d8c:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 8005d8e:	e021      	b.n	8005dd4 <dcd_event_handler+0x314>

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 8005d90:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc0 <dcd_event_handler+0x300>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	3301      	adds	r3, #1
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	4b09      	ldr	r3, [pc, #36]	@ (8005dc0 <dcd_event_handler+0x300>)
 8005d9c:	701a      	strb	r2, [r3, #0]
      send = true;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8005da4:	e017      	b.n	8005dd6 <dcd_event_handler+0x316>
 8005da6:	bf00      	nop
 8005da8:	20000814 	.word	0x20000814
 8005dac:	20000848 	.word	0x20000848
 8005db0:	20000844 	.word	0x20000844
 8005db4:	08008804 	.word	0x08008804
 8005db8:	2000090c 	.word	0x2000090c
 8005dbc:	e000edf0 	.word	0xe000edf0
 8005dc0:	20000840 	.word	0x20000840

    default:
      send = true;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8005dca:	e004      	b.n	8005dd6 <dcd_event_handler+0x316>
      break;
 8005dcc:	bf00      	nop
 8005dce:	e002      	b.n	8005dd6 <dcd_event_handler+0x316>
      break;
 8005dd0:	bf00      	nop
 8005dd2:	e000      	b.n	8005dd6 <dcd_event_handler+0x316>
      break;
 8005dd4:	bf00      	nop
  }

  if (send) {
 8005dd6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d049      	beq.n	8005e72 <dcd_event_handler+0x3b2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005de2:	78fb      	ldrb	r3, [r7, #3]
 8005de4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8005de8:	4b24      	ldr	r3, [pc, #144]	@ (8005e7c <dcd_event_handler+0x3bc>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005df0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005df2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005df6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 8005dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005dfe:	f083 0301 	eor.w	r3, r3, #1
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <dcd_event_handler+0x350>
    qhdl->interrupt_set(false);
 8005e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8005e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e12:	3304      	adds	r3, #4
 8005e14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fe fd57 	bl	80048ca <tu_fifo_write>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 8005e22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e26:	f083 0301 	eor.w	r3, r3, #1
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <dcd_event_handler+0x378>
    qhdl->interrupt_set(true);
 8005e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2001      	movs	r0, #1
 8005e36:	4798      	blx	r3
  return success;
 8005e38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005e3c:	f083 0301 	eor.w	r3, r3, #1
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d009      	beq.n	8005e5a <dcd_event_handler+0x39a>
 8005e46:	4b0e      	ldr	r3, [pc, #56]	@ (8005e80 <dcd_event_handler+0x3c0>)
 8005e48:	623b      	str	r3, [r7, #32]
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00c      	beq.n	8005e70 <dcd_event_handler+0x3b0>
 8005e56:	be00      	bkpt	0x0000
 8005e58:	e00a      	b.n	8005e70 <dcd_event_handler+0x3b0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8005e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e5c:	7818      	ldrb	r0, [r3, #0]
 8005e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e60:	785b      	ldrb	r3, [r3, #1]
 8005e62:	4619      	mov	r1, r3
 8005e64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005e68:	461a      	mov	r2, r3
 8005e6a:	f7fe fdb9 	bl	80049e0 <tud_event_hook_cb>
  return true;
 8005e6e:	e000      	b.n	8005e72 <dcd_event_handler+0x3b2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8005e70:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 8005e72:	bf00      	nop
 8005e74:	3780      	adds	r7, #128	@ 0x80
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	2000090c 	.word	0x2000090c
 8005e80:	e000edf0 	.word	0xe000edf0

08005e84 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	71fb      	strb	r3, [r7, #7]
  if (enabled)
 8005e8e:	79fb      	ldrb	r3, [r7, #7]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <usbd_int_set+0x1c>
  {
    dcd_int_enable(_usbd_rhport);
 8005e94:	4b07      	ldr	r3, [pc, #28]	@ (8005eb4 <usbd_int_set+0x30>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f001 f8b5 	bl	8007008 <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 8005e9e:	e004      	b.n	8005eaa <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8005ea0:	4b04      	ldr	r3, [pc, #16]	@ (8005eb4 <usbd_int_set+0x30>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f001 f8d7 	bl	8007058 <dcd_int_disable>
}
 8005eaa:	bf00      	nop
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	2000001d 	.word	0x2000001d

08005eb8 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08a      	sub	sp, #40	@ 0x28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6039      	str	r1, [r7, #0]
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	71fb      	strb	r3, [r7, #7]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	71bb      	strb	r3, [r7, #6]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ed4:	e04d      	b.n	8005f72 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	785b      	ldrb	r3, [r3, #1]
 8005ede:	2b05      	cmp	r3, #5
 8005ee0:	d108      	bne.n	8005ef4 <usbd_open_edpt_pair+0x3c>
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	78db      	ldrb	r3, [r3, #3]
 8005ee6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	797b      	ldrb	r3, [r7, #5]
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00a      	beq.n	8005f0a <usbd_open_edpt_pair+0x52>
 8005ef4:	4b23      	ldr	r3, [pc, #140]	@ (8005f84 <usbd_open_edpt_pair+0xcc>)
 8005ef6:	61bb      	str	r3, [r7, #24]
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d000      	beq.n	8005f06 <usbd_open_edpt_pair+0x4e>
 8005f04:	be00      	bkpt	0x0000
 8005f06:	2300      	movs	r3, #0
 8005f08:	e038      	b.n	8005f7c <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8005f0a:	79fb      	ldrb	r3, [r7, #7]
 8005f0c:	6a39      	ldr	r1, [r7, #32]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 f83a 	bl	8005f88 <usbd_edpt_open>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f083 0301 	eor.w	r3, r3, #1
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00a      	beq.n	8005f36 <usbd_open_edpt_pair+0x7e>
 8005f20:	4b18      	ldr	r3, [pc, #96]	@ (8005f84 <usbd_open_edpt_pair+0xcc>)
 8005f22:	61fb      	str	r3, [r7, #28]
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d000      	beq.n	8005f32 <usbd_open_edpt_pair+0x7a>
 8005f30:	be00      	bkpt	0x0000
 8005f32:	2300      	movs	r3, #0
 8005f34:	e022      	b.n	8005f7c <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	789b      	ldrb	r3, [r3, #2]
 8005f3a:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005f3c:	7dfb      	ldrb	r3, [r7, #23]
 8005f3e:	09db      	lsrs	r3, r3, #7
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d104      	bne.n	8005f50 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	789a      	ldrb	r2, [r3, #2]
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f4c:	701a      	strb	r2, [r3, #0]
 8005f4e:	e003      	b.n	8005f58 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	789a      	ldrb	r2, [r3, #2]
 8005f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f56:	701a      	strb	r2, [r3, #0]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	461a      	mov	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8005f6a:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6e:	3301      	adds	r3, #1
 8005f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f72:	79bb      	ldrb	r3, [r7, #6]
 8005f74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f76:	429a      	cmp	r2, r3
 8005f78:	dbad      	blt.n	8005ed6 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 8005f7a:	2301      	movs	r3, #1
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3728      	adds	r7, #40	@ 0x28
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	e000edf0 	.word	0xe000edf0

08005f88 <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	4603      	mov	r3, r0
 8005f90:	6039      	str	r1, [r7, #0]
 8005f92:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 8005f94:	4b1c      	ldr	r3, [pc, #112]	@ (8006008 <usbd_edpt_open+0x80>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	789b      	ldrb	r3, [r3, #2]
 8005f9e:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b05      	cmp	r3, #5
 8005faa:	d90a      	bls.n	8005fc2 <usbd_edpt_open+0x3a>
 8005fac:	4b17      	ldr	r3, [pc, #92]	@ (800600c <usbd_edpt_open+0x84>)
 8005fae:	613b      	str	r3, [r7, #16]
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d000      	beq.n	8005fbe <usbd_edpt_open+0x36>
 8005fbc:	be00      	bkpt	0x0000
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	e01d      	b.n	8005ffe <usbd_edpt_open+0x76>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 8005fc2:	4b13      	ldr	r3, [pc, #76]	@ (8006010 <usbd_edpt_open+0x88>)
 8005fc4:	789b      	ldrb	r3, [r3, #2]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	4619      	mov	r1, r3
 8005fca:	6838      	ldr	r0, [r7, #0]
 8005fcc:	f002 fa7a 	bl	80084c4 <tu_edpt_validate>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	f083 0301 	eor.w	r3, r3, #1
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00a      	beq.n	8005ff2 <usbd_edpt_open+0x6a>
 8005fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800600c <usbd_edpt_open+0x84>)
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d000      	beq.n	8005fee <usbd_edpt_open+0x66>
 8005fec:	be00      	bkpt	0x0000
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e005      	b.n	8005ffe <usbd_edpt_open+0x76>

  return dcd_edpt_open(rhport, desc_ep);
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	6839      	ldr	r1, [r7, #0]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f001 f90c 	bl	8007214 <dcd_edpt_open>
 8005ffc:	4603      	mov	r3, r0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	2000001d 	.word	0x2000001d
 800600c:	e000edf0 	.word	0xe000edf0
 8006010:	20000814 	.word	0x20000814

08006014 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	4603      	mov	r3, r0
 800601c:	460a      	mov	r2, r1
 800601e:	71fb      	strb	r3, [r7, #7]
 8006020:	4613      	mov	r3, r2
 8006022:	71bb      	strb	r3, [r7, #6]
 8006024:	79bb      	ldrb	r3, [r7, #6]
 8006026:	73bb      	strb	r3, [r7, #14]
 8006028:	7bbb      	ldrb	r3, [r7, #14]
 800602a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800602e:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006030:	75fb      	strb	r3, [r7, #23]
 8006032:	79bb      	ldrb	r3, [r7, #6]
 8006034:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006036:	7bfb      	ldrb	r3, [r7, #15]
 8006038:	09db      	lsrs	r3, r3, #7
 800603a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800603c:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800603e:	7dfa      	ldrb	r2, [r7, #23]
 8006040:	7dbb      	ldrb	r3, [r7, #22]
 8006042:	0052      	lsls	r2, r2, #1
 8006044:	4413      	add	r3, r2
 8006046:	3320      	adds	r3, #32
 8006048:	4a05      	ldr	r2, [pc, #20]	@ (8006060 <usbd_edpt_claim+0x4c>)
 800604a:	4413      	add	r3, r2
 800604c:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 800604e:	2100      	movs	r1, #0
 8006050:	6938      	ldr	r0, [r7, #16]
 8006052:	f002 f9d2 	bl	80083fa <tu_edpt_claim>
 8006056:	4603      	mov	r3, r0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3718      	adds	r7, #24
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	20000814 	.word	0x20000814

08006064 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	4603      	mov	r3, r0
 800606c:	460a      	mov	r2, r1
 800606e:	71fb      	strb	r3, [r7, #7]
 8006070:	4613      	mov	r3, r2
 8006072:	71bb      	strb	r3, [r7, #6]
 8006074:	79bb      	ldrb	r3, [r7, #6]
 8006076:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006078:	7bbb      	ldrb	r3, [r7, #14]
 800607a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800607e:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006080:	75fb      	strb	r3, [r7, #23]
 8006082:	79bb      	ldrb	r3, [r7, #6]
 8006084:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006086:	7bfb      	ldrb	r3, [r7, #15]
 8006088:	09db      	lsrs	r3, r3, #7
 800608a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800608c:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800608e:	7dfa      	ldrb	r2, [r7, #23]
 8006090:	7dbb      	ldrb	r3, [r7, #22]
 8006092:	0052      	lsls	r2, r2, #1
 8006094:	4413      	add	r3, r2
 8006096:	3320      	adds	r3, #32
 8006098:	4a05      	ldr	r2, [pc, #20]	@ (80060b0 <usbd_edpt_release+0x4c>)
 800609a:	4413      	add	r3, r2
 800609c:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 800609e:	2100      	movs	r1, #0
 80060a0:	6938      	ldr	r0, [r7, #16]
 80060a2:	f002 f9e4 	bl	800846e <tu_edpt_release>
 80060a6:	4603      	mov	r3, r0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	20000814 	.word	0x20000814

080060b4 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	603a      	str	r2, [r7, #0]
 80060bc:	461a      	mov	r2, r3
 80060be:	4603      	mov	r3, r0
 80060c0:	71fb      	strb	r3, [r7, #7]
 80060c2:	460b      	mov	r3, r1
 80060c4:	71bb      	strb	r3, [r7, #6]
 80060c6:	4613      	mov	r3, r2
 80060c8:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 80060ca:	4b32      	ldr	r3, [pc, #200]	@ (8006194 <usbd_edpt_xfer+0xe0>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	71fb      	strb	r3, [r7, #7]
 80060d0:	79bb      	ldrb	r3, [r7, #6]
 80060d2:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80060d4:	7abb      	ldrb	r3, [r7, #10]
 80060d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060da:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80060dc:	75fb      	strb	r3, [r7, #23]
 80060de:	79bb      	ldrb	r3, [r7, #6]
 80060e0:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80060e2:	7afb      	ldrb	r3, [r7, #11]
 80060e4:	09db      	lsrs	r3, r3, #7
 80060e6:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80060e8:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 80060ea:	7dfa      	ldrb	r2, [r7, #23]
 80060ec:	7dbb      	ldrb	r3, [r7, #22]
 80060ee:	492a      	ldr	r1, [pc, #168]	@ (8006198 <usbd_edpt_xfer+0xe4>)
 80060f0:	0052      	lsls	r2, r2, #1
 80060f2:	440a      	add	r2, r1
 80060f4:	4413      	add	r3, r2
 80060f6:	3320      	adds	r3, #32
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00a      	beq.n	800611a <usbd_edpt_xfer+0x66>
 8006104:	4b25      	ldr	r3, [pc, #148]	@ (800619c <usbd_edpt_xfer+0xe8>)
 8006106:	60fb      	str	r3, [r7, #12]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d000      	beq.n	8006116 <usbd_edpt_xfer+0x62>
 8006114:	be00      	bkpt	0x0000
 8006116:	2300      	movs	r3, #0
 8006118:	e038      	b.n	800618c <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 800611a:	7dfa      	ldrb	r2, [r7, #23]
 800611c:	7dbb      	ldrb	r3, [r7, #22]
 800611e:	491e      	ldr	r1, [pc, #120]	@ (8006198 <usbd_edpt_xfer+0xe4>)
 8006120:	0052      	lsls	r2, r2, #1
 8006122:	440a      	add	r2, r1
 8006124:	4413      	add	r3, r2
 8006126:	f103 0220 	add.w	r2, r3, #32
 800612a:	7813      	ldrb	r3, [r2, #0]
 800612c:	f043 0301 	orr.w	r3, r3, #1
 8006130:	7013      	strb	r3, [r2, #0]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 8006132:	88bb      	ldrh	r3, [r7, #4]
 8006134:	79b9      	ldrb	r1, [r7, #6]
 8006136:	79f8      	ldrb	r0, [r7, #7]
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	f001 f929 	bl	8007390 <dcd_edpt_xfer>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <usbd_edpt_xfer+0x94>
    return true;
 8006144:	2301      	movs	r3, #1
 8006146:	e021      	b.n	800618c <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8006148:	7dfa      	ldrb	r2, [r7, #23]
 800614a:	7dbb      	ldrb	r3, [r7, #22]
 800614c:	4912      	ldr	r1, [pc, #72]	@ (8006198 <usbd_edpt_xfer+0xe4>)
 800614e:	0052      	lsls	r2, r2, #1
 8006150:	440a      	add	r2, r1
 8006152:	4413      	add	r3, r2
 8006154:	f103 0220 	add.w	r2, r3, #32
 8006158:	7813      	ldrb	r3, [r2, #0]
 800615a:	f023 0301 	bic.w	r3, r3, #1
 800615e:	7013      	strb	r3, [r2, #0]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8006160:	7dfa      	ldrb	r2, [r7, #23]
 8006162:	7dbb      	ldrb	r3, [r7, #22]
 8006164:	490c      	ldr	r1, [pc, #48]	@ (8006198 <usbd_edpt_xfer+0xe4>)
 8006166:	0052      	lsls	r2, r2, #1
 8006168:	440a      	add	r2, r1
 800616a:	4413      	add	r3, r2
 800616c:	f103 0220 	add.w	r2, r3, #32
 8006170:	7813      	ldrb	r3, [r2, #0]
 8006172:	f023 0304 	bic.w	r3, r3, #4
 8006176:	7013      	strb	r3, [r2, #0]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 8006178:	4b08      	ldr	r3, [pc, #32]	@ (800619c <usbd_edpt_xfer+0xe8>)
 800617a:	613b      	str	r3, [r7, #16]
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d000      	beq.n	800618a <usbd_edpt_xfer+0xd6>
 8006188:	be00      	bkpt	0x0000
    return false;
 800618a:	2300      	movs	r3, #0
  }
}
 800618c:	4618      	mov	r0, r3
 800618e:	3718      	adds	r7, #24
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	2000001d 	.word	0x2000001d
 8006198:	20000814 	.word	0x20000814
 800619c:	e000edf0 	.word	0xe000edf0

080061a0 <usbd_edpt_stall>:
  uint8_t const dir = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].busy;
}

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	4603      	mov	r3, r0
 80061a8:	460a      	mov	r2, r1
 80061aa:	71fb      	strb	r3, [r7, #7]
 80061ac:	4613      	mov	r3, r2
 80061ae:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 80061b0:	4b18      	ldr	r3, [pc, #96]	@ (8006214 <usbd_edpt_stall+0x74>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	71fb      	strb	r3, [r7, #7]
 80061b6:	79bb      	ldrb	r3, [r7, #6]
 80061b8:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80061ba:	7b3b      	ldrb	r3, [r7, #12]
 80061bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061c0:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80061c2:	73fb      	strb	r3, [r7, #15]
 80061c4:	79bb      	ldrb	r3, [r7, #6]
 80061c6:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80061c8:	7b7b      	ldrb	r3, [r7, #13]
 80061ca:	09db      	lsrs	r3, r3, #7
 80061cc:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80061ce:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
  dcd_edpt_stall(rhport, ep_addr);
 80061d0:	79ba      	ldrb	r2, [r7, #6]
 80061d2:	79fb      	ldrb	r3, [r7, #7]
 80061d4:	4611      	mov	r1, r2
 80061d6:	4618      	mov	r0, r3
 80061d8:	f001 f91a 	bl	8007410 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 80061dc:	7bfa      	ldrb	r2, [r7, #15]
 80061de:	7bbb      	ldrb	r3, [r7, #14]
 80061e0:	490d      	ldr	r1, [pc, #52]	@ (8006218 <usbd_edpt_stall+0x78>)
 80061e2:	0052      	lsls	r2, r2, #1
 80061e4:	440a      	add	r2, r1
 80061e6:	4413      	add	r3, r2
 80061e8:	f103 0220 	add.w	r2, r3, #32
 80061ec:	7813      	ldrb	r3, [r2, #0]
 80061ee:	f043 0302 	orr.w	r3, r3, #2
 80061f2:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 80061f4:	7bfa      	ldrb	r2, [r7, #15]
 80061f6:	7bbb      	ldrb	r3, [r7, #14]
 80061f8:	4907      	ldr	r1, [pc, #28]	@ (8006218 <usbd_edpt_stall+0x78>)
 80061fa:	0052      	lsls	r2, r2, #1
 80061fc:	440a      	add	r2, r1
 80061fe:	4413      	add	r3, r2
 8006200:	f103 0220 	add.w	r2, r3, #32
 8006204:	7813      	ldrb	r3, [r2, #0]
 8006206:	f043 0301 	orr.w	r3, r3, #1
 800620a:	7013      	strb	r3, [r2, #0]
}
 800620c:	bf00      	nop
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	2000001d 	.word	0x2000001d
 8006218:	20000814 	.word	0x20000814

0800621c <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	4603      	mov	r3, r0
 8006224:	460a      	mov	r2, r1
 8006226:	71fb      	strb	r3, [r7, #7]
 8006228:	4613      	mov	r3, r2
 800622a:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 800622c:	4b18      	ldr	r3, [pc, #96]	@ (8006290 <usbd_edpt_clear_stall+0x74>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	71fb      	strb	r3, [r7, #7]
 8006232:	79bb      	ldrb	r3, [r7, #6]
 8006234:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006236:	7b3b      	ldrb	r3, [r7, #12]
 8006238:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800623c:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800623e:	73fb      	strb	r3, [r7, #15]
 8006240:	79bb      	ldrb	r3, [r7, #6]
 8006242:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006244:	7b7b      	ldrb	r3, [r7, #13]
 8006246:	09db      	lsrs	r3, r3, #7
 8006248:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800624a:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
  dcd_edpt_clear_stall(rhport, ep_addr);
 800624c:	79ba      	ldrb	r2, [r7, #6]
 800624e:	79fb      	ldrb	r3, [r7, #7]
 8006250:	4611      	mov	r1, r2
 8006252:	4618      	mov	r0, r3
 8006254:	f001 f90e 	bl	8007474 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 8006258:	7bfa      	ldrb	r2, [r7, #15]
 800625a:	7bbb      	ldrb	r3, [r7, #14]
 800625c:	490d      	ldr	r1, [pc, #52]	@ (8006294 <usbd_edpt_clear_stall+0x78>)
 800625e:	0052      	lsls	r2, r2, #1
 8006260:	440a      	add	r2, r1
 8006262:	4413      	add	r3, r2
 8006264:	f103 0220 	add.w	r2, r3, #32
 8006268:	7813      	ldrb	r3, [r2, #0]
 800626a:	f023 0302 	bic.w	r3, r3, #2
 800626e:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 8006270:	7bfa      	ldrb	r2, [r7, #15]
 8006272:	7bbb      	ldrb	r3, [r7, #14]
 8006274:	4907      	ldr	r1, [pc, #28]	@ (8006294 <usbd_edpt_clear_stall+0x78>)
 8006276:	0052      	lsls	r2, r2, #1
 8006278:	440a      	add	r2, r1
 800627a:	4413      	add	r3, r2
 800627c:	f103 0220 	add.w	r2, r3, #32
 8006280:	7813      	ldrb	r3, [r2, #0]
 8006282:	f023 0301 	bic.w	r3, r3, #1
 8006286:	7013      	strb	r3, [r2, #0]
}
 8006288:	bf00      	nop
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	2000001d 	.word	0x2000001d
 8006294:	20000814 	.word	0x20000814

08006298 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	4603      	mov	r3, r0
 80062a0:	460a      	mov	r2, r1
 80062a2:	71fb      	strb	r3, [r7, #7]
 80062a4:	4613      	mov	r3, r2
 80062a6:	71bb      	strb	r3, [r7, #6]
 80062a8:	79bb      	ldrb	r3, [r7, #6]
 80062aa:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80062ac:	7b3b      	ldrb	r3, [r7, #12]
 80062ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062b2:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80062b4:	73fb      	strb	r3, [r7, #15]
 80062b6:	79bb      	ldrb	r3, [r7, #6]
 80062b8:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80062ba:	7b7b      	ldrb	r3, [r7, #13]
 80062bc:	09db      	lsrs	r3, r3, #7
 80062be:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80062c0:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 80062c2:	7bfa      	ldrb	r2, [r7, #15]
 80062c4:	7bbb      	ldrb	r3, [r7, #14]
 80062c6:	490a      	ldr	r1, [pc, #40]	@ (80062f0 <usbd_edpt_stalled+0x58>)
 80062c8:	0052      	lsls	r2, r2, #1
 80062ca:	440a      	add	r2, r1
 80062cc:	4413      	add	r3, r2
 80062ce:	3320      	adds	r3, #32
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	bf14      	ite	ne
 80062dc:	2301      	movne	r3, #1
 80062de:	2300      	moveq	r3, #0
 80062e0:	b2db      	uxtb	r3, r3
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	20000814 	.word	0x20000814

080062f4 <dcd_edpt0_status_complete>:
#include "device/usbd_pvt.h"

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void dcd_edpt0_status_complete(uint8_t rhport, const tusb_control_request_t* request) {
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	4603      	mov	r3, r0
 80062fc:	6039      	str	r1, [r7, #0]
 80062fe:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	4603      	mov	r3, r0
 8006314:	6039      	str	r1, [r7, #0]
 8006316:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <status_stage_xact+0x1e>
 8006326:	2300      	movs	r3, #0
 8006328:	e000      	b.n	800632c <status_stage_xact+0x20>
 800632a:	2380      	movs	r3, #128	@ 0x80
 800632c:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 800632e:	7bf9      	ldrb	r1, [r7, #15]
 8006330:	79f8      	ldrb	r0, [r7, #7]
 8006332:	2300      	movs	r3, #0
 8006334:	2200      	movs	r2, #0
 8006336:	f7ff febd 	bl	80060b4 <usbd_edpt_xfer>
 800633a:	4603      	mov	r3, r0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	4603      	mov	r3, r0
 800634c:	6039      	str	r1, [r7, #0]
 800634e:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 8006350:	4b0b      	ldr	r3, [pc, #44]	@ (8006380 <tud_control_status+0x3c>)
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	6810      	ldr	r0, [r2, #0]
 8006356:	6851      	ldr	r1, [r2, #4]
 8006358:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 800635a:	4b09      	ldr	r3, [pc, #36]	@ (8006380 <tud_control_status+0x3c>)
 800635c:	2200      	movs	r2, #0
 800635e:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8006360:	4b07      	ldr	r3, [pc, #28]	@ (8006380 <tud_control_status+0x3c>)
 8006362:	2200      	movs	r2, #0
 8006364:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 8006366:	4b06      	ldr	r3, [pc, #24]	@ (8006380 <tud_control_status+0x3c>)
 8006368:	2200      	movs	r2, #0
 800636a:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 800636c:	79fb      	ldrb	r3, [r7, #7]
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	4618      	mov	r0, r3
 8006372:	f7ff ffcb 	bl	800630c <status_stage_xact>
 8006376:	4603      	mov	r3, r0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3708      	adds	r7, #8
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	20000910 	.word	0x20000910

08006384 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 8006384:	b580      	push	{r7, lr}
 8006386:	b088      	sub	sp, #32
 8006388:	af00      	add	r7, sp, #0
 800638a:	4603      	mov	r3, r0
 800638c:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 800638e:	4b24      	ldr	r3, [pc, #144]	@ (8006420 <data_stage_xact+0x9c>)
 8006390:	899a      	ldrh	r2, [r3, #12]
 8006392:	4b23      	ldr	r3, [pc, #140]	@ (8006420 <data_stage_xact+0x9c>)
 8006394:	89db      	ldrh	r3, [r3, #14]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	b29b      	uxth	r3, r3
 800639a:	837b      	strh	r3, [r7, #26]
 800639c:	2340      	movs	r3, #64	@ 0x40
 800639e:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80063a0:	8b7a      	ldrh	r2, [r7, #26]
 80063a2:	8b3b      	ldrh	r3, [r7, #24]
 80063a4:	4293      	cmp	r3, r2
 80063a6:	bf28      	it	cs
 80063a8:	4613      	movcs	r3, r2
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 80063ae:	2300      	movs	r3, #0
 80063b0:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 80063b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006420 <data_stage_xact+0x9c>)
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d01e      	beq.n	80063fe <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 80063c0:	2380      	movs	r3, #128	@ 0x80
 80063c2:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 80063c4:	8bbb      	ldrh	r3, [r7, #28]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d019      	beq.n	80063fe <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 80063ca:	4b15      	ldr	r3, [pc, #84]	@ (8006420 <data_stage_xact+0x9c>)
 80063cc:	689a      	ldr	r2, [r3, #8]
 80063ce:	8bbb      	ldrh	r3, [r7, #28]
 80063d0:	4914      	ldr	r1, [pc, #80]	@ (8006424 <data_stage_xact+0xa0>)
 80063d2:	6179      	str	r1, [r7, #20]
 80063d4:	2140      	movs	r1, #64	@ 0x40
 80063d6:	6139      	str	r1, [r7, #16]
 80063d8:	60fa      	str	r2, [r7, #12]
 80063da:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d202      	bcs.n	80063ea <data_stage_xact+0x66>
    return -1;
 80063e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80063e8:	e005      	b.n	80063f6 <data_stage_xact+0x72>
  memcpy(dest, src, count);
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	68f9      	ldr	r1, [r7, #12]
 80063ee:	6978      	ldr	r0, [r7, #20]
 80063f0:	f002 f974 	bl	80086dc <memcpy>
  return 0;
 80063f4:	2300      	movs	r3, #0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <data_stage_xact+0x7a>
 80063fa:	2300      	movs	r3, #0
 80063fc:	e00b      	b.n	8006416 <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 80063fe:	8bbb      	ldrh	r3, [r7, #28]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <data_stage_xact+0x84>
 8006404:	4a07      	ldr	r2, [pc, #28]	@ (8006424 <data_stage_xact+0xa0>)
 8006406:	e000      	b.n	800640a <data_stage_xact+0x86>
 8006408:	2200      	movs	r2, #0
 800640a:	8bbb      	ldrh	r3, [r7, #28]
 800640c:	7ff9      	ldrb	r1, [r7, #31]
 800640e:	79f8      	ldrb	r0, [r7, #7]
 8006410:	f7ff fe50 	bl	80060b4 <usbd_edpt_xfer>
 8006414:	4603      	mov	r3, r0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3720      	adds	r7, #32
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	20000910 	.word	0x20000910
 8006424:	20000924 	.word	0x20000924

08006428 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 8006428:	b580      	push	{r7, lr}
 800642a:	b088      	sub	sp, #32
 800642c:	af00      	add	r7, sp, #0
 800642e:	60b9      	str	r1, [r7, #8]
 8006430:	607a      	str	r2, [r7, #4]
 8006432:	461a      	mov	r2, r3
 8006434:	4603      	mov	r3, r0
 8006436:	73fb      	strb	r3, [r7, #15]
 8006438:	4613      	mov	r3, r2
 800643a:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 800643c:	4b30      	ldr	r3, [pc, #192]	@ (8006500 <tud_control_xfer+0xd8>)
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	6810      	ldr	r0, [r2, #0]
 8006442:	6851      	ldr	r1, [r2, #4]
 8006444:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 8006446:	4a2e      	ldr	r2, [pc, #184]	@ (8006500 <tud_control_xfer+0xd8>)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 800644c:	4b2c      	ldr	r3, [pc, #176]	@ (8006500 <tud_control_xfer+0xd8>)
 800644e:	2200      	movs	r2, #0
 8006450:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	88db      	ldrh	r3, [r3, #6]
 8006456:	b29a      	uxth	r2, r3
 8006458:	89bb      	ldrh	r3, [r7, #12]
 800645a:	827b      	strh	r3, [r7, #18]
 800645c:	4613      	mov	r3, r2
 800645e:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8006460:	8a7a      	ldrh	r2, [r7, #18]
 8006462:	8a3b      	ldrh	r3, [r7, #16]
 8006464:	4293      	cmp	r3, r2
 8006466:	bf28      	it	cs
 8006468:	4613      	movcs	r3, r2
 800646a:	b29a      	uxth	r2, r3
 800646c:	4b24      	ldr	r3, [pc, #144]	@ (8006500 <tud_control_xfer+0xd8>)
 800646e:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	88db      	ldrh	r3, [r3, #6]
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d026      	beq.n	80064c8 <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 800647a:	4b21      	ldr	r3, [pc, #132]	@ (8006500 <tud_control_xfer+0xd8>)
 800647c:	899b      	ldrh	r3, [r3, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00d      	beq.n	800649e <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10a      	bne.n	800649e <tud_control_xfer+0x76>
 8006488:	4b1e      	ldr	r3, [pc, #120]	@ (8006504 <tud_control_xfer+0xdc>)
 800648a:	61bb      	str	r3, [r7, #24]
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	d000      	beq.n	800649a <tud_control_xfer+0x72>
 8006498:	be00      	bkpt	0x0000
 800649a:	2300      	movs	r3, #0
 800649c:	e02b      	b.n	80064f6 <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 800649e:	7bfb      	ldrb	r3, [r7, #15]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff ff6f 	bl	8006384 <data_stage_xact>
 80064a6:	4603      	mov	r3, r0
 80064a8:	f083 0301 	eor.w	r3, r3, #1
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d020      	beq.n	80064f4 <tud_control_xfer+0xcc>
 80064b2:	4b14      	ldr	r3, [pc, #80]	@ (8006504 <tud_control_xfer+0xdc>)
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d000      	beq.n	80064c4 <tud_control_xfer+0x9c>
 80064c2:	be00      	bkpt	0x0000
 80064c4:	2300      	movs	r3, #0
 80064c6:	e016      	b.n	80064f6 <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
 80064ca:	68b9      	ldr	r1, [r7, #8]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7ff ff1d 	bl	800630c <status_stage_xact>
 80064d2:	4603      	mov	r3, r0
 80064d4:	f083 0301 	eor.w	r3, r3, #1
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00a      	beq.n	80064f4 <tud_control_xfer+0xcc>
 80064de:	4b09      	ldr	r3, [pc, #36]	@ (8006504 <tud_control_xfer+0xdc>)
 80064e0:	61fb      	str	r3, [r7, #28]
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d000      	beq.n	80064f0 <tud_control_xfer+0xc8>
 80064ee:	be00      	bkpt	0x0000
 80064f0:	2300      	movs	r3, #0
 80064f2:	e000      	b.n	80064f6 <tud_control_xfer+0xce>
  }

  return true;
 80064f4:	2301      	movs	r3, #1
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3720      	adds	r7, #32
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20000910 	.word	0x20000910
 8006504:	e000edf0 	.word	0xe000edf0

08006508 <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 800650c:	2214      	movs	r2, #20
 800650e:	2100      	movs	r1, #0
 8006510:	4802      	ldr	r0, [pc, #8]	@ (800651c <usbd_control_reset+0x14>)
 8006512:	f002 f8b6 	bl	8008682 <memset>
}
 8006516:	bf00      	nop
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20000910 	.word	0x20000910

08006520 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8006528:	4a04      	ldr	r2, [pc, #16]	@ (800653c <usbd_control_set_complete_callback+0x1c>)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6113      	str	r3, [r2, #16]
}
 800652e:	bf00      	nop
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	20000910 	.word	0x20000910

08006540 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 8006548:	4b09      	ldr	r3, [pc, #36]	@ (8006570 <usbd_control_set_request+0x30>)
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	6810      	ldr	r0, [r2, #0]
 800654e:	6851      	ldr	r1, [r2, #4]
 8006550:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 8006552:	4b07      	ldr	r3, [pc, #28]	@ (8006570 <usbd_control_set_request+0x30>)
 8006554:	2200      	movs	r2, #0
 8006556:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8006558:	4b05      	ldr	r3, [pc, #20]	@ (8006570 <usbd_control_set_request+0x30>)
 800655a:	2200      	movs	r2, #0
 800655c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 800655e:	4b04      	ldr	r3, [pc, #16]	@ (8006570 <usbd_control_set_request+0x30>)
 8006560:	2200      	movs	r2, #0
 8006562:	819a      	strh	r2, [r3, #12]
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	20000910 	.word	0x20000910

08006574 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8006574:	b580      	push	{r7, lr}
 8006576:	b088      	sub	sp, #32
 8006578:	af00      	add	r7, sp, #0
 800657a:	603b      	str	r3, [r7, #0]
 800657c:	4603      	mov	r3, r0
 800657e:	71fb      	strb	r3, [r7, #7]
 8006580:	460b      	mov	r3, r1
 8006582:	71bb      	strb	r3, [r7, #6]
 8006584:	4613      	mov	r3, r2
 8006586:	717b      	strb	r3, [r7, #5]
 8006588:	79bb      	ldrb	r3, [r7, #6]
 800658a:	73fb      	strb	r3, [r7, #15]
 800658c:	7bfb      	ldrb	r3, [r7, #15]
 800658e:	09db      	lsrs	r3, r3, #7
 8006590:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 8006592:	4a4f      	ldr	r2, [pc, #316]	@ (80066d0 <usbd_control_xfer_cb+0x15c>)
 8006594:	7812      	ldrb	r2, [r2, #0]
 8006596:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 800659a:	b2d2      	uxtb	r2, r2
 800659c:	4293      	cmp	r3, r2
 800659e:	d01e      	beq.n	80065de <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <usbd_control_xfer_cb+0x48>
 80065a6:	4b4b      	ldr	r3, [pc, #300]	@ (80066d4 <usbd_control_xfer_cb+0x160>)
 80065a8:	613b      	str	r3, [r7, #16]
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d000      	beq.n	80065b8 <usbd_control_xfer_cb+0x44>
 80065b6:	be00      	bkpt	0x0000
 80065b8:	2300      	movs	r3, #0
 80065ba:	e084      	b.n	80066c6 <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 80065bc:	79fb      	ldrb	r3, [r7, #7]
 80065be:	4944      	ldr	r1, [pc, #272]	@ (80066d0 <usbd_control_xfer_cb+0x15c>)
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7ff fe97 	bl	80062f4 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 80065c6:	4b42      	ldr	r3, [pc, #264]	@ (80066d0 <usbd_control_xfer_cb+0x15c>)
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d005      	beq.n	80065da <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 80065ce:	4b40      	ldr	r3, [pc, #256]	@ (80066d0 <usbd_control_xfer_cb+0x15c>)
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	79f8      	ldrb	r0, [r7, #7]
 80065d4:	4a3e      	ldr	r2, [pc, #248]	@ (80066d0 <usbd_control_xfer_cb+0x15c>)
 80065d6:	2103      	movs	r1, #3
 80065d8:	4798      	blx	r3
    }

    return true;
 80065da:	2301      	movs	r3, #1
 80065dc:	e073      	b.n	80066c6 <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 80065de:	4b3c      	ldr	r3, [pc, #240]	@ (80066d0 <usbd_control_xfer_cb+0x15c>)
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10c      	bne.n	8006606 <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 80065ec:	4b38      	ldr	r3, [pc, #224]	@ (80066d0 <usbd_control_xfer_cb+0x15c>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <usbd_control_xfer_cb+0x84>
 80065f4:	2300      	movs	r3, #0
 80065f6:	e066      	b.n	80066c6 <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 80065f8:	4b35      	ldr	r3, [pc, #212]	@ (80066d0 <usbd_control_xfer_cb+0x15c>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	4936      	ldr	r1, [pc, #216]	@ (80066d8 <usbd_control_xfer_cb+0x164>)
 8006600:	4618      	mov	r0, r3
 8006602:	f002 f86b 	bl	80086dc <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _ctrl_xfer.buffer, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8006606:	4b32      	ldr	r3, [pc, #200]	@ (80066d0 <usbd_control_xfer_cb+0x15c>)
 8006608:	89da      	ldrh	r2, [r3, #14]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	b29b      	uxth	r3, r3
 800660e:	4413      	add	r3, r2
 8006610:	b29a      	uxth	r2, r3
 8006612:	4b2f      	ldr	r3, [pc, #188]	@ (80066d0 <usbd_control_xfer_cb+0x15c>)
 8006614:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8006616:	4b2e      	ldr	r3, [pc, #184]	@ (80066d0 <usbd_control_xfer_cb+0x15c>)
 8006618:	689a      	ldr	r2, [r3, #8]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	4413      	add	r3, r2
 800661e:	4a2c      	ldr	r2, [pc, #176]	@ (80066d0 <usbd_control_xfer_cb+0x15c>)
 8006620:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 8006622:	4b2b      	ldr	r3, [pc, #172]	@ (80066d0 <usbd_control_xfer_cb+0x15c>)
 8006624:	88da      	ldrh	r2, [r3, #6]
 8006626:	4b2a      	ldr	r3, [pc, #168]	@ (80066d0 <usbd_control_xfer_cb+0x15c>)
 8006628:	89db      	ldrh	r3, [r3, #14]
 800662a:	429a      	cmp	r2, r3
 800662c:	d002      	beq.n	8006634 <usbd_control_xfer_cb+0xc0>
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	2b3f      	cmp	r3, #63	@ 0x3f
 8006632:	d831      	bhi.n	8006698 <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 8006634:	2301      	movs	r3, #1
 8006636:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 8006638:	4b25      	ldr	r3, [pc, #148]	@ (80066d0 <usbd_control_xfer_cb+0x15c>)
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d007      	beq.n	8006650 <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8006640:	4b23      	ldr	r3, [pc, #140]	@ (80066d0 <usbd_control_xfer_cb+0x15c>)
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	79f8      	ldrb	r0, [r7, #7]
 8006646:	4a22      	ldr	r2, [pc, #136]	@ (80066d0 <usbd_control_xfer_cb+0x15c>)
 8006648:	2102      	movs	r1, #2
 800664a:	4798      	blx	r3
 800664c:	4603      	mov	r3, r0
 800664e:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 8006650:	7ffb      	ldrb	r3, [r7, #31]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d015      	beq.n	8006682 <usbd_control_xfer_cb+0x10e>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 8006656:	79fb      	ldrb	r3, [r7, #7]
 8006658:	491d      	ldr	r1, [pc, #116]	@ (80066d0 <usbd_control_xfer_cb+0x15c>)
 800665a:	4618      	mov	r0, r3
 800665c:	f7ff fe56 	bl	800630c <status_stage_xact>
 8006660:	4603      	mov	r3, r0
 8006662:	f083 0301 	eor.w	r3, r3, #1
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	d02a      	beq.n	80066c2 <usbd_control_xfer_cb+0x14e>
 800666c:	4b19      	ldr	r3, [pc, #100]	@ (80066d4 <usbd_control_xfer_cb+0x160>)
 800666e:	617b      	str	r3, [r7, #20]
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b00      	cmp	r3, #0
 800667a:	d000      	beq.n	800667e <usbd_control_xfer_cb+0x10a>
 800667c:	be00      	bkpt	0x0000
 800667e:	2300      	movs	r3, #0
 8006680:	e021      	b.n	80066c6 <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8006682:	79fb      	ldrb	r3, [r7, #7]
 8006684:	2100      	movs	r1, #0
 8006686:	4618      	mov	r0, r3
 8006688:	f000 fec2 	bl	8007410 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 800668c:	79fb      	ldrb	r3, [r7, #7]
 800668e:	2180      	movs	r1, #128	@ 0x80
 8006690:	4618      	mov	r0, r3
 8006692:	f000 febd 	bl	8007410 <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8006696:	e014      	b.n	80066c2 <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
 8006698:	79fb      	ldrb	r3, [r7, #7]
 800669a:	4618      	mov	r0, r3
 800669c:	f7ff fe72 	bl	8006384 <data_stage_xact>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f083 0301 	eor.w	r3, r3, #1
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00b      	beq.n	80066c4 <usbd_control_xfer_cb+0x150>
 80066ac:	4b09      	ldr	r3, [pc, #36]	@ (80066d4 <usbd_control_xfer_cb+0x160>)
 80066ae:	61bb      	str	r3, [r7, #24]
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d000      	beq.n	80066be <usbd_control_xfer_cb+0x14a>
 80066bc:	be00      	bkpt	0x0000
 80066be:	2300      	movs	r3, #0
 80066c0:	e001      	b.n	80066c6 <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 80066c2:	bf00      	nop
  }

  return true;
 80066c4:	2301      	movs	r3, #1
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3720      	adds	r7, #32
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20000910 	.word	0x20000910
 80066d4:	e000edf0 	.word	0xe000edf0
 80066d8:	20000924 	.word	0x20000924

080066dc <__NVIC_EnableIRQ>:
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	4603      	mov	r3, r0
 80066e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	db0b      	blt.n	8006706 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066ee:	79fb      	ldrb	r3, [r7, #7]
 80066f0:	f003 021f 	and.w	r2, r3, #31
 80066f4:	4907      	ldr	r1, [pc, #28]	@ (8006714 <__NVIC_EnableIRQ+0x38>)
 80066f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066fa:	095b      	lsrs	r3, r3, #5
 80066fc:	2001      	movs	r0, #1
 80066fe:	fa00 f202 	lsl.w	r2, r0, r2
 8006702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	e000e100 	.word	0xe000e100

08006718 <__NVIC_DisableIRQ>:
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	4603      	mov	r3, r0
 8006720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006726:	2b00      	cmp	r3, #0
 8006728:	db12      	blt.n	8006750 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800672a:	79fb      	ldrb	r3, [r7, #7]
 800672c:	f003 021f 	and.w	r2, r3, #31
 8006730:	490a      	ldr	r1, [pc, #40]	@ (800675c <__NVIC_DisableIRQ+0x44>)
 8006732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006736:	095b      	lsrs	r3, r3, #5
 8006738:	2001      	movs	r0, #1
 800673a:	fa00 f202 	lsl.w	r2, r0, r2
 800673e:	3320      	adds	r3, #32
 8006740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006744:	f3bf 8f4f 	dsb	sy
}
 8006748:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800674a:	f3bf 8f6f 	isb	sy
}
 800674e:	bf00      	nop
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	e000e100 	.word	0xe000e100

08006760 <dma_setup_prepare>:
  (void) dwc2;
  // Internal DMA only
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
}

static void dma_setup_prepare(uint8_t rhport) {
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	71fb      	strb	r3, [r7, #7]
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	72fb      	strb	r3, [r7, #11]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800676e:	7afb      	ldrb	r3, [r7, #11]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d901      	bls.n	8006778 <dma_setup_prepare+0x18>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 8006774:	2300      	movs	r3, #0
 8006776:	72fb      	strb	r3, [r7, #11]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8006778:	7afb      	ldrb	r3, [r7, #11]
 800677a:	4a13      	ldr	r2, [pc, #76]	@ (80067c8 <dma_setup_prepare+0x68>)
 800677c:	011b      	lsls	r3, r3, #4
 800677e:	4413      	add	r3, r2
 8006780:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006782:	60fb      	str	r3, [r7, #12]

  if (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a) {
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006788:	4a10      	ldr	r2, [pc, #64]	@ (80067cc <dma_setup_prepare+0x6c>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d904      	bls.n	8006798 <dma_setup_prepare+0x38>
    if(dwc2->epout[0].doepctl & DOEPCTL_EPENA) {
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8006794:	2b00      	cmp	r3, #0
 8006796:	db10      	blt.n	80067ba <dma_setup_prepare+0x5a>
      return;
    }
  }

  // Receive only 1 packet
  dwc2->epout[0].doeptsiz = (1 << DOEPTSIZ_STUPCNT_Pos) | (1 << DOEPTSIZ_PKTCNT_Pos) | (8 << DOEPTSIZ_XFRSIZ_Pos);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4a0d      	ldr	r2, [pc, #52]	@ (80067d0 <dma_setup_prepare+0x70>)
 800679c:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  dwc2->epout[0].doepdma = (uintptr_t) _dcd_usbbuf.setup_packet;
 80067a0:	4a0c      	ldr	r2, [pc, #48]	@ (80067d4 <dma_setup_prepare+0x74>)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14
  dwc2->epout[0].doepctl |= DOEPCTL_EPENA | DOEPCTL_USBAEP;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 80067ae:	f043 2280 	orr.w	r2, r3, #2147516416	@ 0x80008000
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 80067b8:	e000      	b.n	80067bc <dma_setup_prepare+0x5c>
      return;
 80067ba:	bf00      	nop
}
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	08008824 	.word	0x08008824
 80067cc:	4f543009 	.word	0x4f543009
 80067d0:	20080008 	.word	0x20080008
 80067d4:	20000a8c 	.word	0x20000a8c

080067d8 <dfifo_alloc>:

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 80067d8:	b480      	push	{r7}
 80067da:	b091      	sub	sp, #68	@ 0x44
 80067dc:	af00      	add	r7, sp, #0
 80067de:	4603      	mov	r3, r0
 80067e0:	71fb      	strb	r3, [r7, #7]
 80067e2:	460b      	mov	r3, r1
 80067e4:	71bb      	strb	r3, [r7, #6]
 80067e6:	4613      	mov	r3, r2
 80067e8:	80bb      	strh	r3, [r7, #4]
 80067ea:	79fb      	ldrb	r3, [r7, #7]
 80067ec:	767b      	strb	r3, [r7, #25]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80067ee:	7e7b      	ldrb	r3, [r7, #25]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d901      	bls.n	80067f8 <dfifo_alloc+0x20>
    rhport = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	767b      	strb	r3, [r7, #25]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80067f8:	7e7b      	ldrb	r3, [r7, #25]
 80067fa:	4a65      	ldr	r2, [pc, #404]	@ (8006990 <dfifo_alloc+0x1b8>)
 80067fc:	011b      	lsls	r3, r3, #4
 80067fe:	4413      	add	r3, r2
 8006800:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006802:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8006804:	79fb      	ldrb	r3, [r7, #7]
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	4a61      	ldr	r2, [pc, #388]	@ (8006990 <dfifo_alloc+0x1b8>)
 800680a:	4413      	add	r3, r2
 800680c:	637b      	str	r3, [r7, #52]	@ 0x34
  const uint8_t ep_count = dwc2_controller->ep_count;
 800680e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006810:	7a1b      	ldrb	r3, [r3, #8]
 8006812:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8006816:	79bb      	ldrb	r3, [r7, #6]
 8006818:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800681a:	7ebb      	ldrb	r3, [r7, #26]
 800681c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006820:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8006822:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8006826:	79bb      	ldrb	r3, [r7, #6]
 8006828:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800682a:	7efb      	ldrb	r3, [r7, #27]
 800682c:	09db      	lsrs	r3, r3, #7
 800682e:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 8006830:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 8006834:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8006838:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800683c:	429a      	cmp	r2, r3
 800683e:	d30a      	bcc.n	8006856 <dfifo_alloc+0x7e>
 8006840:	4b54      	ldr	r3, [pc, #336]	@ (8006994 <dfifo_alloc+0x1bc>)
 8006842:	61fb      	str	r3, [r7, #28]
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	d000      	beq.n	8006852 <dfifo_alloc+0x7a>
 8006850:	be00      	bkpt	0x0000
 8006852:	2300      	movs	r3, #0
 8006854:	e095      	b.n	8006982 <dfifo_alloc+0x1aa>

  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 8006856:	88bb      	ldrh	r3, [r7, #4]
 8006858:	617b      	str	r3, [r7, #20]
 800685a:	2304      	movs	r3, #4
 800685c:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	4413      	add	r3, r2
 8006864:	1e5a      	subs	r2, r3, #1
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	fbb2 f3f3 	udiv	r3, r2, r3
 800686c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (dir == TUSB_DIR_OUT) {
 800686e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8006872:	2b00      	cmp	r3, #0
 8006874:	d12a      	bne.n	80068cc <dfifo_alloc+0xf4>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8006876:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	b29b      	uxth	r3, r3
 800687c:	81fb      	strh	r3, [r7, #14]
 800687e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006882:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8006884:	89fb      	ldrh	r3, [r7, #14]
 8006886:	089b      	lsrs	r3, r3, #2
 8006888:	b29b      	uxth	r3, r3
 800688a:	f103 0208 	add.w	r2, r3, #8
 800688e:	7b7b      	ldrb	r3, [r7, #13]
 8006890:	4413      	add	r3, r2
 8006892:	b29b      	uxth	r3, r3
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	b29b      	uxth	r3, r3
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8006898:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
 800689a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800689c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800689e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d26d      	bcs.n	8006980 <dfifo_alloc+0x1a8>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 80068a4:	4b3c      	ldr	r3, [pc, #240]	@ (8006998 <dfifo_alloc+0x1c0>)
 80068a6:	889b      	ldrh	r3, [r3, #4]
 80068a8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d90a      	bls.n	80068c4 <dfifo_alloc+0xec>
 80068ae:	4b39      	ldr	r3, [pc, #228]	@ (8006994 <dfifo_alloc+0x1bc>)
 80068b0:	623b      	str	r3, [r7, #32]
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d000      	beq.n	80068c0 <dfifo_alloc+0xe8>
 80068be:	be00      	bkpt	0x0000
 80068c0:	2300      	movs	r3, #0
 80068c2:	e05e      	b.n	8006982 <dfifo_alloc+0x1aa>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 80068c4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80068c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80068ca:	e059      	b.n	8006980 <dfifo_alloc+0x1a8>
    }
  } else {
    // Check IN endpoints concurrently active limit
    if(dwc2_controller->ep_in_count) {
 80068cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068ce:	7a5b      	ldrb	r3, [r3, #9]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d016      	beq.n	8006902 <dfifo_alloc+0x12a>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 80068d4:	4b30      	ldr	r3, [pc, #192]	@ (8006998 <dfifo_alloc+0x1c0>)
 80068d6:	799a      	ldrb	r2, [r3, #6]
 80068d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068da:	7a5b      	ldrb	r3, [r3, #9]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d30a      	bcc.n	80068f6 <dfifo_alloc+0x11e>
 80068e0:	4b2c      	ldr	r3, [pc, #176]	@ (8006994 <dfifo_alloc+0x1bc>)
 80068e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d000      	beq.n	80068f2 <dfifo_alloc+0x11a>
 80068f0:	be00      	bkpt	0x0000
 80068f2:	2300      	movs	r3, #0
 80068f4:	e045      	b.n	8006982 <dfifo_alloc+0x1aa>
      _dcd_data.allocated_epin_count++;
 80068f6:	4b28      	ldr	r3, [pc, #160]	@ (8006998 <dfifo_alloc+0x1c0>)
 80068f8:	799b      	ldrb	r3, [r3, #6]
 80068fa:	3301      	adds	r3, #1
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	4b26      	ldr	r3, [pc, #152]	@ (8006998 <dfifo_alloc+0x1c0>)
 8006900:	719a      	strb	r2, [r3, #6]
    }

    // If The TXFELVL is configured as half empty, the fifo must be twice the max_size.
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 8006902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800690a:	2b00      	cmp	r3, #0
 800690c:	d102      	bne.n	8006914 <dfifo_alloc+0x13c>
      fifo_size *= 2;
 800690e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    // Check if free space is available
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 8006914:	4b20      	ldr	r3, [pc, #128]	@ (8006998 <dfifo_alloc+0x1c0>)
 8006916:	889b      	ldrh	r3, [r3, #4]
 8006918:	4619      	mov	r1, r3
 800691a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800691c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800691e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006920:	4413      	add	r3, r2
 8006922:	4299      	cmp	r1, r3
 8006924:	d20a      	bcs.n	800693c <dfifo_alloc+0x164>
 8006926:	4b1b      	ldr	r3, [pc, #108]	@ (8006994 <dfifo_alloc+0x1bc>)
 8006928:	62bb      	str	r3, [r7, #40]	@ 0x28
 800692a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b00      	cmp	r3, #0
 8006934:	d000      	beq.n	8006938 <dfifo_alloc+0x160>
 8006936:	be00      	bkpt	0x0000
 8006938:	2300      	movs	r3, #0
 800693a:	e022      	b.n	8006982 <dfifo_alloc+0x1aa>
    _dcd_data.dfifo_top -= fifo_size;
 800693c:	4b16      	ldr	r3, [pc, #88]	@ (8006998 <dfifo_alloc+0x1c0>)
 800693e:	889a      	ldrh	r2, [r3, #4]
 8006940:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	b29a      	uxth	r2, r3
 8006946:	4b14      	ldr	r3, [pc, #80]	@ (8006998 <dfifo_alloc+0x1c0>)
 8006948:	809a      	strh	r2, [r3, #4]
    // TU_LOG(DWC2_DEBUG, "    TX FIFO %u: allocated %u words at offset %u\r\n", epnum, fifo_size, dfifo_top);

    // Both TXFD and TXSA are in unit of 32-bit words.
    if (epnum == 0) {
 800694a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800694e:	2b00      	cmp	r3, #0
 8006950:	d108      	bne.n	8006964 <dfifo_alloc+0x18c>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 8006952:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006954:	041b      	lsls	r3, r3, #16
 8006956:	4a10      	ldr	r2, [pc, #64]	@ (8006998 <dfifo_alloc+0x1c0>)
 8006958:	8892      	ldrh	r2, [r2, #4]
 800695a:	4313      	orrs	r3, r2
 800695c:	461a      	mov	r2, r3
 800695e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006960:	629a      	str	r2, [r3, #40]	@ 0x28
 8006962:	e00d      	b.n	8006980 <dfifo_alloc+0x1a8>
    } else {
      // DIEPTXF starts at FIFO #1.
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 8006964:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006966:	041b      	lsls	r3, r3, #16
 8006968:	4a0b      	ldr	r2, [pc, #44]	@ (8006998 <dfifo_alloc+0x1c0>)
 800696a:	8892      	ldrh	r2, [r2, #4]
 800696c:	431a      	orrs	r2, r3
 800696e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006972:	3b01      	subs	r3, #1
 8006974:	4611      	mov	r1, r2
 8006976:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006978:	3340      	adds	r3, #64	@ 0x40
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	6059      	str	r1, [r3, #4]
    }
  }

  return true;
 8006980:	2301      	movs	r3, #1
}
 8006982:	4618      	mov	r0, r3
 8006984:	3744      	adds	r7, #68	@ 0x44
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	08008824 	.word	0x08008824
 8006994:	e000edf0 	.word	0xe000edf0
 8006998:	20000a84 	.word	0x20000a84

0800699c <dfifo_device_init>:

static void dfifo_device_init(uint8_t rhport) {
 800699c:	b580      	push	{r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	4603      	mov	r3, r0
 80069a4:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 80069a6:	79fb      	ldrb	r3, [r7, #7]
 80069a8:	011b      	lsls	r3, r3, #4
 80069aa:	4a25      	ldr	r2, [pc, #148]	@ (8006a40 <dfifo_device_init+0xa4>)
 80069ac:	4413      	add	r3, r2
 80069ae:	61fb      	str	r3, [r7, #28]
 80069b0:	79fb      	ldrb	r3, [r7, #7]
 80069b2:	733b      	strb	r3, [r7, #12]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80069b4:	7b3b      	ldrb	r3, [r7, #12]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d901      	bls.n	80069be <dfifo_device_init+0x22>
    rhport = 0;
 80069ba:	2300      	movs	r3, #0
 80069bc:	733b      	strb	r3, [r7, #12]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80069be:	7b3b      	ldrb	r3, [r7, #12]
 80069c0:	4a1f      	ldr	r2, [pc, #124]	@ (8006a40 <dfifo_device_init+0xa4>)
 80069c2:	011b      	lsls	r3, r3, #4
 80069c4:	4413      	add	r3, r2
 80069c6:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80069c8:	61bb      	str	r3, [r7, #24]
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	7a1b      	ldrb	r3, [r3, #8]
 80069ce:	2240      	movs	r2, #64	@ 0x40
 80069d0:	81fa      	strh	r2, [r7, #14]
 80069d2:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 80069d4:	89fb      	ldrh	r3, [r7, #14]
 80069d6:	089b      	lsrs	r3, r3, #2
 80069d8:	b29b      	uxth	r3, r3
 80069da:	f103 0208 	add.w	r2, r3, #8
 80069de:	7b7b      	ldrb	r3, [r7, #13]
 80069e0:	4413      	add	r3, r2
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	005b      	lsls	r3, r3, #1
 80069e6:	b29b      	uxth	r3, r3
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 80069e8:	461a      	mov	r2, r3
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	625a      	str	r2, [r3, #36]	@ 0x24
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 80069f2:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
 80069f4:	75fb      	strb	r3, [r7, #23]
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	089b      	lsrs	r3, r3, #2
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	4b11      	ldr	r3, [pc, #68]	@ (8006a44 <dfifo_device_init+0xa8>)
 8006a00:	809a      	strh	r2, [r3, #4]
  if (is_dma) {
 8006a02:	7dfb      	ldrb	r3, [r7, #23]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d009      	beq.n	8006a1c <dfifo_device_init+0x80>
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
 8006a08:	4b0e      	ldr	r3, [pc, #56]	@ (8006a44 <dfifo_device_init+0xa8>)
 8006a0a:	889a      	ldrh	r2, [r3, #4]
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	7a1b      	ldrb	r3, [r3, #8]
 8006a10:	005b      	lsls	r3, r3, #1
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	4b0a      	ldr	r3, [pc, #40]	@ (8006a44 <dfifo_device_init+0xa8>)
 8006a1a:	809a      	strh	r2, [r3, #4]
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 8006a1c:	4b09      	ldr	r3, [pc, #36]	@ (8006a44 <dfifo_device_init+0xa8>)
 8006a1e:	889b      	ldrh	r3, [r3, #4]
 8006a20:	461a      	mov	r2, r3
 8006a22:	4613      	mov	r3, r2
 8006a24:	041b      	lsls	r3, r3, #16
 8006a26:	441a      	add	r2, r3
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 8006a2c:	79fb      	ldrb	r3, [r7, #7]
 8006a2e:	2240      	movs	r2, #64	@ 0x40
 8006a30:	2180      	movs	r1, #128	@ 0x80
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7ff fed0 	bl	80067d8 <dfifo_alloc>
}
 8006a38:	bf00      	nop
 8006a3a:	3720      	adds	r7, #32
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	08008824 	.word	0x08008824
 8006a44:	20000a84 	.word	0x20000a84

08006a48 <edpt_activate>:


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 8006a48:	b480      	push	{r7}
 8006a4a:	b08b      	sub	sp, #44	@ 0x2c
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	4603      	mov	r3, r0
 8006a50:	6039      	str	r1, [r7, #0]
 8006a52:	71fb      	strb	r3, [r7, #7]
 8006a54:	79fb      	ldrb	r3, [r7, #7]
 8006a56:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8006a58:	7c7b      	ldrb	r3, [r7, #17]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d901      	bls.n	8006a62 <edpt_activate+0x1a>
    rhport = 0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8006a62:	7c7b      	ldrb	r3, [r7, #17]
 8006a64:	4a45      	ldr	r2, [pc, #276]	@ (8006b7c <edpt_activate+0x134>)
 8006a66:	011b      	lsls	r3, r3, #4
 8006a68:	4413      	add	r3, r2
 8006a6a:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	789b      	ldrb	r3, [r3, #2]
 8006a72:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006a74:	7cbb      	ldrb	r3, [r7, #18]
 8006a76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	789b      	ldrb	r3, [r3, #2]
 8006a84:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006a86:	7cfb      	ldrb	r3, [r7, #19]
 8006a88:	09db      	lsrs	r3, r3, #7
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8006a90:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8006a94:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006a98:	0052      	lsls	r2, r2, #1
 8006a9a:	4413      	add	r3, r2
 8006a9c:	011b      	lsls	r3, r3, #4
 8006a9e:	4a38      	ldr	r2, [pc, #224]	@ (8006b80 <edpt_activate+0x138>)
 8006aa0:	4413      	add	r3, r2
 8006aa2:	61fb      	str	r3, [r7, #28]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	617b      	str	r3, [r7, #20]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	889b      	ldrh	r3, [r3, #4]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ab2:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	815a      	strh	r2, [r3, #10]
  xfer->interval = p_endpoint_desc->bInterval;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	799a      	ldrb	r2, [r3, #6]
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	731a      	strb	r2, [r3, #12]
  // Endpoint control
  union {
    uint32_t value;
    dwc2_depctl_t bm;
  } depctl;
  depctl.value = 0;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60fb      	str	r3, [r7, #12]

  depctl.bm.mps = xfer->max_size;
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	895b      	ldrh	r3, [r3, #10]
 8006ac8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	89bb      	ldrh	r3, [r7, #12]
 8006ad0:	f362 030a 	bfi	r3, r2, #0, #11
 8006ad4:	81bb      	strh	r3, [r7, #12]
  depctl.bm.active = 1;
 8006ad6:	7b7b      	ldrb	r3, [r7, #13]
 8006ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006adc:	737b      	strb	r3, [r7, #13]
  depctl.bm.type = p_endpoint_desc->bmAttributes.xfer;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	78db      	ldrb	r3, [r3, #3]
 8006ae2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	7bbb      	ldrb	r3, [r7, #14]
 8006aea:	f362 0383 	bfi	r3, r2, #2, #2
 8006aee:	73bb      	strb	r3, [r7, #14]
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	78db      	ldrb	r3, [r3, #3]
 8006af4:	f003 0303 	and.w	r3, r3, #3
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d003      	beq.n	8006b06 <edpt_activate+0xbe>
    depctl.bm.set_data0_iso_even = 1;
 8006afe:	7bfb      	ldrb	r3, [r7, #15]
 8006b00:	f043 0310 	orr.w	r3, r3, #16
 8006b04:	73fb      	strb	r3, [r7, #15]
  }
  if (dir == TUSB_DIR_IN) {
 8006b06:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d108      	bne.n	8006b20 <edpt_activate+0xd8>
    depctl.bm.tx_fifo_num = epnum;
 8006b0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006b12:	f003 030f 	and.w	r3, r3, #15
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	89fb      	ldrh	r3, [r7, #14]
 8006b1a:	f362 1389 	bfi	r3, r2, #6, #4
 8006b1e:	81fb      	strh	r3, [r7, #14]
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8006b20:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	bf14      	ite	ne
 8006b28:	2301      	movne	r3, #1
 8006b2a:	2300      	moveq	r3, #0
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006b34:	0112      	lsls	r2, r2, #4
 8006b36:	4413      	add	r3, r2
 8006b38:	3348      	adds	r3, #72	@ 0x48
 8006b3a:	015b      	lsls	r3, r3, #5
 8006b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b3e:	4413      	add	r3, r2
 8006b40:	61bb      	str	r3, [r7, #24]
  dep->ctl = depctl.value;
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	601a      	str	r2, [r3, #0]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 8006b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4a:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 8006b4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006b52:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8006b56:	2901      	cmp	r1, #1
 8006b58:	d101      	bne.n	8006b5e <edpt_activate+0x116>
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	e000      	b.n	8006b60 <edpt_activate+0x118>
 8006b5e:	2110      	movs	r1, #16
 8006b60:	440b      	add	r3, r1
 8006b62:	2101      	movs	r1, #1
 8006b64:	fa01 f303 	lsl.w	r3, r1, r3
 8006b68:	431a      	orrs	r2, r3
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6c:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
}
 8006b70:	bf00      	nop
 8006b72:	372c      	adds	r7, #44	@ 0x2c
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	08008824 	.word	0x08008824
 8006b80:	20000964 	.word	0x20000964

08006b84 <edpt_disable>:

static void edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 8006b84:	b480      	push	{r7}
 8006b86:	b089      	sub	sp, #36	@ 0x24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	71fb      	strb	r3, [r7, #7]
 8006b8e:	460b      	mov	r3, r1
 8006b90:	71bb      	strb	r3, [r7, #6]
 8006b92:	4613      	mov	r3, r2
 8006b94:	717b      	strb	r3, [r7, #5]
 8006b96:	79fb      	ldrb	r3, [r7, #7]
 8006b98:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8006b9a:	7c7b      	ldrb	r3, [r7, #17]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d901      	bls.n	8006ba4 <edpt_disable+0x20>
    rhport = 0;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8006ba4:	7c7b      	ldrb	r3, [r7, #17]
 8006ba6:	4a5b      	ldr	r2, [pc, #364]	@ (8006d14 <edpt_disable+0x190>)
 8006ba8:	011b      	lsls	r3, r3, #4
 8006baa:	4413      	add	r3, r2
 8006bac:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006bae:	61fb      	str	r3, [r7, #28]
 8006bb0:	79bb      	ldrb	r3, [r7, #6]
 8006bb2:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006bb4:	7cbb      	ldrb	r3, [r7, #18]
 8006bb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bba:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8006bbc:	76fb      	strb	r3, [r7, #27]
 8006bbe:	79bb      	ldrb	r3, [r7, #6]
 8006bc0:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006bc2:	7cfb      	ldrb	r3, [r7, #19]
 8006bc4:	09db      	lsrs	r3, r3, #7
 8006bc6:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 8006bc8:	76bb      	strb	r3, [r7, #26]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8006bca:	7ebb      	ldrb	r3, [r7, #26]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	bf14      	ite	ne
 8006bd0:	2301      	movne	r3, #1
 8006bd2:	2300      	moveq	r3, #0
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	7efb      	ldrb	r3, [r7, #27]
 8006bda:	0112      	lsls	r2, r2, #4
 8006bdc:	4413      	add	r3, r2
 8006bde:	3348      	adds	r3, #72	@ 0x48
 8006be0:	015b      	lsls	r3, r3, #5
 8006be2:	69fa      	ldr	r2, [r7, #28]
 8006be4:	4413      	add	r3, r2
 8006be6:	617b      	str	r3, [r7, #20]

  if (dir == TUSB_DIR_IN) {
 8006be8:	7ebb      	ldrb	r3, [r7, #26]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d149      	bne.n	8006c82 <edpt_disable+0xfe>
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->diepctl & DIEPCTL_EPENA)) {
 8006bee:	7efb      	ldrb	r3, [r7, #27]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d003      	beq.n	8006bfc <edpt_disable+0x78>
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	db0d      	blt.n	8006c18 <edpt_disable+0x94>
      dep->diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	797a      	ldrb	r2, [r7, #5]
 8006c02:	2a00      	cmp	r2, #0
 8006c04:	d002      	beq.n	8006c0c <edpt_disable+0x88>
 8006c06:	f04f 6202 	mov.w	r2, #136314880	@ 0x8200000
 8006c0a:	e001      	b.n	8006c10 <edpt_disable+0x8c>
 8006c0c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006c10:	431a      	orrs	r2, r3
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	e022      	b.n	8006c5e <edpt_disable+0xda>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      dep->diepctl |= DIEPCTL_SNAK;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_INEPNE) == 0) {}
 8006c24:	bf00      	nop
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d0f9      	beq.n	8006c26 <edpt_disable+0xa2>

      // Disable the endpoint.
      dep->diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	797a      	ldrb	r2, [r7, #5]
 8006c38:	2a00      	cmp	r2, #0
 8006c3a:	d001      	beq.n	8006c40 <edpt_disable+0xbc>
 8006c3c:	4a36      	ldr	r2, [pc, #216]	@ (8006d18 <edpt_disable+0x194>)
 8006c3e:	e001      	b.n	8006c44 <edpt_disable+0xc0>
 8006c40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006c44:	431a      	orrs	r2, r3
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_EPDISD_Msk) == 0) {}
 8006c4a:	bf00      	nop
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0f9      	beq.n	8006c4c <edpt_disable+0xc8>

      dep->diepint = DIEPINT_EPDISD;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	609a      	str	r2, [r3, #8]
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	60fb      	str	r3, [r7, #12]
 8006c62:	7efb      	ldrb	r3, [r7, #27]
 8006c64:	72fb      	strb	r3, [r7, #11]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8006c66:	7afb      	ldrb	r3, [r7, #11]
 8006c68:	019b      	lsls	r3, r3, #6
 8006c6a:	f043 0220 	orr.w	r2, r3, #32
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8006c72:	bf00      	nop
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	f003 0320 	and.w	r3, r3, #32
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1f9      	bne.n	8006c74 <edpt_disable+0xf0>
}
 8006c80:	e041      	b.n	8006d06 <edpt_disable+0x182>

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dfifo_flush_tx(dwc2, epnum);
  } else {
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->doepctl & DOEPCTL_EPENA)) {
 8006c82:	7efb      	ldrb	r3, [r7, #27]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <edpt_disable+0x10c>
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	db0c      	blt.n	8006caa <edpt_disable+0x126>
      dep->doepctl |= stall ? DOEPCTL_STALL : 0;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	797a      	ldrb	r2, [r7, #5]
 8006c96:	2a00      	cmp	r2, #0
 8006c98:	d002      	beq.n	8006ca0 <edpt_disable+0x11c>
 8006c9a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8006c9e:	e000      	b.n	8006ca2 <edpt_disable+0x11e>
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	e02d      	b.n	8006d06 <edpt_disable+0x182>
    } else {
      // Asserting GONAK is required to STALL an OUT endpoint.
      // Simpler to use polling here, we don't use the "B"OUTNAKEFF interrupt
      // anyway, and it can't be cleared by user code. If this while loop never
      // finishes, we have bigger problems than just the stack.
      dwc2->dctl |= DCTL_SGONAK;
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8006cb0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 8006cba:	bf00      	nop
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0f9      	beq.n	8006cbc <edpt_disable+0x138>

      // Ditto here disable the endpoint.
      dep->doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	797a      	ldrb	r2, [r7, #5]
 8006cce:	2a00      	cmp	r2, #0
 8006cd0:	d001      	beq.n	8006cd6 <edpt_disable+0x152>
 8006cd2:	4a11      	ldr	r2, [pc, #68]	@ (8006d18 <edpt_disable+0x194>)
 8006cd4:	e001      	b.n	8006cda <edpt_disable+0x156>
 8006cd6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	601a      	str	r2, [r3, #0]
      while ((dep->doepint & DOEPINT_EPDISD_Msk) == 0) {}
 8006ce0:	bf00      	nop
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d0f9      	beq.n	8006ce2 <edpt_disable+0x15e>

      dep->doepint = DOEPINT_EPDISD;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	609a      	str	r2, [r3, #8]

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8006cfa:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    }
  }
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop
 8006d08:	3724      	adds	r7, #36	@ 0x24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	08008824 	.word	0x08008824
 8006d18:	40200000 	.word	0x40200000

08006d1c <edpt_schedule_packets>:

static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08e      	sub	sp, #56	@ 0x38
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	4603      	mov	r3, r0
 8006d24:	71fb      	strb	r3, [r7, #7]
 8006d26:	460b      	mov	r3, r1
 8006d28:	71bb      	strb	r3, [r7, #6]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	717b      	strb	r3, [r7, #5]
 8006d2e:	79fb      	ldrb	r3, [r7, #7]
 8006d30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8006d34:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d902      	bls.n	8006d42 <edpt_schedule_packets+0x26>
    rhport = 0;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8006d42:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006d46:	4a63      	ldr	r2, [pc, #396]	@ (8006ed4 <edpt_schedule_packets+0x1b8>)
 8006d48:	011b      	lsls	r3, r3, #4
 8006d4a:	4413      	add	r3, r2
 8006d4c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006d4e:	633b      	str	r3, [r7, #48]	@ 0x30
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 8006d50:	79ba      	ldrb	r2, [r7, #6]
 8006d52:	797b      	ldrb	r3, [r7, #5]
 8006d54:	0052      	lsls	r2, r2, #1
 8006d56:	4413      	add	r3, r2
 8006d58:	011b      	lsls	r3, r3, #4
 8006d5a:	4a5f      	ldr	r2, [pc, #380]	@ (8006ed8 <edpt_schedule_packets+0x1bc>)
 8006d5c:	4413      	add	r3, r2
 8006d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8006d60:	797b      	ldrb	r3, [r7, #5]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	bf14      	ite	ne
 8006d66:	2301      	movne	r3, #1
 8006d68:	2300      	moveq	r3, #0
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	79bb      	ldrb	r3, [r7, #6]
 8006d70:	0112      	lsls	r2, r2, #4
 8006d72:	4413      	add	r3, r2
 8006d74:	3348      	adds	r3, #72	@ 0x48
 8006d76:	015b      	lsls	r3, r3, #5
 8006d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d7a:	4413      	add	r3, r2
 8006d7c:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 8006d7e:	79bb      	ldrb	r3, [r7, #6]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d11c      	bne.n	8006dbe <edpt_schedule_packets+0xa2>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 8006d84:	797b      	ldrb	r3, [r7, #5]
 8006d86:	4a55      	ldr	r2, [pc, #340]	@ (8006edc <edpt_schedule_packets+0x1c0>)
 8006d88:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d8e:	895b      	ldrh	r3, [r3, #10]
 8006d90:	843a      	strh	r2, [r7, #32]
 8006d92:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8006d94:	8c3a      	ldrh	r2, [r7, #32]
 8006d96:	8bfb      	ldrh	r3, [r7, #30]
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	bf28      	it	cs
 8006d9c:	4613      	movcs	r3, r2
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	86bb      	strh	r3, [r7, #52]	@ 0x34
    _dcd_data.ep0_pending[dir] -= total_bytes;
 8006da2:	797b      	ldrb	r3, [r7, #5]
 8006da4:	4a4d      	ldr	r2, [pc, #308]	@ (8006edc <edpt_schedule_packets+0x1c0>)
 8006da6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006daa:	797b      	ldrb	r3, [r7, #5]
 8006dac:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006dae:	1a8a      	subs	r2, r1, r2
 8006db0:	b291      	uxth	r1, r2
 8006db2:	4a4a      	ldr	r2, [pc, #296]	@ (8006edc <edpt_schedule_packets+0x1c0>)
 8006db4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    num_packets = 1;
 8006db8:	2301      	movs	r3, #1
 8006dba:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006dbc:	e014      	b.n	8006de8 <edpt_schedule_packets+0xcc>
  } else {
    total_bytes = xfer->total_len;
 8006dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc0:	891b      	ldrh	r3, [r3, #8]
 8006dc2:	86bb      	strh	r3, [r7, #52]	@ 0x34
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 8006dc4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006dc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dc8:	8952      	ldrh	r2, [r2, #10]
 8006dca:	61bb      	str	r3, [r7, #24]
 8006dcc:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 8006dce:	69ba      	ldr	r2, [r7, #24]
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	1e5a      	subs	r2, r3, #1
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ddc:	86fb      	strh	r3, [r7, #54]	@ 0x36
    if (num_packets == 0) {
 8006dde:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <edpt_schedule_packets+0xcc>
      num_packets = 1; // zero length packet still count as 1
 8006de4:	2301      	movs	r3, #1
 8006de6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  union {
    uint32_t value;
    dwc2_ep_tsize_t bm;
  } deptsiz;
  deptsiz.value = 0;
 8006de8:	2300      	movs	r3, #0
 8006dea:	60fb      	str	r3, [r7, #12]
  deptsiz.bm.xfer_size =  total_bytes;
 8006dec:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006dee:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f362 0312 	bfi	r3, r2, #0, #19
 8006df8:	60fb      	str	r3, [r7, #12]
  deptsiz.bm.packet_count = num_packets;
 8006dfa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	89fb      	ldrh	r3, [r7, #14]
 8006e04:	f362 03cc 	bfi	r3, r2, #3, #10
 8006e08:	81fb      	strh	r3, [r7, #14]

  dep->tsiz = deptsiz.value;
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0e:	611a      	str	r2, [r3, #16]
  // control
  union {
    dwc2_depctl_t bm;
    uint32_t value;
  } depctl;
  depctl.value = dep->ctl;
 8006e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	60bb      	str	r3, [r7, #8]

  depctl.bm.clear_nak = 1;
 8006e16:	7afb      	ldrb	r3, [r7, #11]
 8006e18:	f043 0304 	orr.w	r3, r3, #4
 8006e1c:	72fb      	strb	r3, [r7, #11]
  depctl.bm.enable = 1;
 8006e1e:	7afb      	ldrb	r3, [r7, #11]
 8006e20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e24:	72fb      	strb	r3, [r7, #11]
  if (depctl.bm.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 8006e26:	7abb      	ldrb	r3, [r7, #10]
 8006e28:	f003 030c 	and.w	r3, r3, #12
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b04      	cmp	r3, #4
 8006e30:	d118      	bne.n	8006e64 <edpt_schedule_packets+0x148>
 8006e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e34:	7b1b      	ldrb	r3, [r3, #12]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d114      	bne.n	8006e64 <edpt_schedule_packets+0x148>
    const uint32_t odd_now = (dwc2->dsts_bm.frame_number & 1u);
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8006e40:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (odd_now) {
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d004      	beq.n	8006e5c <edpt_schedule_packets+0x140>
      depctl.bm.set_data0_iso_even = 1;
 8006e52:	7afb      	ldrb	r3, [r7, #11]
 8006e54:	f043 0310 	orr.w	r3, r3, #16
 8006e58:	72fb      	strb	r3, [r7, #11]
 8006e5a:	e003      	b.n	8006e64 <edpt_schedule_packets+0x148>
    } else {
      depctl.bm.set_data1_iso_odd = 1;
 8006e5c:	7afb      	ldrb	r3, [r7, #11]
 8006e5e:	f043 0320 	orr.w	r3, r3, #32
 8006e62:	72fb      	strb	r3, [r7, #11]
 8006e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e66:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8006e68:	2300      	movs	r3, #0
    }
  }

  const bool is_dma = dma_device_enabled(dwc2);
 8006e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if(is_dma) {
 8006e6e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d015      	beq.n	8006ea2 <edpt_schedule_packets+0x186>
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 8006e76:	797b      	ldrb	r3, [r7, #5]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d109      	bne.n	8006e90 <edpt_schedule_packets+0x174>
 8006e7c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d006      	beq.n	8006e90 <edpt_schedule_packets+0x174>
      dcd_dcache_clean(xfer->buffer, total_bytes);
 8006e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006e88:	4611      	mov	r1, r2
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fd fdfd 	bl	8004a8a <dcd_dcache_clean>
    }
    dep->diepdma = (uintptr_t) xfer->buffer;
 8006e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	461a      	mov	r2, r3
 8006e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e98:	615a      	str	r2, [r3, #20]
    dep->diepctl = depctl.value; // enable endpoint
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9e:	601a      	str	r2, [r3, #0]
    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
      dwc2->diepempmsk |= (1 << epnum);
    }
  }
}
 8006ea0:	e013      	b.n	8006eca <edpt_schedule_packets+0x1ae>
    dep->diepctl = depctl.value; // enable endpoint
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea6:	601a      	str	r2, [r3, #0]
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 8006ea8:	797b      	ldrb	r3, [r7, #5]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d10d      	bne.n	8006eca <edpt_schedule_packets+0x1ae>
 8006eae:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00a      	beq.n	8006eca <edpt_schedule_packets+0x1ae>
      dwc2->diepempmsk |= (1 << epnum);
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb6:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 8006eba:	79ba      	ldrb	r2, [r7, #6]
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec6:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
}
 8006eca:	bf00      	nop
 8006ecc:	3738      	adds	r7, #56	@ 0x38
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	08008824 	.word	0x08008824
 8006ed8:	20000964 	.word	0x20000964
 8006edc:	20000a84 	.word	0x20000a84

08006ee0 <dcd_init>:

//--------------------------------------------------------------------
// Controller API
//--------------------------------------------------------------------
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08a      	sub	sp, #40	@ 0x28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	6039      	str	r1, [r7, #0]
 8006eea:	71fb      	strb	r3, [r7, #7]
 8006eec:	79fb      	ldrb	r3, [r7, #7]
 8006eee:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d901      	bls.n	8006efa <dcd_init+0x1a>
    rhport = 0;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8006efa:	7bfb      	ldrb	r3, [r7, #15]
 8006efc:	4a3e      	ldr	r2, [pc, #248]	@ (8006ff8 <dcd_init+0x118>)
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	4413      	add	r3, r2
 8006f02:	681b      	ldr	r3, [r3, #0]
  (void) rh_init;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006f04:	623b      	str	r3, [r7, #32]

  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 8006f06:	2208      	movs	r2, #8
 8006f08:	2100      	movs	r1, #0
 8006f0a:	483c      	ldr	r0, [pc, #240]	@ (8006ffc <dcd_init+0x11c>)
 8006f0c:	f001 fbb9 	bl	8008682 <memset>

  // Core Initialization
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 8006f10:	2101      	movs	r1, #1
 8006f12:	6a38      	ldr	r0, [r7, #32]
 8006f14:	f001 f92e 	bl	8008174 <dwc2_core_is_highspeed>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	77fb      	strb	r3, [r7, #31]
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8006f20:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 8006f22:	77bb      	strb	r3, [r7, #30]
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 8006f24:	7fba      	ldrb	r2, [r7, #30]
 8006f26:	7ff9      	ldrb	r1, [r7, #31]
 8006f28:	79fb      	ldrb	r3, [r7, #7]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f001 f93e 	bl	80081ac <dwc2_core_init>
 8006f30:	4603      	mov	r3, r0
 8006f32:	f083 0301 	eor.w	r3, r3, #1
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00a      	beq.n	8006f52 <dcd_init+0x72>
 8006f3c:	4b30      	ldr	r3, [pc, #192]	@ (8007000 <dcd_init+0x120>)
 8006f3e:	617b      	str	r3, [r7, #20]
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d000      	beq.n	8006f4e <dcd_init+0x6e>
 8006f4c:	be00      	bkpt	0x0000
 8006f4e:	2300      	movs	r3, #0
 8006f50:	e04d      	b.n	8006fee <dcd_init+0x10e>

  //------------- 7.1 Device Initialization -------------//
  // Set device max speed
  uint32_t dcfg = dwc2->dcfg & ~DCFG_DSPD_Msk;
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8006f58:	f023 0303 	bic.w	r3, r3, #3
 8006f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_highspeed) {
 8006f5e:	7ffb      	ldrb	r3, [r7, #31]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00b      	beq.n	8006f7c <dcd_init+0x9c>
    dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

    // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
    // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
    if (dwc2->ghwcfg2_bm.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 8006f64:	6a3b      	ldr	r3, [r7, #32]
 8006f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f68:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d108      	bne.n	8006f84 <dcd_init+0xa4>
      dcfg |= DCFG_XCVRDLY;
 8006f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f78:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f7a:	e003      	b.n	8006f84 <dcd_init+0xa4>
    }
  } else {
    dcfg |= DCFG_DSPD_FS << DCFG_DSPD_Pos;
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7e:	f043 0303 	orr.w	r3, r3, #3
 8006f82:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  dcfg |= DCFG_NZLSOHSK; // send STALL back and discard if host send non-zlp during control status
 8006f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f86:	f043 0304 	orr.w	r3, r3, #4
 8006f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  dwc2->dcfg = dcfg;
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f90:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  dcd_disconnect(rhport);
 8006f94:	79fb      	ldrb	r3, [r7, #7]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 f8e4 	bl	8007164 <dcd_disconnect>

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006fa4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8006fac:	6a3b      	ldr	r3, [r7, #32]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8006fb4:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	601a      	str	r2, [r3, #0]

  // Enable required interrupts
  dwc2->gintmsk |= GINTMSK_OTGINT | GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	699a      	ldr	r2, [r3, #24]
 8006fc0:	4b10      	ldr	r3, [pc, #64]	@ (8007004 <dcd_init+0x124>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	6a3a      	ldr	r2, [r7, #32]
 8006fc6:	6193      	str	r3, [r2, #24]

  // TX FIFO empty level for interrupt is complete empty
  uint32_t gahbcfg = dwc2->gahbcfg;
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	61bb      	str	r3, [r7, #24]
  gahbcfg |= GAHBCFG_TX_FIFO_EPMTY_LVL;
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fd4:	61bb      	str	r3, [r7, #24]
  gahbcfg |= GAHBCFG_GINT; // Enable global interrupt
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	f043 0301 	orr.w	r3, r3, #1
 8006fdc:	61bb      	str	r3, [r7, #24]
  dwc2->gahbcfg = gahbcfg;
 8006fde:	6a3b      	ldr	r3, [r7, #32]
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 8006fe4:	79fb      	ldrb	r3, [r7, #7]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 f89a 	bl	8007120 <dcd_connect>
  return true;
 8006fec:	2301      	movs	r3, #1
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3728      	adds	r7, #40	@ 0x28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	08008824 	.word	0x08008824
 8006ffc:	20000a84 	.word	0x20000a84
 8007000:	e000edf0 	.word	0xe000edf0
 8007004:	80003804 	.word	0x80003804

08007008 <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	4603      	mov	r3, r0
 8007010:	71fb      	strb	r3, [r7, #7]
 8007012:	79fb      	ldrb	r3, [r7, #7]
 8007014:	73fb      	strb	r3, [r7, #15]
 8007016:	2301      	movs	r3, #1
 8007018:	73bb      	strb	r3, [r7, #14]
 800701a:	2301      	movs	r3, #1
 800701c:	737b      	strb	r3, [r7, #13]
// SystemCoreClock is already included by family header
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE static inline void dwc2_int_set(uint8_t rhport, tusb_role_t role, bool enabled) {
  (void) role;
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 800701e:	7bfb      	ldrb	r3, [r7, #15]
 8007020:	4a0c      	ldr	r2, [pc, #48]	@ (8007054 <dcd_int_enable+0x4c>)
 8007022:	011b      	lsls	r3, r3, #4
 8007024:	4413      	add	r3, r2
 8007026:	3304      	adds	r3, #4
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 800702c:	7b7b      	ldrb	r3, [r7, #13]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d005      	beq.n	800703e <dcd_int_enable+0x36>
    NVIC_EnableIRQ(irqn);
 8007032:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8007036:	4618      	mov	r0, r3
 8007038:	f7ff fb50 	bl	80066dc <__NVIC_EnableIRQ>
  } else {
    NVIC_DisableIRQ(irqn);
  }
}
 800703c:	e004      	b.n	8007048 <dcd_int_enable+0x40>
    NVIC_DisableIRQ(irqn);
 800703e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8007042:	4618      	mov	r0, r3
 8007044:	f7ff fb68 	bl	8006718 <__NVIC_DisableIRQ>
}
 8007048:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 800704a:	bf00      	nop
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	08008824 	.word	0x08008824

08007058 <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	4603      	mov	r3, r0
 8007060:	71fb      	strb	r3, [r7, #7]
 8007062:	79fb      	ldrb	r3, [r7, #7]
 8007064:	73fb      	strb	r3, [r7, #15]
 8007066:	2301      	movs	r3, #1
 8007068:	73bb      	strb	r3, [r7, #14]
 800706a:	2300      	movs	r3, #0
 800706c:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 800706e:	7bfb      	ldrb	r3, [r7, #15]
 8007070:	4a0c      	ldr	r2, [pc, #48]	@ (80070a4 <dcd_int_disable+0x4c>)
 8007072:	011b      	lsls	r3, r3, #4
 8007074:	4413      	add	r3, r2
 8007076:	3304      	adds	r3, #4
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 800707c:	7b7b      	ldrb	r3, [r7, #13]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d005      	beq.n	800708e <dcd_int_disable+0x36>
    NVIC_EnableIRQ(irqn);
 8007082:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8007086:	4618      	mov	r0, r3
 8007088:	f7ff fb28 	bl	80066dc <__NVIC_EnableIRQ>
}
 800708c:	e004      	b.n	8007098 <dcd_int_disable+0x40>
    NVIC_DisableIRQ(irqn);
 800708e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8007092:	4618      	mov	r0, r3
 8007094:	f7ff fb40 	bl	8006718 <__NVIC_DisableIRQ>
}
 8007098:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 800709a:	bf00      	nop
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	08008824 	.word	0x08008824

080070a8 <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	4603      	mov	r3, r0
 80070b0:	460a      	mov	r2, r1
 80070b2:	71fb      	strb	r3, [r7, #7]
 80070b4:	4613      	mov	r3, r2
 80070b6:	71bb      	strb	r3, [r7, #6]
 80070b8:	79fb      	ldrb	r3, [r7, #7]
 80070ba:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80070bc:	7a7b      	ldrb	r3, [r7, #9]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d901      	bls.n	80070c6 <dcd_set_address+0x1e>
    rhport = 0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80070c6:	7a7b      	ldrb	r3, [r7, #9]
 80070c8:	4a14      	ldr	r2, [pc, #80]	@ (800711c <dcd_set_address+0x74>)
 80070ca:	011b      	lsls	r3, r3, #4
 80070cc:	4413      	add	r3, r2
 80070ce:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80070d0:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 80070d8:	f423 62fe 	bic.w	r2, r3, #2032	@ 0x7f0
 80070dc:	79bb      	ldrb	r3, [r7, #6]
 80070de:	011b      	lsls	r3, r3, #4
 80070e0:	431a      	orrs	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 80070e8:	2300      	movs	r3, #0
 80070ea:	72fb      	strb	r3, [r7, #11]
 80070ec:	2301      	movs	r3, #1
 80070ee:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 80070f0:	7abb      	ldrb	r3, [r7, #10]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d002      	beq.n	80070fc <dcd_set_address+0x54>
 80070f6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80070fa:	e000      	b.n	80070fe <dcd_set_address+0x56>
 80070fc:	2300      	movs	r3, #0
 80070fe:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8007102:	4313      	orrs	r3, r2
 8007104:	b25b      	sxtb	r3, r3
 8007106:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8007108:	79f8      	ldrb	r0, [r7, #7]
 800710a:	2300      	movs	r3, #0
 800710c:	2200      	movs	r2, #0
 800710e:	f000 f93f 	bl	8007390 <dcd_edpt_xfer>
}
 8007112:	bf00      	nop
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	08008824 	.word	0x08008824

08007120 <dcd_connect>:
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
}

void dcd_connect(uint8_t rhport) {
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	4603      	mov	r3, r0
 8007128:	71fb      	strb	r3, [r7, #7]
 800712a:	79fb      	ldrb	r3, [r7, #7]
 800712c:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800712e:	7afb      	ldrb	r3, [r7, #11]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d901      	bls.n	8007138 <dcd_connect+0x18>
    rhport = 0;
 8007134:	2300      	movs	r3, #0
 8007136:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007138:	7afb      	ldrb	r3, [r7, #11]
 800713a:	4a09      	ldr	r2, [pc, #36]	@ (8007160 <dcd_connect+0x40>)
 800713c:	011b      	lsls	r3, r3, #4
 800713e:	4413      	add	r3, r2
 8007140:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007142:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 0;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl &= ~DCTL_SDIS;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800714a:	f023 0202 	bic.w	r2, r3, #2
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8007154:	bf00      	nop
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	08008824 	.word	0x08008824

08007164 <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	4603      	mov	r3, r0
 800716c:	71fb      	strb	r3, [r7, #7]
 800716e:	79fb      	ldrb	r3, [r7, #7]
 8007170:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007172:	7afb      	ldrb	r3, [r7, #11]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d901      	bls.n	800717c <dcd_disconnect+0x18>
    rhport = 0;
 8007178:	2300      	movs	r3, #0
 800717a:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800717c:	7afb      	ldrb	r3, [r7, #11]
 800717e:	4a09      	ldr	r2, [pc, #36]	@ (80071a4 <dcd_disconnect+0x40>)
 8007180:	011b      	lsls	r3, r3, #4
 8007182:	4413      	add	r3, r2
 8007184:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007186:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 1;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl |= DCTL_SDIS;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 800718e:	f043 0202 	orr.w	r2, r3, #2
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8007198:	bf00      	nop
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	08008824 	.word	0x08008824

080071a8 <dcd_sof_enable>:

// Be advised: audio, video and possibly other iso-ep classes use dcd_sof_enable() to enable/disable its corresponding ISR on purpose!
void dcd_sof_enable(uint8_t rhport, bool en) {
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	4603      	mov	r3, r0
 80071b0:	460a      	mov	r2, r1
 80071b2:	71fb      	strb	r3, [r7, #7]
 80071b4:	4613      	mov	r3, r2
 80071b6:	71bb      	strb	r3, [r7, #6]
 80071b8:	79fb      	ldrb	r3, [r7, #7]
 80071ba:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80071bc:	7afb      	ldrb	r3, [r7, #11]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d901      	bls.n	80071c6 <dcd_sof_enable+0x1e>
    rhport = 0;
 80071c2:	2300      	movs	r3, #0
 80071c4:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80071c6:	7afb      	ldrb	r3, [r7, #11]
 80071c8:	4a10      	ldr	r2, [pc, #64]	@ (800720c <dcd_sof_enable+0x64>)
 80071ca:	011b      	lsls	r3, r3, #4
 80071cc:	4413      	add	r3, r2
 80071ce:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80071d0:	60fb      	str	r3, [r7, #12]

  _dcd_data.sof_en = en;
 80071d2:	4a0f      	ldr	r2, [pc, #60]	@ (8007210 <dcd_sof_enable+0x68>)
 80071d4:	79bb      	ldrb	r3, [r7, #6]
 80071d6:	71d3      	strb	r3, [r2, #7]

  if (en) {
 80071d8:	79bb      	ldrb	r3, [r7, #6]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d009      	beq.n	80071f2 <dcd_sof_enable+0x4a>
    dwc2->gintsts = GINTSTS_SOF;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2208      	movs	r2, #8
 80071e2:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_SOFM;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	f043 0208 	orr.w	r2, r3, #8
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	619a      	str	r2, [r3, #24]
  } else {
    dwc2->gintmsk &= ~GINTMSK_SOFM;
  }
}
 80071f0:	e005      	b.n	80071fe <dcd_sof_enable+0x56>
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	f023 0208 	bic.w	r2, r3, #8
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	619a      	str	r2, [r3, #24]
}
 80071fe:	bf00      	nop
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	08008824 	.word	0x08008824
 8007210:	20000a84 	.word	0x20000a84

08007214 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	4603      	mov	r3, r0
 800721c:	6039      	str	r1, [r7, #0]
 800721e:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	7899      	ldrb	r1, [r3, #2]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	889b      	ldrh	r3, [r3, #4]
 800722c:	b29b      	uxth	r3, r3
 800722e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007232:	b29a      	uxth	r2, r3
 8007234:	79fb      	ldrb	r3, [r7, #7]
 8007236:	4618      	mov	r0, r3
 8007238:	f7ff face 	bl	80067d8 <dfifo_alloc>
 800723c:	4603      	mov	r3, r0
 800723e:	f083 0301 	eor.w	r3, r3, #1
 8007242:	b2db      	uxtb	r3, r3
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00a      	beq.n	800725e <dcd_edpt_open+0x4a>
 8007248:	4b0a      	ldr	r3, [pc, #40]	@ (8007274 <dcd_edpt_open+0x60>)
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0301 	and.w	r3, r3, #1
 8007254:	2b00      	cmp	r3, #0
 8007256:	d000      	beq.n	800725a <dcd_edpt_open+0x46>
 8007258:	be00      	bkpt	0x0000
 800725a:	2300      	movs	r3, #0
 800725c:	e005      	b.n	800726a <dcd_edpt_open+0x56>
  edpt_activate(rhport, desc_edpt);
 800725e:	79fb      	ldrb	r3, [r7, #7]
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff fbf0 	bl	8006a48 <edpt_activate>
  return true;
 8007268:	2301      	movs	r3, #1
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	e000edf0 	.word	0xe000edf0

08007278 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 8007278:	b580      	push	{r7, lr}
 800727a:	b08a      	sub	sp, #40	@ 0x28
 800727c:	af00      	add	r7, sp, #0
 800727e:	4603      	mov	r3, r0
 8007280:	71fb      	strb	r3, [r7, #7]
 8007282:	79fb      	ldrb	r3, [r7, #7]
 8007284:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007286:	7dfb      	ldrb	r3, [r7, #23]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d901      	bls.n	8007290 <dcd_edpt_close_all+0x18>
    rhport = 0;
 800728c:	2300      	movs	r3, #0
 800728e:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007290:	7dfb      	ldrb	r3, [r7, #23]
 8007292:	4a3c      	ldr	r2, [pc, #240]	@ (8007384 <dcd_edpt_close_all+0x10c>)
 8007294:	011b      	lsls	r3, r3, #4
 8007296:	4413      	add	r3, r2
 8007298:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800729a:	623b      	str	r3, [r7, #32]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 800729c:	79fb      	ldrb	r3, [r7, #7]
 800729e:	4a39      	ldr	r2, [pc, #228]	@ (8007384 <dcd_edpt_close_all+0x10c>)
 80072a0:	011b      	lsls	r3, r3, #4
 80072a2:	4413      	add	r3, r2
 80072a4:	3308      	adds	r3, #8
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	77fb      	strb	r3, [r7, #31]

  _dcd_data.allocated_epin_count = 0;
 80072aa:	4b37      	ldr	r3, [pc, #220]	@ (8007388 <dcd_edpt_close_all+0x110>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	719a      	strb	r2, [r3, #6]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 80072b6:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 80072ba:	2301      	movs	r3, #1
 80072bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80072c0:	e034      	b.n	800732c <dcd_edpt_close_all+0xb4>
    for (uint8_t d = 0; d < 2; d++) {
 80072c2:	2300      	movs	r3, #0
 80072c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80072c8:	e027      	b.n	800731a <dcd_edpt_close_all+0xa2>
      dwc2_dep_t* dep = &dwc2->ep[d][n];
 80072ca:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80072ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072d2:	0112      	lsls	r2, r2, #4
 80072d4:	4413      	add	r3, r2
 80072d6:	3348      	adds	r3, #72	@ 0x48
 80072d8:	015b      	lsls	r3, r3, #5
 80072da:	6a3a      	ldr	r2, [r7, #32]
 80072dc:	4413      	add	r3, r2
 80072de:	61bb      	str	r3, [r7, #24]
      if (dep->ctl & EPCTL_EPENA) {
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	da05      	bge.n	80072f4 <dcd_edpt_close_all+0x7c>
        dep->ctl |= EPCTL_SNAK | EPCTL_EPDIS;
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f043 4290 	orr.w	r2, r3, #1207959552	@ 0x48000000
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	601a      	str	r2, [r3, #0]
      }
      xfer_status[n][1-d].max_size = 0;
 80072f4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80072f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80072fc:	f1c3 0301 	rsb	r3, r3, #1
 8007300:	4922      	ldr	r1, [pc, #136]	@ (800738c <dcd_edpt_close_all+0x114>)
 8007302:	0052      	lsls	r2, r2, #1
 8007304:	4413      	add	r3, r2
 8007306:	011b      	lsls	r3, r3, #4
 8007308:	440b      	add	r3, r1
 800730a:	330a      	adds	r3, #10
 800730c:	2200      	movs	r2, #0
 800730e:	801a      	strh	r2, [r3, #0]
    for (uint8_t d = 0; d < 2; d++) {
 8007310:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007314:	3301      	adds	r3, #1
 8007316:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800731a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800731e:	2b01      	cmp	r3, #1
 8007320:	d9d3      	bls.n	80072ca <dcd_edpt_close_all+0x52>
  for (uint8_t n = 1; n < ep_count; n++) {
 8007322:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007326:	3301      	adds	r3, #1
 8007328:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800732c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007330:	7ffb      	ldrb	r3, [r7, #31]
 8007332:	429a      	cmp	r2, r3
 8007334:	d3c5      	bcc.n	80072c2 <dcd_edpt_close_all+0x4a>
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	60fb      	str	r3, [r7, #12]
 800733a:	2310      	movs	r3, #16
 800733c:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800733e:	7afb      	ldrb	r3, [r7, #11]
 8007340:	019b      	lsls	r3, r3, #6
 8007342:	f043 0220 	orr.w	r2, r3, #32
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800734a:	bf00      	nop
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	f003 0320 	and.w	r3, r3, #32
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1f9      	bne.n	800734c <dcd_edpt_close_all+0xd4>
}
 8007358:	bf00      	nop
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	613b      	str	r3, [r7, #16]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	2210      	movs	r2, #16
 8007362:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 8007364:	bf00      	nop
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	f003 0310 	and.w	r3, r3, #16
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1f9      	bne.n	8007366 <dcd_edpt_close_all+0xee>
}
 8007372:	bf00      	nop
  }

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  dfifo_device_init(rhport); // re-init dfifo
 8007374:	79fb      	ldrb	r3, [r7, #7]
 8007376:	4618      	mov	r0, r3
 8007378:	f7ff fb10 	bl	800699c <dfifo_device_init>
}
 800737c:	bf00      	nop
 800737e:	3728      	adds	r7, #40	@ 0x28
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	08008824 	.word	0x08008824
 8007388:	20000a84 	.word	0x20000a84
 800738c:	20000964 	.word	0x20000964

08007390 <dcd_edpt_xfer>:
  edpt_disable(rhport, p_endpoint_desc->bEndpointAddress, false);
  edpt_activate(rhport, p_endpoint_desc);
  return true;
}

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	603a      	str	r2, [r7, #0]
 8007398:	461a      	mov	r2, r3
 800739a:	4603      	mov	r3, r0
 800739c:	71fb      	strb	r3, [r7, #7]
 800739e:	460b      	mov	r3, r1
 80073a0:	71bb      	strb	r3, [r7, #6]
 80073a2:	4613      	mov	r3, r2
 80073a4:	80bb      	strh	r3, [r7, #4]
 80073a6:	79bb      	ldrb	r3, [r7, #6]
 80073a8:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073b0:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 80073b2:	75fb      	strb	r3, [r7, #23]
 80073b4:	79bb      	ldrb	r3, [r7, #6]
 80073b6:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
 80073ba:	09db      	lsrs	r3, r3, #7
 80073bc:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80073be:	75bb      	strb	r3, [r7, #22]

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 80073c0:	7dfa      	ldrb	r2, [r7, #23]
 80073c2:	7dbb      	ldrb	r3, [r7, #22]
 80073c4:	0052      	lsls	r2, r2, #1
 80073c6:	4413      	add	r3, r2
 80073c8:	011b      	lsls	r3, r3, #4
 80073ca:	4a0f      	ldr	r2, [pc, #60]	@ (8007408 <dcd_edpt_xfer+0x78>)
 80073cc:	4413      	add	r3, r2
 80073ce:	613b      	str	r3, [r7, #16]
  xfer->buffer = buffer;
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	601a      	str	r2, [r3, #0]
  xfer->ff = NULL;
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	2200      	movs	r2, #0
 80073da:	605a      	str	r2, [r3, #4]
  xfer->total_len = total_bytes;
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	88ba      	ldrh	r2, [r7, #4]
 80073e0:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if (epnum == 0) {
 80073e2:	7dfb      	ldrb	r3, [r7, #23]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d104      	bne.n	80073f2 <dcd_edpt_xfer+0x62>
    _dcd_data.ep0_pending[dir] = total_bytes;
 80073e8:	7dbb      	ldrb	r3, [r7, #22]
 80073ea:	4908      	ldr	r1, [pc, #32]	@ (800740c <dcd_edpt_xfer+0x7c>)
 80073ec:	88ba      	ldrh	r2, [r7, #4]
 80073ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  }

  // Schedule packets to be sent within interrupt
  edpt_schedule_packets(rhport, epnum, dir);
 80073f2:	7dba      	ldrb	r2, [r7, #22]
 80073f4:	7df9      	ldrb	r1, [r7, #23]
 80073f6:	79fb      	ldrb	r3, [r7, #7]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7ff fc8f 	bl	8006d1c <edpt_schedule_packets>

  return true;
 80073fe:	2301      	movs	r3, #1
}
 8007400:	4618      	mov	r0, r3
 8007402:	3718      	adds	r7, #24
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	20000964 	.word	0x20000964
 800740c:	20000a84 	.word	0x20000a84

08007410 <dcd_edpt_stall>:
  edpt_schedule_packets(rhport, epnum, dir);

  return true;
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	4603      	mov	r3, r0
 8007418:	460a      	mov	r2, r1
 800741a:	71fb      	strb	r3, [r7, #7]
 800741c:	4613      	mov	r3, r2
 800741e:	71bb      	strb	r3, [r7, #6]
 8007420:	79fb      	ldrb	r3, [r7, #7]
 8007422:	74bb      	strb	r3, [r7, #18]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007424:	7cbb      	ldrb	r3, [r7, #18]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d901      	bls.n	800742e <dcd_edpt_stall+0x1e>
    rhport = 0;
 800742a:	2300      	movs	r3, #0
 800742c:	74bb      	strb	r3, [r7, #18]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800742e:	7cbb      	ldrb	r3, [r7, #18]
 8007430:	4a0f      	ldr	r2, [pc, #60]	@ (8007470 <dcd_edpt_stall+0x60>)
 8007432:	011b      	lsls	r3, r3, #4
 8007434:	4413      	add	r3, r2
 8007436:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007438:	617b      	str	r3, [r7, #20]
  edpt_disable(rhport, ep_addr, true);
 800743a:	79b9      	ldrb	r1, [r7, #6]
 800743c:	79fb      	ldrb	r3, [r7, #7]
 800743e:	2201      	movs	r2, #1
 8007440:	4618      	mov	r0, r3
 8007442:	f7ff fb9f 	bl	8006b84 <edpt_disable>
 8007446:	79bb      	ldrb	r3, [r7, #6]
 8007448:	74fb      	strb	r3, [r7, #19]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800744a:	7cfb      	ldrb	r3, [r7, #19]
 800744c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007450:	b2db      	uxtb	r3, r3
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 8007452:	2b00      	cmp	r3, #0
 8007454:	d108      	bne.n	8007468 <dcd_edpt_stall+0x58>
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800745a:	2300      	movs	r3, #0
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 800745c:	2b00      	cmp	r3, #0
 800745e:	d003      	beq.n	8007468 <dcd_edpt_stall+0x58>
    dma_setup_prepare(rhport);
 8007460:	79fb      	ldrb	r3, [r7, #7]
 8007462:	4618      	mov	r0, r3
 8007464:	f7ff f97c 	bl	8006760 <dma_setup_prepare>
  }
}
 8007468:	bf00      	nop
 800746a:	3718      	adds	r7, #24
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	08008824 	.word	0x08008824

08007474 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	4603      	mov	r3, r0
 800747c:	460a      	mov	r2, r1
 800747e:	71fb      	strb	r3, [r7, #7]
 8007480:	4613      	mov	r3, r2
 8007482:	71bb      	strb	r3, [r7, #6]
 8007484:	79fb      	ldrb	r3, [r7, #7]
 8007486:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007488:	7a7b      	ldrb	r3, [r7, #9]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d901      	bls.n	8007492 <dcd_edpt_clear_stall+0x1e>
    rhport = 0;
 800748e:	2300      	movs	r3, #0
 8007490:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007492:	7a7b      	ldrb	r3, [r7, #9]
 8007494:	4a19      	ldr	r2, [pc, #100]	@ (80074fc <dcd_edpt_clear_stall+0x88>)
 8007496:	011b      	lsls	r3, r3, #4
 8007498:	4413      	add	r3, r2
 800749a:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800749c:	617b      	str	r3, [r7, #20]
 800749e:	79bb      	ldrb	r3, [r7, #6]
 80074a0:	72bb      	strb	r3, [r7, #10]
 80074a2:	7abb      	ldrb	r3, [r7, #10]
 80074a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074a8:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 80074aa:	74fb      	strb	r3, [r7, #19]
 80074ac:	79bb      	ldrb	r3, [r7, #6]
 80074ae:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80074b0:	7afb      	ldrb	r3, [r7, #11]
 80074b2:	09db      	lsrs	r3, r3, #7
 80074b4:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80074b6:	74bb      	strb	r3, [r7, #18]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 80074b8:	7cbb      	ldrb	r3, [r7, #18]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	bf14      	ite	ne
 80074be:	2301      	movne	r3, #1
 80074c0:	2300      	moveq	r3, #0
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	461a      	mov	r2, r3
 80074c6:	7cfb      	ldrb	r3, [r7, #19]
 80074c8:	0112      	lsls	r2, r2, #4
 80074ca:	4413      	add	r3, r2
 80074cc:	3348      	adds	r3, #72	@ 0x48
 80074ce:	015b      	lsls	r3, r3, #5
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	4413      	add	r3, r2
 80074d4:	60fb      	str	r3, [r7, #12]

  // Clear stall and reset data toggle
  dep->ctl &= ~EPCTL_STALL;;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	601a      	str	r2, [r3, #0]
  dep->ctl |= EPCTL_SD0PID_SEVNFRM;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	601a      	str	r2, [r3, #0]
}
 80074ee:	bf00      	nop
 80074f0:	371c      	adds	r7, #28
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	08008824 	.word	0x08008824

08007500 <handle_bus_reset>:
//--------------------------------------------------------------------
// Interrupt Handler
//--------------------------------------------------------------------

// 7.4.1 Initialization on USB Reset
static void handle_bus_reset(uint8_t rhport) {
 8007500:	b580      	push	{r7, lr}
 8007502:	b08a      	sub	sp, #40	@ 0x28
 8007504:	af00      	add	r7, sp, #0
 8007506:	4603      	mov	r3, r0
 8007508:	71fb      	strb	r3, [r7, #7]
 800750a:	79fb      	ldrb	r3, [r7, #7]
 800750c:	77bb      	strb	r3, [r7, #30]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800750e:	7fbb      	ldrb	r3, [r7, #30]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d901      	bls.n	8007518 <handle_bus_reset+0x18>
    rhport = 0;
 8007514:	2300      	movs	r3, #0
 8007516:	77bb      	strb	r3, [r7, #30]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007518:	7fbb      	ldrb	r3, [r7, #30]
 800751a:	4a63      	ldr	r2, [pc, #396]	@ (80076a8 <handle_bus_reset+0x1a8>)
 800751c:	011b      	lsls	r3, r3, #4
 800751e:	4413      	add	r3, r2
 8007520:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8007522:	623b      	str	r3, [r7, #32]
  const uint8_t ep_count =  DWC2_EP_COUNT(dwc2);
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007528:	f3c3 2383 	ubfx	r3, r3, #10, #4
 800752c:	b2db      	uxtb	r3, r3
 800752e:	3301      	adds	r3, #1
 8007530:	77fb      	strb	r3, [r7, #31]

  tu_memclr(xfer_status, sizeof(xfer_status));
 8007532:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8007536:	2100      	movs	r1, #0
 8007538:	485c      	ldr	r0, [pc, #368]	@ (80076ac <handle_bus_reset+0x1ac>)
 800753a:	f001 f8a2 	bl	8008682 <memset>

  _dcd_data.sof_en = false;
 800753e:	4b5c      	ldr	r3, [pc, #368]	@ (80076b0 <handle_bus_reset+0x1b0>)
 8007540:	2200      	movs	r2, #0
 8007542:	71da      	strb	r2, [r3, #7]
  _dcd_data.allocated_epin_count = 0;
 8007544:	4b5a      	ldr	r3, [pc, #360]	@ (80076b0 <handle_bus_reset+0x1b0>)
 8007546:	2200      	movs	r2, #0
 8007548:	719a      	strb	r2, [r3, #6]

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 800754a:	2300      	movs	r3, #0
 800754c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007550:	e014      	b.n	800757c <handle_bus_reset+0x7c>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8007552:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007556:	6a3a      	ldr	r2, [r7, #32]
 8007558:	3358      	adds	r3, #88	@ 0x58
 800755a:	015b      	lsls	r3, r3, #5
 800755c:	4413      	add	r3, r2
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007564:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8007568:	6a39      	ldr	r1, [r7, #32]
 800756a:	3358      	adds	r3, #88	@ 0x58
 800756c:	015b      	lsls	r3, r3, #5
 800756e:	440b      	add	r3, r1
 8007570:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 8007572:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007576:	3301      	adds	r3, #1
 8007578:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800757c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007580:	7ffb      	ldrb	r3, [r7, #31]
 8007582:	429a      	cmp	r2, r3
 8007584:	d3e5      	bcc.n	8007552 <handle_bus_reset+0x52>
  }

  // Disable all IN endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 8007586:	2300      	movs	r3, #0
 8007588:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800758c:	e01d      	b.n	80075ca <handle_bus_reset+0xca>
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 800758e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007592:	6a3a      	ldr	r2, [r7, #32]
 8007594:	3348      	adds	r3, #72	@ 0x48
 8007596:	015b      	lsls	r3, r3, #5
 8007598:	4413      	add	r3, r2
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	da0f      	bge.n	80075c0 <handle_bus_reset+0xc0>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 80075a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80075a4:	6a3a      	ldr	r2, [r7, #32]
 80075a6:	3348      	adds	r3, #72	@ 0x48
 80075a8:	015b      	lsls	r3, r3, #5
 80075aa:	4413      	add	r3, r2
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80075b2:	f042 4290 	orr.w	r2, r2, #1207959552	@ 0x48000000
 80075b6:	6a39      	ldr	r1, [r7, #32]
 80075b8:	3348      	adds	r3, #72	@ 0x48
 80075ba:	015b      	lsls	r3, r3, #5
 80075bc:	440b      	add	r3, r1
 80075be:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 80075c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80075c4:	3301      	adds	r3, #1
 80075c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80075ca:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80075ce:	7ffb      	ldrb	r3, [r7, #31]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d3dc      	bcc.n	800758e <handle_bus_reset+0x8e>
    }
  }

  // 2. Set up interrupt mask for EP0
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 80075da:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	2209      	movs	r2, #9
 80075e2:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	2209      	movs	r2, #9
 80075ea:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	613b      	str	r3, [r7, #16]
 80075f2:	2310      	movs	r3, #16
 80075f4:	73fb      	strb	r3, [r7, #15]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 80075f6:	7bfb      	ldrb	r3, [r7, #15]
 80075f8:	019b      	lsls	r3, r3, #6
 80075fa:	f043 0220 	orr.w	r2, r3, #32
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8007602:	bf00      	nop
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	f003 0320 	and.w	r3, r3, #32
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1f9      	bne.n	8007604 <handle_bus_reset+0x104>
}
 8007610:	bf00      	nop
 8007612:	6a3b      	ldr	r3, [r7, #32]
 8007614:	617b      	str	r3, [r7, #20]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2210      	movs	r2, #16
 800761a:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800761c:	bf00      	nop
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	f003 0310 	and.w	r3, r3, #16
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1f9      	bne.n	800761e <handle_bus_reset+0x11e>
}
 800762a:	bf00      	nop

  // 4. Set up DFIFO
  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport);
 800762c:	79fb      	ldrb	r3, [r7, #7]
 800762e:	4618      	mov	r0, r3
 8007630:	f7ff f9b4 	bl	800699c <dfifo_device_init>

  // 5. Reset device address
  dwc2->dcfg_bm.address = 0;
 8007634:	6a3a      	ldr	r2, [r7, #32]
 8007636:	f8d2 3800 	ldr.w	r3, [r2, #2048]	@ 0x800
 800763a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800763e:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

  // Fixed both control EP0 size to 64 bytes
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8007648:	f023 0203 	bic.w	r2, r3, #3
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8007658:	f023 0203 	bic.w	r2, r3, #3
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 8007662:	4b12      	ldr	r3, [pc, #72]	@ (80076ac <handle_bus_reset+0x1ac>)
 8007664:	2240      	movs	r2, #64	@ 0x40
 8007666:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8007668:	4b10      	ldr	r3, [pc, #64]	@ (80076ac <handle_bus_reset+0x1ac>)
 800766a:	2240      	movs	r2, #64	@ 0x40
 800766c:	835a      	strh	r2, [r3, #26]
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	61bb      	str	r3, [r7, #24]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8007672:	2300      	movs	r3, #0

  if(dma_device_enabled(dwc2)) {
 8007674:	2b00      	cmp	r3, #0
 8007676:	d004      	beq.n	8007682 <handle_bus_reset+0x182>
    dma_setup_prepare(rhport);
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	4618      	mov	r0, r3
 800767c:	f7ff f870 	bl	8006760 <dma_setup_prepare>
 8007680:	e007      	b.n	8007692 <handle_bus_reset+0x192>
  } else {
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 8007688:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 800768c:	6a3b      	ldr	r3, [r7, #32]
 800768e:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  }

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	619a      	str	r2, [r3, #24]
}
 800769e:	bf00      	nop
 80076a0:	3728      	adds	r7, #40	@ 0x28
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	08008824 	.word	0x08008824
 80076ac:	20000964 	.word	0x20000964
 80076b0:	20000a84 	.word	0x20000a84

080076b4 <handle_enum_done>:

static void handle_enum_done(uint8_t rhport) {
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	4603      	mov	r3, r0
 80076bc:	71fb      	strb	r3, [r7, #7]
 80076be:	79fb      	ldrb	r3, [r7, #7]
 80076c0:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80076c2:	7dfb      	ldrb	r3, [r7, #23]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d901      	bls.n	80076cc <handle_enum_done+0x18>
    rhport = 0;
 80076c8:	2300      	movs	r3, #0
 80076ca:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80076cc:	7dfb      	ldrb	r3, [r7, #23]
 80076ce:	4a18      	ldr	r2, [pc, #96]	@ (8007730 <handle_enum_done+0x7c>)
 80076d0:	011b      	lsls	r3, r3, #4
 80076d2:	4413      	add	r3, r2
 80076d4:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 80076d6:	61bb      	str	r3, [r7, #24]
  tusb_speed_t speed;
  switch (dwc2->dsts_bm.enum_speed) {
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80076de:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <handle_enum_done+0x3a>
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d003      	beq.n	80076f4 <handle_enum_done+0x40>
 80076ec:	e005      	b.n	80076fa <handle_enum_done+0x46>
    case DCFG_SPEED_HIGH:
      speed = TUSB_SPEED_HIGH;
 80076ee:	2302      	movs	r3, #2
 80076f0:	77fb      	strb	r3, [r7, #31]
    break;
 80076f2:	e005      	b.n	8007700 <handle_enum_done+0x4c>

    case DCFG_SPEED_LOW:
      speed = TUSB_SPEED_LOW;
 80076f4:	2301      	movs	r3, #1
 80076f6:	77fb      	strb	r3, [r7, #31]
    break;
 80076f8:	e002      	b.n	8007700 <handle_enum_done+0x4c>

    case DCFG_SPEED_FULL_30_60MHZ:
    case DCFG_SPEED_FULL_48MHZ:
    default:
      speed = TUSB_SPEED_FULL;
 80076fa:	2300      	movs	r3, #0
 80076fc:	77fb      	strb	r3, [r7, #31]
    break;
 80076fe:	bf00      	nop
 8007700:	79fb      	ldrb	r3, [r7, #7]
 8007702:	75bb      	strb	r3, [r7, #22]
 8007704:	7ffb      	ldrb	r3, [r7, #31]
 8007706:	757b      	strb	r3, [r7, #21]
 8007708:	2301      	movs	r3, #1
 800770a:	753b      	strb	r3, [r7, #20]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800770c:	7dbb      	ldrb	r3, [r7, #22]
 800770e:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_BUS_RESET;
 8007710:	2301      	movs	r3, #1
 8007712:	727b      	strb	r3, [r7, #9]
  event.bus_reset.speed = speed;
 8007714:	7d7b      	ldrb	r3, [r7, #21]
 8007716:	733b      	strb	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 8007718:	7d3a      	ldrb	r2, [r7, #20]
 800771a:	f107 0308 	add.w	r3, r7, #8
 800771e:	4611      	mov	r1, r2
 8007720:	4618      	mov	r0, r3
 8007722:	f7fe f9cd 	bl	8005ac0 <dcd_event_handler>
}
 8007726:	bf00      	nop
  }

  // TODO must update GUSBCFG_TRDT according to link speed
  dcd_event_bus_reset(rhport, speed, true);
}
 8007728:	bf00      	nop
 800772a:	3720      	adds	r7, #32
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	08008824 	.word	0x08008824

08007734 <handle_rxflvl_irq>:
}
#endif

#if CFG_TUD_DWC2_SLAVE_ENABLE
// Process shared receive FIFO, this interrupt is only used in Slave mode
static void handle_rxflvl_irq(uint8_t rhport) {
 8007734:	b580      	push	{r7, lr}
 8007736:	b08c      	sub	sp, #48	@ 0x30
 8007738:	af00      	add	r7, sp, #0
 800773a:	4603      	mov	r3, r0
 800773c:	71fb      	strb	r3, [r7, #7]
 800773e:	79fb      	ldrb	r3, [r7, #7]
 8007740:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007742:	7cfb      	ldrb	r3, [r7, #19]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d901      	bls.n	800774c <handle_rxflvl_irq+0x18>
    rhport = 0;
 8007748:	2300      	movs	r3, #0
 800774a:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800774c:	7cfb      	ldrb	r3, [r7, #19]
 800774e:	4a48      	ldr	r2, [pc, #288]	@ (8007870 <handle_rxflvl_irq+0x13c>)
 8007750:	011b      	lsls	r3, r3, #4
 8007752:	4413      	add	r3, r2
 8007754:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 8007758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800775e:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Pop control word off FIFO
  const dwc2_grxstsp_t grxstsp_bm = dwc2->grxstsp_bm;
 8007760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007762:	6a1b      	ldr	r3, [r3, #32]
 8007764:	60fb      	str	r3, [r7, #12]
  const uint8_t epnum = grxstsp_bm.ep_ch_num;
 8007766:	7b3b      	ldrb	r3, [r7, #12]
 8007768:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800776c:	b2db      	uxtb	r3, r3
 800776e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  dwc2_dep_t* epout = &dwc2->epout[epnum];
 8007772:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007776:	3358      	adds	r3, #88	@ 0x58
 8007778:	015b      	lsls	r3, r3, #5
 800777a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800777c:	4413      	add	r3, r2
 800777e:	623b      	str	r3, [r7, #32]

  switch (grxstsp_bm.packet_status) {
 8007780:	7bbb      	ldrb	r3, [r7, #14]
 8007782:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8007786:	b2db      	uxtb	r3, r3
 8007788:	3b01      	subs	r3, #1
 800778a:	2b05      	cmp	r3, #5
 800778c:	d868      	bhi.n	8007860 <handle_rxflvl_irq+0x12c>
 800778e:	a201      	add	r2, pc, #4	@ (adr r2, 8007794 <handle_rxflvl_irq+0x60>)
 8007790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007794:	08007861 	.word	0x08007861
 8007798:	080077d3 	.word	0x080077d3
 800779c:	08007861 	.word	0x08007861
 80077a0:	080077c5 	.word	0x080077c5
 80077a4:	08007861 	.word	0x08007861
 80077a8:	080077ad 	.word	0x080077ad
      // Global OUT NAK: do nothing
      break;

    case GRXSTS_PKTSTS_SETUP_RX: {
      // Setup packet received
      uint32_t* setup = (uint32_t*)(uintptr_t) _dcd_usbbuf.setup_packet;
 80077ac:	4b31      	ldr	r3, [pc, #196]	@ (8007874 <handle_rxflvl_irq+0x140>)
 80077ae:	61fb      	str	r3, [r7, #28]
      // We can receive up to three setup packets in succession, but only the last one is valid.
      setup[0] = (*rx_fifo);
 80077b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	601a      	str	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	3304      	adds	r3, #4
 80077bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077be:	6812      	ldr	r2, [r2, #0]
 80077c0:	601a      	str	r2, [r3, #0]
      break;
 80077c2:	e050      	b.n	8007866 <handle_rxflvl_irq+0x132>
    }

    case GRXSTS_PKTSTS_SETUP_DONE:
      // Setup packet done:
      // After popping this out, dwc2 asserts a DOEPINT_SETUP interrupt which is handled by handle_epout_irq()
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 80077c4:	6a3b      	ldr	r3, [r7, #32]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	611a      	str	r2, [r3, #16]
      break;
 80077d0:	e049      	b.n	8007866 <handle_rxflvl_irq+0x132>

    case GRXSTS_PKTSTS_RX_DATA: {
      // Out packet received
      const uint16_t byte_count = grxstsp_bm.byte_count;
 80077d2:	89bb      	ldrh	r3, [r7, #12]
 80077d4:	f3c3 130a 	ubfx	r3, r3, #4, #11
 80077d8:	b29b      	uxth	r3, r3
 80077da:	837b      	strh	r3, [r7, #26]
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 80077dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077e0:	015b      	lsls	r3, r3, #5
 80077e2:	4a25      	ldr	r2, [pc, #148]	@ (8007878 <handle_rxflvl_irq+0x144>)
 80077e4:	4413      	add	r3, r2
 80077e6:	617b      	str	r3, [r7, #20]

      if (byte_count) {
 80077e8:	8b7b      	ldrh	r3, [r7, #26]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d03a      	beq.n	8007864 <handle_rxflvl_irq+0x130>
        // Read packet off RxFIFO
        if (xfer->ff) {
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d007      	beq.n	8007806 <handle_rxflvl_irq+0xd2>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	8b7a      	ldrh	r2, [r7, #26]
 80077fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fd f8b8 	bl	8004974 <tu_fifo_write_n_const_addr_full_words>
 8007804:	e00c      	b.n	8007820 <handle_rxflvl_irq+0xec>
        } else {
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	8b7a      	ldrh	r2, [r7, #26]
 800780c:	4619      	mov	r1, r3
 800780e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007810:	f000 fd58 	bl	80082c4 <dfifo_read_packet>
          xfer->buffer += byte_count;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	8b7b      	ldrh	r3, [r7, #26]
 800781a:	441a      	add	r2, r3
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	601a      	str	r2, [r3, #0]
        }

        // short packet, minus remaining bytes (xfer_size)
        if (byte_count < xfer->max_size) {
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	895b      	ldrh	r3, [r3, #10]
 8007824:	8b7a      	ldrh	r2, [r7, #26]
 8007826:	429a      	cmp	r2, r3
 8007828:	d21c      	bcs.n	8007864 <handle_rxflvl_irq+0x130>
          xfer->total_len -= epout->tsiz_bm.xfer_size;
 800782a:	6a3b      	ldr	r3, [r7, #32]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	f3c3 0112 	ubfx	r1, r3, #0, #19
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	891a      	ldrh	r2, [r3, #8]
 8007836:	b28b      	uxth	r3, r1
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	b29a      	uxth	r2, r3
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	811a      	strh	r2, [r3, #8]
          if (epnum == 0) {
 8007840:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10d      	bne.n	8007864 <handle_rxflvl_irq+0x130>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	891a      	ldrh	r2, [r3, #8]
 800784c:	4b0b      	ldr	r3, [pc, #44]	@ (800787c <handle_rxflvl_irq+0x148>)
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	b29a      	uxth	r2, r3
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	811a      	strh	r2, [r3, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 8007858:	4b08      	ldr	r3, [pc, #32]	@ (800787c <handle_rxflvl_irq+0x148>)
 800785a:	2200      	movs	r2, #0
 800785c:	801a      	strh	r2, [r3, #0]
          }
        }
      }
      break;
 800785e:	e001      	b.n	8007864 <handle_rxflvl_irq+0x130>
      // Out packet done
      // After this entry is popped from the receive FIFO, dwc2 asserts a Transfer Completed interrupt on
      // the specified OUT endpoint which will be handled by handle_epout_irq()
      break;

    default: break;
 8007860:	bf00      	nop
 8007862:	e000      	b.n	8007866 <handle_rxflvl_irq+0x132>
      break;
 8007864:	bf00      	nop
  }
}
 8007866:	bf00      	nop
 8007868:	3730      	adds	r7, #48	@ 0x30
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	08008824 	.word	0x08008824
 8007874:	20000a8c 	.word	0x20000a8c
 8007878:	20000964 	.word	0x20000964
 800787c:	20000a84 	.word	0x20000a84

08007880 <handle_epout_slave>:

static void handle_epout_slave(uint8_t rhport, uint8_t epnum, dwc2_doepint_t doepint_bm) {
 8007880:	b580      	push	{r7, lr}
 8007882:	b08e      	sub	sp, #56	@ 0x38
 8007884:	af00      	add	r7, sp, #0
 8007886:	4603      	mov	r3, r0
 8007888:	603a      	str	r2, [r7, #0]
 800788a:	71fb      	strb	r3, [r7, #7]
 800788c:	460b      	mov	r3, r1
 800788e:	71bb      	strb	r3, [r7, #6]
  if (doepint_bm.setup_phase_done) {
 8007890:	783b      	ldrb	r3, [r7, #0]
 8007892:	f003 0308 	and.w	r3, r3, #8
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	d01c      	beq.n	80078d6 <handle_epout_slave+0x56>
 800789c:	79fb      	ldrb	r3, [r7, #7]
 800789e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80078a2:	4b34      	ldr	r3, [pc, #208]	@ (8007974 <handle_epout_slave+0xf4>)
 80078a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078a6:	2301      	movs	r3, #1
 80078a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 80078ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80078b0:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 80078b2:	2306      	movs	r3, #6
 80078b4:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 80078b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078b8:	f107 0318 	add.w	r3, r7, #24
 80078bc:	6810      	ldr	r0, [r2, #0]
 80078be:	6851      	ldr	r1, [r2, #4]
 80078c0:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 80078c2:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80078c6:	f107 0314 	add.w	r3, r7, #20
 80078ca:	4611      	mov	r1, r2
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fe f8f7 	bl	8005ac0 <dcd_event_handler>
}
 80078d2:	bf00      	nop
    dcd_event_setup_received(rhport, _dcd_usbbuf.setup_packet, true);
    return;
 80078d4:	e04a      	b.n	800796c <handle_epout_slave+0xec>
  }

  // Normal OUT transfer complete
  if (doepint_bm.xfer_complete) {
 80078d6:	783b      	ldrb	r3, [r7, #0]
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d044      	beq.n	800796c <handle_epout_slave+0xec>
    // only handle data skip if it is setup or status related
    // Note: even though (xfer_complete + status_phase_rx) is for buffered DMA only, for STM32L47x (dwc2 v3.00a) they
    // can is set when GRXSTS_PKTSTS_SETUP_RX is popped therefore they can bet set before/together with setup_phase_done
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 80078e2:	783b      	ldrb	r3, [r7, #0]
 80078e4:	f003 0320 	and.w	r3, r3, #32
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d13e      	bne.n	800796c <handle_epout_slave+0xec>
 80078ee:	787b      	ldrb	r3, [r7, #1]
 80078f0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d138      	bne.n	800796c <handle_epout_slave+0xec>
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 80078fa:	79bb      	ldrb	r3, [r7, #6]
 80078fc:	015b      	lsls	r3, r3, #5
 80078fe:	4a1e      	ldr	r2, [pc, #120]	@ (8007978 <handle_epout_slave+0xf8>)
 8007900:	4413      	add	r3, r2
 8007902:	637b      	str	r3, [r7, #52]	@ 0x34

      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 8007904:	79bb      	ldrb	r3, [r7, #6]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10a      	bne.n	8007920 <handle_epout_slave+0xa0>
 800790a:	4b1c      	ldr	r3, [pc, #112]	@ (800797c <handle_epout_slave+0xfc>)
 800790c:	881b      	ldrh	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d006      	beq.n	8007920 <handle_epout_slave+0xa0>
        // EP0 can only handle one packet, Schedule another packet to be received.
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 8007912:	79b9      	ldrb	r1, [r7, #6]
 8007914:	79fb      	ldrb	r3, [r7, #7]
 8007916:	2200      	movs	r2, #0
 8007918:	4618      	mov	r0, r3
 800791a:	f7ff f9ff 	bl	8006d1c <edpt_schedule_packets>
 800791e:	e025      	b.n	800796c <handle_epout_slave+0xec>
      } else {
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8007920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007922:	891b      	ldrh	r3, [r3, #8]
 8007924:	461a      	mov	r2, r3
 8007926:	79fb      	ldrb	r3, [r7, #7]
 8007928:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800792c:	79bb      	ldrb	r3, [r7, #6]
 800792e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8007932:	627a      	str	r2, [r7, #36]	@ 0x24
 8007934:	2300      	movs	r3, #0
 8007936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800793a:	2301      	movs	r3, #1
 800793c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8007940:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007944:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8007946:	2307      	movs	r3, #7
 8007948:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 800794a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800794e:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 8007950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007952:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 8007954:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007958:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 800795a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800795e:	f107 0308 	add.w	r3, r7, #8
 8007962:	4611      	mov	r1, r2
 8007964:	4618      	mov	r0, r3
 8007966:	f7fe f8ab 	bl	8005ac0 <dcd_event_handler>
}
 800796a:	bf00      	nop
      }
    }
  }
}
 800796c:	3738      	adds	r7, #56	@ 0x38
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	20000a8c 	.word	0x20000a8c
 8007978:	20000964 	.word	0x20000964
 800797c:	20000a84 	.word	0x20000a84

08007980 <handle_epin_slave>:

static void handle_epin_slave(uint8_t rhport, uint8_t epnum, dwc2_diepint_t diepint_bm) {
 8007980:	b580      	push	{r7, lr}
 8007982:	b090      	sub	sp, #64	@ 0x40
 8007984:	af00      	add	r7, sp, #0
 8007986:	4603      	mov	r3, r0
 8007988:	603a      	str	r2, [r7, #0]
 800798a:	71fb      	strb	r3, [r7, #7]
 800798c:	460b      	mov	r3, r1
 800798e:	71bb      	strb	r3, [r7, #6]
 8007990:	79fb      	ldrb	r3, [r7, #7]
 8007992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007996:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800799a:	2b01      	cmp	r3, #1
 800799c:	d902      	bls.n	80079a4 <handle_epin_slave+0x24>
    rhport = 0;
 800799e:	2300      	movs	r3, #0
 80079a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80079a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80079a8:	4a5d      	ldr	r2, [pc, #372]	@ (8007b20 <handle_epin_slave+0x1a0>)
 80079aa:	011b      	lsls	r3, r3, #4
 80079ac:	4413      	add	r3, r2
 80079ae:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80079b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  dwc2_dep_t* epin = &dwc2->epin[epnum];
 80079b2:	79bb      	ldrb	r3, [r7, #6]
 80079b4:	3348      	adds	r3, #72	@ 0x48
 80079b6:	015b      	lsls	r3, r3, #5
 80079b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079ba:	4413      	add	r3, r2
 80079bc:	637b      	str	r3, [r7, #52]	@ 0x34
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_IN);
 80079be:	79bb      	ldrb	r3, [r7, #6]
 80079c0:	015b      	lsls	r3, r3, #5
 80079c2:	3310      	adds	r3, #16
 80079c4:	4a57      	ldr	r2, [pc, #348]	@ (8007b24 <handle_epin_slave+0x1a4>)
 80079c6:	4413      	add	r3, r2
 80079c8:	633b      	str	r3, [r7, #48]	@ 0x30

  if (diepint_bm.xfer_complete) {
 80079ca:	783b      	ldrb	r3, [r7, #0]
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d033      	beq.n	8007a3e <handle_epin_slave+0xbe>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 80079d6:	79bb      	ldrb	r3, [r7, #6]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10a      	bne.n	80079f2 <handle_epin_slave+0x72>
 80079dc:	4b52      	ldr	r3, [pc, #328]	@ (8007b28 <handle_epin_slave+0x1a8>)
 80079de:	885b      	ldrh	r3, [r3, #2]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d006      	beq.n	80079f2 <handle_epin_slave+0x72>
      // EP0 can only handle one packet. Schedule another packet to be transmitted.
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 80079e4:	79b9      	ldrb	r1, [r7, #6]
 80079e6:	79fb      	ldrb	r3, [r7, #7]
 80079e8:	2201      	movs	r2, #1
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7ff f996 	bl	8006d1c <edpt_schedule_packets>
 80079f0:	e025      	b.n	8007a3e <handle_epin_slave+0xbe>
    } else {
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 80079f2:	79bb      	ldrb	r3, [r7, #6]
 80079f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80079f8:	b2d9      	uxtb	r1, r3
 80079fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fc:	891b      	ldrh	r3, [r3, #8]
 80079fe:	461a      	mov	r2, r3
 8007a00:	79fb      	ldrb	r3, [r7, #7]
 8007a02:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007a06:	460b      	mov	r3, r1
 8007a08:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8007a0c:	61fa      	str	r2, [r7, #28]
 8007a0e:	2300      	movs	r3, #0
 8007a10:	76fb      	strb	r3, [r7, #27]
 8007a12:	2301      	movs	r3, #1
 8007a14:	76bb      	strb	r3, [r7, #26]
  event.rhport = rhport;
 8007a16:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8007a1a:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8007a1c:	2307      	movs	r3, #7
 8007a1e:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 8007a20:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007a24:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 8007a2a:	7efb      	ldrb	r3, [r7, #27]
 8007a2c:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 8007a2e:	7eba      	ldrb	r2, [r7, #26]
 8007a30:	f107 0308 	add.w	r3, r7, #8
 8007a34:	4611      	mov	r1, r2
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fe f842 	bl	8005ac0 <dcd_event_handler>
}
 8007a3c:	bf00      	nop
  }

  // TX FIFO empty bit is read-only. It will only be cleared by hardware when written bytes is more than
  // - 64 bytes or
  // - Half/Empty of TX FIFO size (configured by GAHBCFG.TXFELVL)
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 8007a3e:	783b      	ldrb	r3, [r7, #0]
 8007a40:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d066      	beq.n	8007b18 <handle_epin_slave+0x198>
 8007a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4c:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 8007a50:	79ba      	ldrb	r2, [r7, #6]
 8007a52:	2101      	movs	r1, #1
 8007a54:	fa01 f202 	lsl.w	r2, r1, r2
 8007a58:	4013      	ands	r3, r2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d05c      	beq.n	8007b18 <handle_epin_slave+0x198>
    const uint16_t remain_packets = epin->tsiz_bm.packet_count;
 8007a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	f3c3 43c9 	ubfx	r3, r3, #19, #10
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    // Process every single packet (only whole packets can be written to fifo)
    for (uint16_t i = 0; i < remain_packets; i++) {
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007a6e:	e03b      	b.n	8007ae8 <handle_epin_slave+0x168>
      const uint16_t remain_bytes = (uint16_t) epin->tsiz_bm.xfer_size;
 8007a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a78:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      const uint16_t xact_bytes = tu_min16(remain_bytes, xfer->max_size);
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7c:	895a      	ldrh	r2, [r3, #10]
 8007a7e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007a80:	833b      	strh	r3, [r7, #24]
 8007a82:	4613      	mov	r3, r2
 8007a84:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8007a86:	8b3a      	ldrh	r2, [r7, #24]
 8007a88:	8afb      	ldrh	r3, [r7, #22]
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	bf28      	it	cs
 8007a8e:	4613      	movcs	r3, r2
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	857b      	strh	r3, [r7, #42]	@ 0x2a

      // Check if dtxfsts has enough space available
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 8007a94:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8007a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	0099      	lsls	r1, r3, #2
 8007a9c:	4b23      	ldr	r3, [pc, #140]	@ (8007b2c <handle_epin_slave+0x1ac>)
 8007a9e:	400b      	ands	r3, r1
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d826      	bhi.n	8007af2 <handle_epin_slave+0x172>
        break;
      }

      // Push packet to Tx-FIFO
      if (xfer->ff) {
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00d      	beq.n	8007ac8 <handle_epin_slave+0x148>
        volatile uint32_t* tx_fifo = dwc2->fifo[epnum];
 8007aac:	79bb      	ldrb	r3, [r7, #6]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	031b      	lsls	r3, r3, #12
 8007ab2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ab4:	4413      	add	r3, r2
 8007ab6:	627b      	str	r3, [r7, #36]	@ 0x24
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8007abe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7fc fef0 	bl	80048a6 <tu_fifo_read_n_const_addr_full_words>
 8007ac6:	e00c      	b.n	8007ae2 <handle_epin_slave+0x162>
      } else {
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007ace:	79b9      	ldrb	r1, [r7, #6]
 8007ad0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007ad2:	f000 fc48 	bl	8008366 <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007adc:	441a      	add	r2, r3
 8007ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae0:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < remain_packets; i++) {
 8007ae2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007ae8:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8007aea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d3bf      	bcc.n	8007a70 <handle_epin_slave+0xf0>
 8007af0:	e000      	b.n	8007af4 <handle_epin_slave+0x174>
        break;
 8007af2:	bf00      	nop
      }
    }

    // Turn off TXFE if all bytes are written.
    if (epin->tsiz_bm.xfer_size == 0) {
 8007af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10b      	bne.n	8007b18 <handle_epin_slave+0x198>
      dwc2->diepempmsk &= ~(1 << epnum);
 8007b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b02:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 8007b06:	79ba      	ldrb	r2, [r7, #6]
 8007b08:	2101      	movs	r1, #1
 8007b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8007b0e:	43d2      	mvns	r2, r2
 8007b10:	401a      	ands	r2, r3
 8007b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b14:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
    }
  }
}
 8007b18:	bf00      	nop
 8007b1a:	3740      	adds	r7, #64	@ 0x40
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	08008824 	.word	0x08008824
 8007b24:	20000964 	.word	0x20000964
 8007b28:	20000a84 	.word	0x20000a84
 8007b2c:	0003fffc 	.word	0x0003fffc

08007b30 <handle_ep_irq>:
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b08a      	sub	sp, #40	@ 0x28
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	4603      	mov	r3, r0
 8007b38:	460a      	mov	r2, r1
 8007b3a:	71fb      	strb	r3, [r7, #7]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	71bb      	strb	r3, [r7, #6]
 8007b40:	79fb      	ldrb	r3, [r7, #7]
 8007b42:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d901      	bls.n	8007b4e <handle_ep_irq+0x1e>
    rhport = 0;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
 8007b50:	4a31      	ldr	r2, [pc, #196]	@ (8007c18 <handle_ep_irq+0xe8>)
 8007b52:	011b      	lsls	r3, r3, #4
 8007b54:	4413      	add	r3, r2
 8007b56:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007b58:	623b      	str	r3, [r7, #32]
 8007b5a:	6a3b      	ldr	r3, [r7, #32]
 8007b5c:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && dwc2->ghwcfg2_bm.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8007b5e:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 8007b60:	77fb      	strb	r3, [r7, #31]
  const uint8_t ep_count = DWC2_EP_COUNT(dwc2);
 8007b62:	6a3b      	ldr	r3, [r7, #32]
 8007b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b66:	f3c3 2383 	ubfx	r3, r3, #10, #4
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	77bb      	strb	r3, [r7, #30]
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 8007b70:	79bb      	ldrb	r3, [r7, #6]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d101      	bne.n	8007b7a <handle_ep_irq+0x4a>
 8007b76:	2300      	movs	r3, #0
 8007b78:	e000      	b.n	8007b7c <handle_ep_irq+0x4c>
 8007b7a:	2310      	movs	r3, #16
 8007b7c:	777b      	strb	r3, [r7, #29]
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 8007b7e:	79bb      	ldrb	r3, [r7, #6]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	bf14      	ite	ne
 8007b84:	2301      	movne	r3, #1
 8007b86:	2300      	moveq	r3, #0
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	025b      	lsls	r3, r3, #9
 8007b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b90:	6a3a      	ldr	r2, [r7, #32]
 8007b92:	4413      	add	r3, r2
 8007b94:	61bb      	str	r3, [r7, #24]

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8007b96:	2300      	movs	r3, #0
 8007b98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007b9c:	e032      	b.n	8007c04 <handle_ep_irq+0xd4>
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8007ba4:	7f79      	ldrb	r1, [r7, #29]
 8007ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007baa:	440b      	add	r3, r1
 8007bac:	fa22 f303 	lsr.w	r3, r2, r3
 8007bb0:	f003 0301 	and.w	r3, r3, #1
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d020      	beq.n	8007bfa <handle_ep_irq+0xca>
      dwc2_dep_t* epout = &ep_base[epnum];
 8007bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bbc:	015b      	lsls	r3, r3, #5
 8007bbe:	69ba      	ldr	r2, [r7, #24]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	617b      	str	r3, [r7, #20]
      union {
        uint32_t value;
        dwc2_diepint_t diepint_bm;
        dwc2_doepint_t doepint_bm;
      } intr;
      intr.value = epout->intr;
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	60bb      	str	r3, [r7, #8]

      epout->intr = intr.value; // Clear interrupt
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	609a      	str	r2, [r3, #8]

      if (is_dma) {
 8007bd0:	7ffb      	ldrb	r3, [r7, #31]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d111      	bne.n	8007bfa <handle_ep_irq+0xca>
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 8007bd6:	79bb      	ldrb	r3, [r7, #6]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d107      	bne.n	8007bec <handle_ep_irq+0xbc>
          handle_epin_slave(rhport, epnum, intr.diepint_bm);
 8007bdc:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8007be0:	79fb      	ldrb	r3, [r7, #7]
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7ff fecb 	bl	8007980 <handle_epin_slave>
 8007bea:	e006      	b.n	8007bfa <handle_ep_irq+0xca>
        } else {
          handle_epout_slave(rhport, epnum, intr.doepint_bm);
 8007bec:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8007bf0:	79fb      	ldrb	r3, [r7, #7]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7ff fe43 	bl	8007880 <handle_epout_slave>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8007bfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bfe:	3301      	adds	r3, #1
 8007c00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007c04:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007c08:	7fbb      	ldrb	r3, [r7, #30]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d3c7      	bcc.n	8007b9e <handle_ep_irq+0x6e>
        }
        #endif
      }
    }
  }
}
 8007c0e:	bf00      	nop
 8007c10:	bf00      	nop
 8007c12:	3728      	adds	r7, #40	@ 0x28
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	08008824 	.word	0x08008824

08007c1c <dcd_int_handler>:
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b098      	sub	sp, #96	@ 0x60
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	4603      	mov	r3, r0
 8007c24:	71fb      	strb	r3, [r7, #7]
 8007c26:	79fb      	ldrb	r3, [r7, #7]
 8007c28:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007c2c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d902      	bls.n	8007c3a <dcd_int_handler+0x1e>
    rhport = 0;
 8007c34:	2300      	movs	r3, #0
 8007c36:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007c3a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007c3e:	4a7d      	ldr	r2, [pc, #500]	@ (8007e34 <dcd_int_handler+0x218>)
 8007c40:	011b      	lsls	r3, r3, #4
 8007c42:	4413      	add	r3, r2
 8007c44:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007c46:	65fb      	str	r3, [r7, #92]	@ 0x5c

  const uint32_t gintmask = dwc2->gintmsk;
 8007c48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 8007c4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c54:	4013      	ands	r3, r2
 8007c56:	657b      	str	r3, [r7, #84]	@ 0x54

  if (gintsts & GINTSTS_USBRST) {
 8007c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d007      	beq.n	8007c72 <dcd_int_handler+0x56>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 8007c62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c64:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007c68:	615a      	str	r2, [r3, #20]
    handle_bus_reset(rhport);
 8007c6a:	79fb      	ldrb	r3, [r7, #7]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7ff fc47 	bl	8007500 <handle_bus_reset>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 8007c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d007      	beq.n	8007c8c <dcd_int_handler+0x70>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 8007c7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007c82:	615a      	str	r2, [r3, #20]
    handle_enum_done(rhport);
 8007c84:	79fb      	ldrb	r3, [r7, #7]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7ff fd14 	bl	80076b4 <handle_enum_done>
  }

  if (gintsts & GINTSTS_USBSUSP) {
 8007c8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d01d      	beq.n	8007cd2 <dcd_int_handler+0xb6>
    dwc2->gintsts = GINTSTS_USBSUSP;
 8007c96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c9c:	615a      	str	r2, [r3, #20]
 8007c9e:	79fb      	ldrb	r3, [r7, #7]
 8007ca0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8007ca4:	2304      	movs	r3, #4
 8007ca6:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8007caa:	2301      	movs	r3, #1
 8007cac:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  event.rhport = rhport;
 8007cb0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007cb4:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 8007cb8:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8007cbc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 8007cc0:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8007cc4:	f107 0320 	add.w	r3, r7, #32
 8007cc8:	4611      	mov	r1, r2
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fd fef8 	bl	8005ac0 <dcd_event_handler>
}
 8007cd0:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 8007cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	da1d      	bge.n	8007d14 <dcd_int_handler+0xf8>
    dwc2->gintsts = GINTSTS_WKUINT;
 8007cd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007cde:	615a      	str	r2, [r3, #20]
 8007ce0:	79fb      	ldrb	r3, [r7, #7]
 8007ce2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007ce6:	2305      	movs	r3, #5
 8007ce8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8007cec:	2301      	movs	r3, #1
 8007cee:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event.rhport = rhport;
 8007cf2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007cf6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 8007cfa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007cfe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 8007d02:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007d06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007d0a:	4611      	mov	r1, r2
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fd fed7 	bl	8005ac0 <dcd_event_handler>
}
 8007d12:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 8007d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d16:	f003 0304 	and.w	r3, r3, #4
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d022      	beq.n	8007d64 <dcd_int_handler+0x148>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 8007d1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	653b      	str	r3, [r7, #80]	@ 0x50

    if (otg_int & GOTGINT_SEDET) {
 8007d24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d26:	f003 0304 	and.w	r3, r3, #4
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d017      	beq.n	8007d5e <dcd_int_handler+0x142>
 8007d2e:	79fb      	ldrb	r3, [r7, #7]
 8007d30:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8007d34:	2302      	movs	r3, #2
 8007d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  event.rhport = rhport;
 8007d40:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007d44:	753b      	strb	r3, [r7, #20]
  event.event_id = eid;
 8007d46:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007d4a:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8007d4c:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8007d50:	f107 0314 	add.w	r3, r7, #20
 8007d54:	4611      	mov	r1, r2
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fd feb2 	bl	8005ac0 <dcd_event_handler>
}
 8007d5c:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 8007d5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d60:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007d62:	605a      	str	r2, [r3, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 8007d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d66:	f003 0308 	and.w	r3, r3, #8
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d02e      	beq.n	8007dcc <dcd_int_handler+0x1b0>
    dwc2->gintsts = GINTSTS_SOF;
 8007d6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d70:	2208      	movs	r2, #8
 8007d72:	615a      	str	r2, [r3, #20]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 8007d74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d76:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8007d7a:	0a1b      	lsrs	r3, r3, #8
 8007d7c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007d80:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 8007d82:	4b2d      	ldr	r3, [pc, #180]	@ (8007e38 <dcd_int_handler+0x21c>)
 8007d84:	79db      	ldrb	r3, [r3, #7]
 8007d86:	f083 0301 	eor.w	r3, r3, #1
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d005      	beq.n	8007d9c <dcd_int_handler+0x180>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 8007d90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	f023 0208 	bic.w	r2, r3, #8
 8007d98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d9a:	619a      	str	r2, [r3, #24]
 8007d9c:	79fb      	ldrb	r3, [r7, #7]
 8007d9e:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 8007da2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007da6:	2301      	movs	r3, #1
 8007da8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8007dac:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8007db0:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 8007db2:	2303      	movs	r3, #3
 8007db4:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 8007db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007db8:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 8007dba:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8007dbe:	f107 0308 	add.w	r3, r7, #8
 8007dc2:	4611      	mov	r1, r2
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fd fe7b 	bl	8005ac0 <dcd_event_handler>
}
 8007dca:	bf00      	nop
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 8007dcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dce:	f003 0310 	and.w	r3, r3, #16
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d015      	beq.n	8007e02 <dcd_int_handler+0x1e6>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 8007dd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	f023 0210 	bic.w	r2, r3, #16
 8007dde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007de0:	619a      	str	r2, [r3, #24]

    do {
      handle_rxflvl_irq(rhport); // read all packets
 8007de2:	79fb      	ldrb	r3, [r7, #7]
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7ff fca5 	bl	8007734 <handle_rxflvl_irq>
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 8007dea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	f003 0310 	and.w	r3, r3, #16
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1f5      	bne.n	8007de2 <dcd_int_handler+0x1c6>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 8007df6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	f043 0210 	orr.w	r2, r3, #16
 8007dfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e00:	619a      	str	r2, [r3, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 8007e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d004      	beq.n	8007e16 <dcd_int_handler+0x1fa>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 8007e0c:	79fb      	ldrb	r3, [r7, #7]
 8007e0e:	2100      	movs	r1, #0
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7ff fe8d 	bl	8007b30 <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 8007e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d004      	beq.n	8007e2a <dcd_int_handler+0x20e>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 8007e20:	79fb      	ldrb	r3, [r7, #7]
 8007e22:	2101      	movs	r1, #1
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7ff fe83 	bl	8007b30 <handle_ep_irq>
  }
}
 8007e2a:	bf00      	nop
 8007e2c:	3760      	adds	r7, #96	@ 0x60
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	08008824 	.word	0x08008824
 8007e38:	20000a84 	.word	0x20000a84

08007e3c <dwc2_phy_init>:
}

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	460b      	mov	r3, r1
 8007e46:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 8007e48:	78fb      	ldrb	r3, [r7, #3]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d110      	bne.n	8007e70 <dwc2_phy_init+0x34>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e52:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	639a      	str	r2, [r3, #56]	@ 0x38
      RCC->AHB1LPENR &= ~RCC_AHB1LPENR_USB1OTGHSULPILPEN;
    }
    #endif

    #if defined(USB_OTG_HS_PERIPH_BASE) && defined(RCC_AHB1LPENR_OTGHSULPILPEN)
    if ( USB_OTG_HS_PERIPH_BASE == (uint32_t) dwc2 ) {
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8007e88 <dwc2_phy_init+0x4c>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d10c      	bne.n	8007e7c <dwc2_phy_init+0x40>
      RCC->AHB1LPENR &= ~RCC_AHB1LPENR_OTGHSULPILPEN;
 8007e62:	4b0a      	ldr	r3, [pc, #40]	@ (8007e8c <dwc2_phy_init+0x50>)
 8007e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e66:	4a09      	ldr	r2, [pc, #36]	@ (8007e8c <dwc2_phy_init+0x50>)
 8007e68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007e6c:	6513      	str	r3, [r2, #80]	@ 0x50
      #else

      #endif
    }
  }
}
 8007e6e:	e005      	b.n	8007e7c <dwc2_phy_init+0x40>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e74:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr
 8007e88:	40040000 	.word	0x40040000
 8007e8c:	40023800 	.word	0x40023800

08007e90 <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 8007e9c:	78fb      	ldrb	r3, [r7, #3]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d152      	bne.n	8007f48 <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 8007ea2:	4b2c      	ldr	r3, [pc, #176]	@ (8007f54 <dwc2_phy_update+0xc4>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a2c      	ldr	r2, [pc, #176]	@ (8007f58 <dwc2_phy_update+0xc8>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d302      	bcc.n	8007eb2 <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 8007eac:	2306      	movs	r3, #6
 8007eae:	60fb      	str	r3, [r7, #12]
 8007eb0:	e041      	b.n	8007f36 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 8007eb2:	4b28      	ldr	r3, [pc, #160]	@ (8007f54 <dwc2_phy_update+0xc4>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a29      	ldr	r2, [pc, #164]	@ (8007f5c <dwc2_phy_update+0xcc>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d902      	bls.n	8007ec2 <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 8007ebc:	2307      	movs	r3, #7
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	e039      	b.n	8007f36 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 8007ec2:	4b24      	ldr	r3, [pc, #144]	@ (8007f54 <dwc2_phy_update+0xc4>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a26      	ldr	r2, [pc, #152]	@ (8007f60 <dwc2_phy_update+0xd0>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d302      	bcc.n	8007ed2 <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 8007ecc:	2308      	movs	r3, #8
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	e031      	b.n	8007f36 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 8007ed2:	4b20      	ldr	r3, [pc, #128]	@ (8007f54 <dwc2_phy_update+0xc4>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a23      	ldr	r2, [pc, #140]	@ (8007f64 <dwc2_phy_update+0xd4>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d902      	bls.n	8007ee2 <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 8007edc:	2309      	movs	r3, #9
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	e029      	b.n	8007f36 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 8007ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8007f54 <dwc2_phy_update+0xc4>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a20      	ldr	r2, [pc, #128]	@ (8007f68 <dwc2_phy_update+0xd8>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d902      	bls.n	8007ef2 <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 8007eec:	230a      	movs	r3, #10
 8007eee:	60fb      	str	r3, [r7, #12]
 8007ef0:	e021      	b.n	8007f36 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 8007ef2:	4b18      	ldr	r3, [pc, #96]	@ (8007f54 <dwc2_phy_update+0xc4>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8007f6c <dwc2_phy_update+0xdc>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d902      	bls.n	8007f02 <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 8007efc:	230b      	movs	r3, #11
 8007efe:	60fb      	str	r3, [r7, #12]
 8007f00:	e019      	b.n	8007f36 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 8007f02:	4b14      	ldr	r3, [pc, #80]	@ (8007f54 <dwc2_phy_update+0xc4>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a1a      	ldr	r2, [pc, #104]	@ (8007f70 <dwc2_phy_update+0xe0>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d302      	bcc.n	8007f12 <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 8007f0c:	230c      	movs	r3, #12
 8007f0e:	60fb      	str	r3, [r7, #12]
 8007f10:	e011      	b.n	8007f36 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 8007f12:	4b10      	ldr	r3, [pc, #64]	@ (8007f54 <dwc2_phy_update+0xc4>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a17      	ldr	r2, [pc, #92]	@ (8007f74 <dwc2_phy_update+0xe4>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d302      	bcc.n	8007f22 <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 8007f1c:	230d      	movs	r3, #13
 8007f1e:	60fb      	str	r3, [r7, #12]
 8007f20:	e009      	b.n	8007f36 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 8007f22:	4b0c      	ldr	r3, [pc, #48]	@ (8007f54 <dwc2_phy_update+0xc4>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a14      	ldr	r2, [pc, #80]	@ (8007f78 <dwc2_phy_update+0xe8>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d302      	bcc.n	8007f32 <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 8007f2c:	230e      	movs	r3, #14
 8007f2e:	60fb      	str	r3, [r7, #12]
 8007f30:	e001      	b.n	8007f36 <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 8007f32:	230f      	movs	r3, #15
 8007f34:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	029b      	lsls	r3, r3, #10
 8007f42:	431a      	orrs	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	60da      	str	r2, [r3, #12]
  }
}
 8007f48:	bf00      	nop
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr
 8007f54:	20000000 	.word	0x20000000
 8007f58:	01e84800 	.word	0x01e84800
 8007f5c:	01a39ddf 	.word	0x01a39ddf
 8007f60:	016e3600 	.word	0x016e3600
 8007f64:	014ca43f 	.word	0x014ca43f
 8007f68:	01312cff 	.word	0x01312cff
 8007f6c:	011a499f 	.word	0x011a499f
 8007f70:	01067380 	.word	0x01067380
 8007f74:	00f42400 	.word	0x00f42400
 8007f78:	00e4e1c0 	.word	0x00e4e1c0

08007f7c <reset_core>:
#include "dwc2_common.h"

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	f043 0201 	orr.w	r2, r3, #1
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	611a      	str	r2, [r3, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	f244 2209 	movw	r2, #16905	@ 0x4209
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d807      	bhi.n	8007fae <reset_core+0x32>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 8007f9e:	bf00      	nop
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	f003 0301 	and.w	r3, r3, #1
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1f9      	bne.n	8007fa0 <reset_core+0x24>
 8007fac:	e010      	b.n	8007fd0 <reset_core+0x54>
  } else {
    // From v4.20a CSRST bit is write only, CSRT_DONE (w1c) is introduced for checking.
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 8007fae:	bf00      	nop
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d0f9      	beq.n	8007fb0 <reset_core+0x34>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007fc4:	f023 0301 	bic.w	r3, r3, #1
 8007fc8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	611a      	str	r2, [r3, #16]
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 8007fd0:	bf00      	nop
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	dafb      	bge.n	8007fd2 <reset_core+0x56>
}
 8007fda:	bf00      	nop
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_COMMON_DEBUG, "Fullspeed PHY init\r\n");

  uint32_t gusbcfg = dwc2->gusbcfg;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	60fb      	str	r3, [r7, #12]

  // Select FS PHY
  gusbcfg |= GUSBCFG_PHYSEL;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ffc:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 8008004:	2100      	movs	r1, #0
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7ff ff18 	bl	8007e3c <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f7ff ffb5 	bl	8007f7c <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8008018:	60fb      	str	r3, [r7, #12]
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8008020:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 8008028:	2100      	movs	r1, #0
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7ff ff30 	bl	8007e90 <dwc2_phy_update>
}
 8008030:	bf00      	nop
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800804c:	60fb      	str	r3, [r7, #12]

  if (dwc2->ghwcfg2_bm.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008052:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b02      	cmp	r3, #2
 800805a:	d114      	bne.n	8008086 <phy_hs_init+0x4e>
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI PHY (external)
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f043 0310 	orr.w	r3, r3, #16
 8008062:	60fb      	str	r3, [r7, #12]

    // ULPI is always 8-bit interface
    gusbcfg &= ~GUSBCFG_PHYIF16;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f023 0308 	bic.w	r3, r3, #8
 800806a:	60fb      	str	r3, [r7, #12]

    // ULPI select single data rate
    gusbcfg &= ~GUSBCFG_DDRSEL;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008072:	60fb      	str	r3, [r7, #12]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800807a:	60fb      	str	r3, [r7, #12]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 8008082:	60fb      	str	r3, [r7, #12]
 8008084:	e013      	b.n	80080ae <phy_hs_init+0x76>
  } else {
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ PHY (internal)
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f023 0310 	bic.w	r3, r3, #16
 800808c:	60fb      	str	r3, [r7, #12]

    // Set 16-bit interface if supported
    if (dwc2->ghwcfg4_bm.phy_data_width) {
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008092:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b00      	cmp	r3, #0
 800809a:	d004      	beq.n	80080a6 <phy_hs_init+0x6e>
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f043 0308 	orr.w	r3, r3, #8
 80080a2:	60fb      	str	r3, [r7, #12]
 80080a4:	e003      	b.n	80080ae <phy_hs_init+0x76>
    } else {
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f023 0308 	bic.w	r3, r3, #8
 80080ac:	60fb      	str	r3, [r7, #12]
    }
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080b8:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	4619      	mov	r1, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f7ff febb 	bl	8007e3c <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7ff ff58 	bl	8007f7c <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 80080d2:	60fb      	str	r3, [r7, #12]
  gusbcfg |= (dwc2->ghwcfg4_bm.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080d8:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d002      	beq.n	80080e8 <phy_hs_init+0xb0>
 80080e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80080e6:	e001      	b.n	80080ec <phy_hs_init+0xb4>
 80080e8:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080fc:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008100:	b2db      	uxtb	r3, r3
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7ff fec3 	bl	8007e90 <dwc2_phy_update>
}
 800810a:	bf00      	nop
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
	...

08008114 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]

  // For some reason: GD32VF103 gsnpsid and all hwcfg register are always zero (skip it)
  (void)dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  enum { GSNPSID_ID_MASK = TU_GENMASK(31, 16) };
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008120:	0c1b      	lsrs	r3, r3, #16
 8008122:	041b      	lsls	r3, r3, #16
 8008124:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	4a0e      	ldr	r2, [pc, #56]	@ (8008164 <check_dwc2+0x50>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d012      	beq.n	8008154 <check_dwc2+0x40>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	4a0d      	ldr	r2, [pc, #52]	@ (8008168 <check_dwc2+0x54>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d00e      	beq.n	8008154 <check_dwc2+0x40>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	4a0c      	ldr	r2, [pc, #48]	@ (800816c <check_dwc2+0x58>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d00a      	beq.n	8008154 <check_dwc2+0x40>
 800813e:	4b0c      	ldr	r3, [pc, #48]	@ (8008170 <check_dwc2+0x5c>)
 8008140:	60bb      	str	r3, [r7, #8]
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	d000      	beq.n	8008150 <check_dwc2+0x3c>
 800814e:	be00      	bkpt	0x0000
 8008150:	2300      	movs	r3, #0
 8008152:	e000      	b.n	8008156 <check_dwc2+0x42>
#endif

  return true;
 8008154:	2301      	movs	r3, #1
}
 8008156:	4618      	mov	r0, r3
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	4f540000 	.word	0x4f540000
 8008168:	55310000 	.word	0x55310000
 800816c:	55320000 	.word	0x55320000
 8008170:	e000edf0 	.word	0xe000edf0

08008174 <dwc2_core_is_highspeed>:

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	460b      	mov	r3, r1
 800817e:	70fb      	strb	r3, [r7, #3]
  (void)dwc2;

#if CFG_TUD_ENABLED
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
 8008180:	78fb      	ldrb	r3, [r7, #3]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d101      	bne.n	800818a <dwc2_core_is_highspeed+0x16>
    return false;
 8008186:	2300      	movs	r3, #0
 8008188:	e009      	b.n	800819e <dwc2_core_is_highspeed+0x2a>
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
    return false;
  }
#endif

  return dwc2->ghwcfg2_bm.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800818e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8008192:	b2db      	uxtb	r3, r3
 8008194:	2b00      	cmp	r3, #0
 8008196:	bf14      	ite	ne
 8008198:	2301      	movne	r3, #1
 800819a:	2300      	moveq	r3, #0
 800819c:	b2db      	uxtb	r3, r3
}
 800819e:	4618      	mov	r0, r3
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
	...

080081ac <dwc2_core_init>:
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b088      	sub	sp, #32
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	4603      	mov	r3, r0
 80081b4:	71fb      	strb	r3, [r7, #7]
 80081b6:	460b      	mov	r3, r1
 80081b8:	71bb      	strb	r3, [r7, #6]
 80081ba:	4613      	mov	r3, r2
 80081bc:	717b      	strb	r3, [r7, #5]
 80081be:	79fb      	ldrb	r3, [r7, #7]
 80081c0:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80081c2:	7dfb      	ldrb	r3, [r7, #23]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d901      	bls.n	80081cc <dwc2_core_init+0x20>
    rhport = 0;
 80081c8:	2300      	movs	r3, #0
 80081ca:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80081cc:	7dfb      	ldrb	r3, [r7, #23]
 80081ce:	4a3b      	ldr	r2, [pc, #236]	@ (80082bc <dwc2_core_init+0x110>)
 80081d0:	011b      	lsls	r3, r3, #4
 80081d2:	4413      	add	r3, r2
 80081d4:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80081d6:	61fb      	str	r3, [r7, #28]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 80081d8:	69f8      	ldr	r0, [r7, #28]
 80081da:	f7ff ff9b 	bl	8008114 <check_dwc2>
 80081de:	4603      	mov	r3, r0
 80081e0:	f083 0301 	eor.w	r3, r3, #1
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00a      	beq.n	8008200 <dwc2_core_init+0x54>
 80081ea:	4b35      	ldr	r3, [pc, #212]	@ (80082c0 <dwc2_core_init+0x114>)
 80081ec:	61bb      	str	r3, [r7, #24]
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0301 	and.w	r3, r3, #1
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d000      	beq.n	80081fc <dwc2_core_init+0x50>
 80081fa:	be00      	bkpt	0x0000
 80081fc:	2300      	movs	r3, #0
 80081fe:	e058      	b.n	80082b2 <dwc2_core_init+0x106>

  // disable global interrupt
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	f023 0201 	bic.w	r2, r3, #1
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	609a      	str	r2, [r3, #8]

  if (is_highspeed) {
 800820c:	79bb      	ldrb	r3, [r7, #6]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d003      	beq.n	800821a <dwc2_core_init+0x6e>
    phy_hs_init(dwc2);
 8008212:	69f8      	ldr	r0, [r7, #28]
 8008214:	f7ff ff10 	bl	8008038 <phy_hs_init>
 8008218:	e002      	b.n	8008220 <dwc2_core_init+0x74>
  } else {
    phy_fs_init(dwc2);
 800821a:	69f8      	ldr	r0, [r7, #28]
 800821c:	f7ff fee4 	bl	8007fe8 <phy_fs_init>
   * this field is added to the high/full speed interpacket timeout
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another. */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	f043 0207 	orr.w	r2, r3, #7
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	60da      	str	r2, [r3, #12]

  // Enable PHY clock TODO stop/gate clock when suspended mode
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8008232:	f023 020f 	bic.w	r2, r3, #15
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	60fb      	str	r3, [r7, #12]
 8008240:	2310      	movs	r3, #16
 8008242:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8008244:	7afb      	ldrb	r3, [r7, #11]
 8008246:	019b      	lsls	r3, r3, #6
 8008248:	f043 0220 	orr.w	r2, r3, #32
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8008250:	bf00      	nop
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	f003 0320 	and.w	r3, r3, #32
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1f9      	bne.n	8008252 <dwc2_core_init+0xa6>
}
 800825e:	bf00      	nop
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	613b      	str	r3, [r7, #16]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	2210      	movs	r2, #16
 8008268:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800826a:	bf00      	nop
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	f003 0310 	and.w	r3, r3, #16
 8008274:	2b00      	cmp	r3, #0
 8008276:	d1f9      	bne.n	800826c <dwc2_core_init+0xc0>
}
 8008278:	bf00      	nop

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  // Clear pending and disable all interrupts
  dwc2->gintsts = 0xFFFFFFFFU;
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008280:	615a      	str	r2, [r3, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008288:	605a      	str	r2, [r3, #4]
  dwc2->gintmsk = 0;
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	2200      	movs	r2, #0
 800828e:	619a      	str	r2, [r3, #24]

  TU_LOG(DWC2_COMMON_DEBUG, "DMA = %u\r\n", is_dma);

  if (is_dma) {
 8008290:	797b      	ldrb	r3, [r7, #5]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d006      	beq.n	80082a4 <dwc2_core_init+0xf8>
    // DMA seems to be only settable after a core reset, and not possible to switch on-the-fly
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f043 0226 	orr.w	r2, r3, #38	@ 0x26
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	609a      	str	r2, [r3, #8]
 80082a2:	e005      	b.n	80082b0 <dwc2_core_init+0x104>
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	f043 0210 	orr.w	r2, r3, #16
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	619a      	str	r2, [r3, #24]
  }

  return true;
 80082b0:	2301      	movs	r3, #1
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3720      	adds	r7, #32
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	08008844 	.word	0x08008844
 80082c0:	e000edf0 	.word	0xe000edf0

080082c4 <dfifo_read_packet>:

//--------------------------------------------------------------------
// DFIFO
//--------------------------------------------------------------------
// Read a single data packet from receive DFIFO
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 80082c4:	b480      	push	{r7}
 80082c6:	b08f      	sub	sp, #60	@ 0x3c
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	4613      	mov	r3, r2
 80082d0:	80fb      	strh	r3, [r7, #6]
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082d8:	633b      	str	r3, [r7, #48]	@ 0x30

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
 80082da:	88fb      	ldrh	r3, [r7, #6]
 80082dc:	089b      	lsrs	r3, r3, #2
 80082de:	86fb      	strh	r3, [r7, #54]	@ 0x36
  while (word_count--) {
 80082e0:	e00b      	b.n	80082fa <dfifo_read_packet+0x36>
    tu_unaligned_write32(dst, *rx_fifo);
 80082e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80082ea:	623b      	str	r3, [r7, #32]
  *((uint32_t *) mem) = value;
 80082ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ee:	6a3a      	ldr	r2, [r7, #32]
 80082f0:	601a      	str	r2, [r3, #0]
}
 80082f2:	bf00      	nop
    dst += 4;
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	3304      	adds	r3, #4
 80082f8:	60bb      	str	r3, [r7, #8]
  while (word_count--) {
 80082fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80082fc:	1e5a      	subs	r2, r3, #1
 80082fe:	86fa      	strh	r2, [r7, #54]	@ 0x36
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1ee      	bne.n	80082e2 <dfifo_read_packet+0x1e>
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 8008304:	88fb      	ldrh	r3, [r7, #6]
 8008306:	b2db      	uxtb	r3, r3
 8008308:	f003 0303 	and.w	r3, r3, #3
 800830c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (bytes_rem != 0) {
 8008310:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008314:	2b00      	cmp	r3, #0
 8008316:	d020      	beq.n	800835a <dfifo_read_packet+0x96>
    const uint32_t tmp = *rx_fifo;
 8008318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800831e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008320:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) {
 800832a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800832e:	2b01      	cmp	r3, #1
 8008330:	d907      	bls.n	8008342 <dfifo_read_packet+0x7e>
      dst[1] = tu_u32_byte1(tmp);
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	3301      	adds	r3, #1
 8008336:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008338:	61ba      	str	r2, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 800833a:	69ba      	ldr	r2, [r7, #24]
 800833c:	0a12      	lsrs	r2, r2, #8
 800833e:	b2d2      	uxtb	r2, r2
 8008340:	701a      	strb	r2, [r3, #0]
    }
    if (bytes_rem > 2) {
 8008342:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008346:	2b02      	cmp	r3, #2
 8008348:	d907      	bls.n	800835a <dfifo_read_packet+0x96>
      dst[2] = tu_u32_byte2(tmp);
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	3302      	adds	r3, #2
 800834e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008350:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 8008352:	697a      	ldr	r2, [r7, #20]
 8008354:	0c12      	lsrs	r2, r2, #16
 8008356:	b2d2      	uxtb	r2, r2
 8008358:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800835a:	bf00      	nop
 800835c:	373c      	adds	r7, #60	@ 0x3c
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr

08008366 <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 8008366:	b480      	push	{r7}
 8008368:	b08b      	sub	sp, #44	@ 0x2c
 800836a:	af00      	add	r7, sp, #0
 800836c:	60f8      	str	r0, [r7, #12]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	461a      	mov	r2, r3
 8008372:	460b      	mov	r3, r1
 8008374:	72fb      	strb	r3, [r7, #11]
 8008376:	4613      	mov	r3, r2
 8008378:	813b      	strh	r3, [r7, #8]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 800837a:	7afb      	ldrb	r3, [r7, #11]
 800837c:	3301      	adds	r3, #1
 800837e:	031b      	lsls	r3, r3, #12
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	4413      	add	r3, r2
 8008384:	61fb      	str	r3, [r7, #28]

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
 8008386:	893b      	ldrh	r3, [r7, #8]
 8008388:	089b      	lsrs	r3, r3, #2
 800838a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while (word_count--) {
 800838c:	e008      	b.n	80083a0 <dfifo_write_packet+0x3a>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	617b      	str	r3, [r7, #20]
  return *((uint32_t const *) mem);
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	601a      	str	r2, [r3, #0]
    src += 4;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	3304      	adds	r3, #4
 800839e:	607b      	str	r3, [r7, #4]
  while (word_count--) {
 80083a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80083a2:	1e5a      	subs	r2, r3, #1
 80083a4:	84fa      	strh	r2, [r7, #38]	@ 0x26
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1f1      	bne.n	800838e <dfifo_write_packet+0x28>
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 80083aa:	893b      	ldrh	r3, [r7, #8]
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	f003 0303 	and.w	r3, r3, #3
 80083b2:	76fb      	strb	r3, [r7, #27]
  if (bytes_rem) {
 80083b4:	7efb      	ldrb	r3, [r7, #27]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d019      	beq.n	80083ee <dfifo_write_packet+0x88>
    uint32_t tmp_word = src[0];
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	623b      	str	r3, [r7, #32]
    if (bytes_rem > 1) {
 80083c0:	7efb      	ldrb	r3, [r7, #27]
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d906      	bls.n	80083d4 <dfifo_write_packet+0x6e>
      tmp_word |= (src[1] << 8);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	3301      	adds	r3, #1
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	021b      	lsls	r3, r3, #8
 80083ce:	6a3a      	ldr	r2, [r7, #32]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	623b      	str	r3, [r7, #32]
    }
    if (bytes_rem > 2) {
 80083d4:	7efb      	ldrb	r3, [r7, #27]
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d906      	bls.n	80083e8 <dfifo_write_packet+0x82>
      tmp_word |= (src[2] << 16);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	3302      	adds	r3, #2
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	041b      	lsls	r3, r3, #16
 80083e2:	6a3a      	ldr	r2, [r7, #32]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	623b      	str	r3, [r7, #32]
    }

    *tx_fifo = tmp_word;
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	6a3a      	ldr	r2, [r7, #32]
 80083ec:	601a      	str	r2, [r3, #0]
  }
}
 80083ee:	bf00      	nop
 80083f0:	372c      	adds	r7, #44	@ 0x2c
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 80083fa:	b480      	push	{r7}
 80083fc:	b085      	sub	sp, #20
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800840c:	b2db      	uxtb	r3, r3
 800840e:	2b00      	cmp	r3, #0
 8008410:	d106      	bne.n	8008420 <tu_edpt_claim+0x26>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <tu_edpt_claim+0x2a>
 8008420:	2300      	movs	r3, #0
 8008422:	e01e      	b.n	8008462 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b00      	cmp	r3, #0
 8008430:	d108      	bne.n	8008444 <tu_edpt_claim+0x4a>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800843a:	b2db      	uxtb	r3, r3
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <tu_edpt_claim+0x4a>
 8008440:	2301      	movs	r3, #1
 8008442:	e000      	b.n	8008446 <tu_edpt_claim+0x4c>
 8008444:	2300      	movs	r3, #0
 8008446:	73fb      	strb	r3, [r7, #15]
 8008448:	7bfb      	ldrb	r3, [r7, #15]
 800844a:	f003 0301 	and.w	r3, r3, #1
 800844e:	73fb      	strb	r3, [r7, #15]
  if (available) {
 8008450:	7bfb      	ldrb	r3, [r7, #15]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d004      	beq.n	8008460 <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	7813      	ldrb	r3, [r2, #0]
 800845a:	f043 0304 	orr.w	r3, r3, #4
 800845e:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 8008460:	7bfb      	ldrb	r3, [r7, #15]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3714      	adds	r7, #20
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800846e:	b480      	push	{r7}
 8008470:	b085      	sub	sp, #20
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b01      	cmp	r3, #1
 8008484:	d108      	bne.n	8008498 <tu_edpt_release+0x2a>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800848e:	b2db      	uxtb	r3, r3
 8008490:	2b00      	cmp	r3, #0
 8008492:	d101      	bne.n	8008498 <tu_edpt_release+0x2a>
 8008494:	2301      	movs	r3, #1
 8008496:	e000      	b.n	800849a <tu_edpt_release+0x2c>
 8008498:	2300      	movs	r3, #0
 800849a:	73fb      	strb	r3, [r7, #15]
 800849c:	7bfb      	ldrb	r3, [r7, #15]
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d004      	beq.n	80084b4 <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	7813      	ldrb	r3, [r2, #0]
 80084ae:	f023 0304 	bic.w	r3, r3, #4
 80084b2:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 80084b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3714      	adds	r7, #20
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
	...

080084c4 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 80084c4:	b480      	push	{r7}
 80084c6:	b08b      	sub	sp, #44	@ 0x2c
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	460b      	mov	r3, r1
 80084ce:	70fb      	strb	r3, [r7, #3]
 80084d0:	4613      	mov	r3, r2
 80084d2:	70bb      	strb	r3, [r7, #2]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	889b      	ldrh	r3, [r3, #4]
 80084dc:	b29b      	uxth	r3, r3
 80084de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084e2:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 80084e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	78db      	ldrb	r3, [r3, #3]
 80084ea:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b03      	cmp	r3, #3
 80084f2:	d059      	beq.n	80085a8 <tu_edpt_validate+0xe4>
 80084f4:	2b03      	cmp	r3, #3
 80084f6:	dc6e      	bgt.n	80085d6 <tu_edpt_validate+0x112>
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d002      	beq.n	8008502 <tu_edpt_validate+0x3e>
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d018      	beq.n	8008532 <tu_edpt_validate+0x6e>
 8008500:	e069      	b.n	80085d6 <tu_edpt_validate+0x112>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8008502:	78fb      	ldrb	r3, [r7, #3]
 8008504:	2b02      	cmp	r3, #2
 8008506:	d102      	bne.n	800850e <tu_edpt_validate+0x4a>
 8008508:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800850c:	e001      	b.n	8008512 <tu_edpt_validate+0x4e>
 800850e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8008512:	827b      	strh	r3, [r7, #18]
      TU_ASSERT(max_packet_size <= spec_size);
 8008514:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008516:	8a7b      	ldrh	r3, [r7, #18]
 8008518:	429a      	cmp	r2, r3
 800851a:	d95e      	bls.n	80085da <tu_edpt_validate+0x116>
 800851c:	4b35      	ldr	r3, [pc, #212]	@ (80085f4 <tu_edpt_validate+0x130>)
 800851e:	60fb      	str	r3, [r7, #12]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	2b00      	cmp	r3, #0
 800852a:	d000      	beq.n	800852e <tu_edpt_validate+0x6a>
 800852c:	be00      	bkpt	0x0000
 800852e:	2300      	movs	r3, #0
 8008530:	e059      	b.n	80085e6 <tu_edpt_validate+0x122>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 8008532:	78fb      	ldrb	r3, [r7, #3]
 8008534:	2b02      	cmp	r3, #2
 8008536:	d10e      	bne.n	8008556 <tu_edpt_validate+0x92>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 8008538:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800853a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800853e:	d04e      	beq.n	80085de <tu_edpt_validate+0x11a>
 8008540:	4b2c      	ldr	r3, [pc, #176]	@ (80085f4 <tu_edpt_validate+0x130>)
 8008542:	617b      	str	r3, [r7, #20]
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 0301 	and.w	r3, r3, #1
 800854c:	2b00      	cmp	r3, #0
 800854e:	d000      	beq.n	8008552 <tu_edpt_validate+0x8e>
 8008550:	be00      	bkpt	0x0000
 8008552:	2300      	movs	r3, #0
 8008554:	e047      	b.n	80085e6 <tu_edpt_validate+0x122>
      } else {
        // Bulk fullspeed can only be 8, 16, 32, 64
        if (is_host && max_packet_size == 512) {
 8008556:	78bb      	ldrb	r3, [r7, #2]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00e      	beq.n	800857a <tu_edpt_validate+0xb6>
 800855c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800855e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008562:	d10a      	bne.n	800857a <tu_edpt_validate+0xb6>
          // HACK: while in host mode, some device incorrectly always report 512 regardless of link speed
          // overwrite descriptor to force 64
          TU_LOG1("  WARN: EP max packet size is 512 in fullspeed, force to 64\r\n");
          tusb_desc_endpoint_t* hacked_ep = (tusb_desc_endpoint_t*) (uintptr_t) desc_ep;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	61fb      	str	r3, [r7, #28]
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	2200      	movs	r2, #0
 800856c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008570:	711a      	strb	r2, [r3, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	715a      	strb	r2, [r3, #5]
        if (is_host && max_packet_size == 512) {
 8008576:	bf00      	nop
        } else {
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
                    max_packet_size == 32 || max_packet_size == 64);
        }
      }
      break;
 8008578:	e031      	b.n	80085de <tu_edpt_validate+0x11a>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 800857a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800857c:	2b08      	cmp	r3, #8
 800857e:	d02e      	beq.n	80085de <tu_edpt_validate+0x11a>
 8008580:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008582:	2b10      	cmp	r3, #16
 8008584:	d02b      	beq.n	80085de <tu_edpt_validate+0x11a>
 8008586:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008588:	2b20      	cmp	r3, #32
 800858a:	d028      	beq.n	80085de <tu_edpt_validate+0x11a>
 800858c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800858e:	2b40      	cmp	r3, #64	@ 0x40
 8008590:	d025      	beq.n	80085de <tu_edpt_validate+0x11a>
 8008592:	4b18      	ldr	r3, [pc, #96]	@ (80085f4 <tu_edpt_validate+0x130>)
 8008594:	61bb      	str	r3, [r7, #24]
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 0301 	and.w	r3, r3, #1
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d000      	beq.n	80085a4 <tu_edpt_validate+0xe0>
 80085a2:	be00      	bkpt	0x0000
 80085a4:	2300      	movs	r3, #0
 80085a6:	e01e      	b.n	80085e6 <tu_edpt_validate+0x122>

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 80085a8:	78fb      	ldrb	r3, [r7, #3]
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d102      	bne.n	80085b4 <tu_edpt_validate+0xf0>
 80085ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085b2:	e000      	b.n	80085b6 <tu_edpt_validate+0xf2>
 80085b4:	2340      	movs	r3, #64	@ 0x40
 80085b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 80085b8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80085ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085bc:	429a      	cmp	r2, r3
 80085be:	d910      	bls.n	80085e2 <tu_edpt_validate+0x11e>
 80085c0:	4b0c      	ldr	r3, [pc, #48]	@ (80085f4 <tu_edpt_validate+0x130>)
 80085c2:	623b      	str	r3, [r7, #32]
 80085c4:	6a3b      	ldr	r3, [r7, #32]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 0301 	and.w	r3, r3, #1
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d000      	beq.n	80085d2 <tu_edpt_validate+0x10e>
 80085d0:	be00      	bkpt	0x0000
 80085d2:	2300      	movs	r3, #0
 80085d4:	e007      	b.n	80085e6 <tu_edpt_validate+0x122>
      break;
    }

    default:
      return false;
 80085d6:	2300      	movs	r3, #0
 80085d8:	e005      	b.n	80085e6 <tu_edpt_validate+0x122>
      break;
 80085da:	bf00      	nop
 80085dc:	e002      	b.n	80085e4 <tu_edpt_validate+0x120>
      break;
 80085de:	bf00      	nop
 80085e0:	e000      	b.n	80085e4 <tu_edpt_validate+0x120>
      break;
 80085e2:	bf00      	nop
  }

  return true;
 80085e4:	2301      	movs	r3, #1
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	372c      	adds	r7, #44	@ 0x2c
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	e000edf0 	.word	0xe000edf0

080085f8 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 80085f8:	b480      	push	{r7}
 80085fa:	b08d      	sub	sp, #52	@ 0x34
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	4611      	mov	r1, r2
 8008604:	461a      	mov	r2, r3
 8008606:	460b      	mov	r3, r1
 8008608:	80fb      	strh	r3, [r7, #6]
 800860a:	4613      	mov	r3, r2
 800860c:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 8008612:	88fb      	ldrh	r3, [r7, #6]
 8008614:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008616:	4413      	add	r3, r2
 8008618:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 800861a:	e027      	b.n	800866c <tu_edpt_bind_driver+0x74>
 800861c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800861e:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8008620:	6a3b      	ldr	r3, [r7, #32]
 8008622:	3301      	adds	r3, #1
 8008624:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 8008626:	2b05      	cmp	r3, #5
 8008628:	d116      	bne.n	8008658 <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 800862a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800862c:	789b      	ldrb	r3, [r3, #2]
 800862e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008632:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008636:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008638:	7fbb      	ldrb	r3, [r7, #30]
 800863a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800863e:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8008640:	005b      	lsls	r3, r3, #1
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	4413      	add	r3, r2
 8008646:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800864a:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800864c:	7ffa      	ldrb	r2, [r7, #31]
 800864e:	09d2      	lsrs	r2, r2, #7
 8008650:	b2d2      	uxtb	r2, r2
 8008652:	4611      	mov	r1, r2
 8008654:	797a      	ldrb	r2, [r7, #5]
 8008656:	545a      	strb	r2, [r3, r1]
 8008658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800865a:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800865c:	69bb      	ldr	r3, [r7, #24]
 800865e:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	461a      	mov	r2, r3
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 800866a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 800866c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800866e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008670:	429a      	cmp	r2, r3
 8008672:	d3d3      	bcc.n	800861c <tu_edpt_bind_driver+0x24>
  }
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	3734      	adds	r7, #52	@ 0x34
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr

08008682 <memset>:
 8008682:	4402      	add	r2, r0
 8008684:	4603      	mov	r3, r0
 8008686:	4293      	cmp	r3, r2
 8008688:	d100      	bne.n	800868c <memset+0xa>
 800868a:	4770      	bx	lr
 800868c:	f803 1b01 	strb.w	r1, [r3], #1
 8008690:	e7f9      	b.n	8008686 <memset+0x4>
	...

08008694 <__libc_init_array>:
 8008694:	b570      	push	{r4, r5, r6, lr}
 8008696:	4d0d      	ldr	r5, [pc, #52]	@ (80086cc <__libc_init_array+0x38>)
 8008698:	4c0d      	ldr	r4, [pc, #52]	@ (80086d0 <__libc_init_array+0x3c>)
 800869a:	1b64      	subs	r4, r4, r5
 800869c:	10a4      	asrs	r4, r4, #2
 800869e:	2600      	movs	r6, #0
 80086a0:	42a6      	cmp	r6, r4
 80086a2:	d109      	bne.n	80086b8 <__libc_init_array+0x24>
 80086a4:	4d0b      	ldr	r5, [pc, #44]	@ (80086d4 <__libc_init_array+0x40>)
 80086a6:	4c0c      	ldr	r4, [pc, #48]	@ (80086d8 <__libc_init_array+0x44>)
 80086a8:	f000 f826 	bl	80086f8 <_init>
 80086ac:	1b64      	subs	r4, r4, r5
 80086ae:	10a4      	asrs	r4, r4, #2
 80086b0:	2600      	movs	r6, #0
 80086b2:	42a6      	cmp	r6, r4
 80086b4:	d105      	bne.n	80086c2 <__libc_init_array+0x2e>
 80086b6:	bd70      	pop	{r4, r5, r6, pc}
 80086b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80086bc:	4798      	blx	r3
 80086be:	3601      	adds	r6, #1
 80086c0:	e7ee      	b.n	80086a0 <__libc_init_array+0xc>
 80086c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80086c6:	4798      	blx	r3
 80086c8:	3601      	adds	r6, #1
 80086ca:	e7f2      	b.n	80086b2 <__libc_init_array+0x1e>
 80086cc:	08008970 	.word	0x08008970
 80086d0:	08008970 	.word	0x08008970
 80086d4:	08008970 	.word	0x08008970
 80086d8:	08008974 	.word	0x08008974

080086dc <memcpy>:
 80086dc:	440a      	add	r2, r1
 80086de:	4291      	cmp	r1, r2
 80086e0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80086e4:	d100      	bne.n	80086e8 <memcpy+0xc>
 80086e6:	4770      	bx	lr
 80086e8:	b510      	push	{r4, lr}
 80086ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086f2:	4291      	cmp	r1, r2
 80086f4:	d1f9      	bne.n	80086ea <memcpy+0xe>
 80086f6:	bd10      	pop	{r4, pc}

080086f8 <_init>:
 80086f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fa:	bf00      	nop
 80086fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086fe:	bc08      	pop	{r3}
 8008700:	469e      	mov	lr, r3
 8008702:	4770      	bx	lr

08008704 <_fini>:
 8008704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008706:	bf00      	nop
 8008708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800870a:	bc08      	pop	{r3}
 800870c:	469e      	mov	lr, r3
 800870e:	4770      	bx	lr
